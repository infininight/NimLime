[
  {
    "comment": "A simple XML tree. More efficient and simpler than the DOM."
  }, 
  {
    "name": "newElement", 
    "type": "skProc", 
    "description": "creates a new <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt> of kind <tt class=\"docutils literal\"><span class=\"pre\">xnText</span></tt> with the given <cite>tag</cite>.", 
    "code": "proc newElement*(tag: string): XmlNode"
  }, 
  {
    "name": "newText", 
    "type": "skProc", 
    "description": "creates a new <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt> of kind <tt class=\"docutils literal\"><span class=\"pre\">xnText</span></tt> with the text <cite>text</cite>.", 
    "code": "proc newText*(text: string): XmlNode"
  }, 
  {
    "name": "newComment", 
    "type": "skProc", 
    "description": "creates a new <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt> of kind <tt class=\"docutils literal\"><span class=\"pre\">xnComment</span></tt> with the text <cite>comment</cite>.", 
    "code": "proc newComment*(comment: string): XmlNode"
  }, 
  {
    "name": "newCData", 
    "type": "skProc", 
    "description": "creates a new <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt> of kind <tt class=\"docutils literal\"><span class=\"pre\">xnComment</span></tt> with the text <cite>cdata</cite>.", 
    "code": "proc newCData*(cdata: string): XmlNode"
  }, 
  {
    "name": "newEntity", 
    "type": "skProc", 
    "description": "creates a new <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt> of kind <tt class=\"docutils literal\"><span class=\"pre\">xnEntity</span></tt> with the text <cite>entity</cite>.", 
    "code": "proc newEntity*(entity: string): XmlNode"
  }, 
  {
    "name": "text", 
    "type": "skProc", 
    "description": "gets the associated text with the node <cite>n</cite>. <cite>n</cite> can be a CDATA, Text, comment, or entity node.", 
    "code": "proc text*(n: XmlNode): string {.inline.}"
  }, 
  {
    "name": "rawText", 
    "type": "skProc", 
    "description": "returns the underlying 'text' string by reference. This is only used for speed hacks.", 
    "code": "proc rawText*(n: XmlNode): string {.inline.}"
  }, 
  {
    "name": "rawTag", 
    "type": "skProc", 
    "description": "returns the underlying 'tag' string by reference. This is only used for speed hacks.", 
    "code": "proc rawTag*(n: XmlNode): string {.inline.}"
  }, 
  {
    "name": "innerText", 
    "type": "skProc", 
    "description": "gets the inner text of <cite>n</cite>. <cite>n</cite> has to be an <tt class=\"docutils literal\"><span class=\"pre\">xnElement</span></tt> node. Only <tt class=\"docutils literal\"><span class=\"pre\">xnText</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">xnEntity</span></tt> nodes are considered part of <cite>n</cite>'s inner text, other child nodes are silently ignored.", 
    "code": "proc innerText*(n: XmlNode): string"
  }, 
  {
    "name": "tag", 
    "type": "skProc", 
    "description": "gets the tag name of <cite>n</cite>. <cite>n</cite> has to be an <tt class=\"docutils literal\"><span class=\"pre\">xnElement</span></tt> node.", 
    "code": "proc tag*(n: XmlNode): string {.inline.}"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "adds the child <cite>son</cite> to <cite>father</cite>.", 
    "code": "proc add*(father, son: XmlNode) {.inline.}"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number <cite>n</cite>'s children.", 
    "code": "proc len*(n: XmlNode): int {.inline.}"
  }, 
  {
    "name": "kind", 
    "type": "skProc", 
    "description": "returns <cite>n</cite>'s kind.", 
    "code": "proc kind*(n: XmlNode): XmlNodeKind {.inline.}"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "returns the <cite>i</cite>'th child of <cite>n</cite>.", 
    "code": "proc `[]`*(n: XmlNode; i: int): XmlNode {.inline.}"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "iterates over any child of <cite>n</cite>.", 
    "code": "iterator items*(n: XmlNode): XmlNode {.inline.}"
  }, 
  {
    "name": "attrs", 
    "type": "skProc", 
    "description": "gets the attributes belonging to <cite>n</cite>. Returns <cite>nil</cite> if attributes have not been initialised for this node.", 
    "code": "proc attrs*(n: XmlNode): XmlAttributes {.inline.}"
  }, 
  {
    "name": "`attrs=`", 
    "type": "skProc", 
    "description": "sets the attributes belonging to <cite>n</cite>.", 
    "code": "proc `attrs =`*(n: XmlNode; attr: XmlAttributes) {.inline.}"
  }, 
  {
    "name": "attrsLen", 
    "type": "skProc", 
    "description": "returns the number of <cite>n</cite>'s attributes.", 
    "code": "proc attrsLen*(n: XmlNode): int {.inline.}"
  }, 
  {
    "name": "clientData", 
    "type": "skProc", 
    "description": "gets the client data of <cite>n</cite>. The client data field is used by the HTML parser and generator.", 
    "code": "proc clientData*(n: XmlNode): int {.inline.}"
  }, 
  {
    "name": "`clientData=`", 
    "type": "skProc", 
    "description": "sets the client data of <cite>n</cite>. The client data field is used by the HTML parser and generator.", 
    "code": "proc `clientData =`*(n: XmlNode; data: int) {.inline.}"
  }, 
  {
    "name": "addEscaped", 
    "type": "skProc", 
    "description": "same as <tt class=\"docutils literal\"><span class=\"pre\">result.add(escape(s))</span></tt>, but more efficient.", 
    "code": "proc addEscaped*(result: var string; s: string)"
  }, 
  {
    "name": "escape", 
    "type": "skProc", 
    "description": "escapes <cite>s</cite> for inclusion into an XML document. Escapes these characters:<table border=\"1\" class=\"docutils\"><tr><th>char</th><th>is converted to</th></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">&lt;</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;lt;</span></tt></td></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">&gt;</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;gt;</span></tt></td></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;amp;</span></tt></td></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">&quot;</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;quot;</span></tt></td></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">'</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;#x27;</span></tt></td></tr>\u000A<tr><td><tt class=\"docutils literal\"><span class=\"pre\">/</span></tt></td><td><tt class=\"docutils literal\"><span class=\"pre\">&amp;#x2F;</span></tt></td></tr>\u000A</table>", 
    "code": "proc escape*(s: string): string"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "adds the textual representation of <cite>n</cite> to <cite>result</cite>.", 
    "code": "proc add*(result: var string; n: XmlNode; indent = 0; indWidth = 2)"
  }, 
  {
    "name": "xmlHeader", 
    "type": "skConst", 
    "description": "header to use for complete XML output", 
    "code": "xmlHeader* = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\x0A\""
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "converts <cite>n</cite> into its string representation. No <tt class=\"docutils literal\"><span class=\"pre\">&lt;$xml ...$&gt;</span></tt> declaration is produced, so that the produced XML fragments are composable.", 
    "code": "proc `$`*(n: XmlNode): string"
  }, 
  {
    "name": "newXmlTree", 
    "type": "skProc", 
    "description": "creates a new XML tree with <cite>tag</cite>, <cite>children</cite> and <cite>attributes</cite>", 
    "code": "proc newXmlTree*(tag: string; children: openArray[XmlNode]; \u000A                 attributes: XmlAttributes = nil): XmlNode"
  }, 
  {
    "name": "`&lt;&gt;`", 
    "type": "skMacro", 
    "description": "Constructor macro for XML. Example usage:<pre><span class=\"Operator\">&lt;&gt;</span><span class=\"Identifier\">a</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">href</span><span class=\"Operator\">=</span><span class=\"StringLit\">&quot;http://nim-code.org&quot;</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">newText</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;Nim rules.&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">)</span></pre><p>Produces an XML tree for:<pre>\u000A&lt;a href=&quot;http://nim-code.org&quot;&gt;Nim rules.&lt;/a&gt;</pre>\u000A</p>\u000A", 
    "code": "macro `<>`*(x: expr): expr {.immediate.}"
  }, 
  {
    "name": "child", 
    "type": "skProc", 
    "description": "Finds the first child element of <cite>n</cite> with a name of <cite>name</cite>. Returns <cite>nil</cite> on failure.", 
    "code": "proc child*(n: XmlNode; name: string): XmlNode"
  }, 
  {
    "name": "attr", 
    "type": "skProc", 
    "description": "Finds the first attribute of <cite>n</cite> with a name of <cite>name</cite>. Returns &quot;&quot; on failure.", 
    "code": "proc attr*(n: XmlNode; name: string): string"
  }, 
  {
    "name": "findAll", 
    "type": "skProc", 
    "description": "<p>Iterates over all the children of <cite>n</cite> returning those matching <cite>tag</cite>.</p>\u000A<p>Found nodes satisfying the condition will be appended to the <cite>result</cite> sequence, which can't be nil or the proc will crash. Usage example:</p>\u000A<pre><span class=\"Keyword\">var</span>\u000A  <span class=\"Identifier\">html</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">XmlNode</span>\u000A  <span class=\"Identifier\">tags</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">seq</span><span class=\"Punctuation\">[</span><span class=\"Identifier\">XmlNode</span><span class=\"Punctuation\">]</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctuation\">[</span><span class=\"Punctuation\">]</span>\u000A\u000A<span class=\"Identifier\">html</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">buildHtml</span><span class=\"Punctuation\">(</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">findAll</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">html</span><span class=\"Punctuation\">,</span> <span class=\"StringLit\">&quot;img&quot;</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">tags</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Keyword\">for</span> <span class=\"Identifier\">imgTag</span> <span class=\"Keyword\">in</span> <span class=\"Identifier\">tags</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Identifier\">process</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">imgTag</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "proc findAll*(n: XmlNode; tag: string; result: var seq[XmlNode])"
  }, 
  {
    "name": "findAll", 
    "type": "skProc", 
    "description": "Shortcut version to assign in let blocks. Example:<pre><span class=\"Keyword\">var</span> <span class=\"Identifier\">html</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">XmlNode</span>\u000A\u000A<span class=\"Identifier\">html</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">buildHtml</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">html</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Keyword\">for</span> <span class=\"Identifier\">imgTag</span> <span class=\"Keyword\">in</span> <span class=\"Identifier\">html</span><span class=\"Operator\">.</span><span class=\"Identifier\">findAll</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;img&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Identifier\">process</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">imgTag</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "proc findAll*(n: XmlNode; tag: string): seq[XmlNode]"
  }
]