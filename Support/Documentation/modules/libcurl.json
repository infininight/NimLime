[
  {
    "name": "TMoption", 
    "type": "skType", 
    "code": "TMoption* = enum \u000A  MOPT_SOCKETDATA = 10000 + 2, MOPT_LASTENTRY = 10000 + 3, \u000A  MOPT_SOCKETFUNCTION = 20000 + 1"
  }, 
  {
    "name": "LIBCURL_VERSION_PATCH", 
    "type": "skConst", 
    "code": "LIBCURL_VERSION_PATCH* = 5"
  }, 
  {
    "name": "strequal", 
    "type": "skProc", 
    "code": "proc strequal*(s1, s2: cstring): int32 {.cdecl, dynlib: libname, \u000A    importc: \"curl_strequal\".}"
  }, 
  {
    "name": "strnequal", 
    "type": "skProc", 
    "code": "proc strnequal*(s1, s2: cstring; n: int): int32 {.cdecl, dynlib: libname, \u000A    importc: \"curl_strnequal\".}"
  }, 
  {
    "name": "formadd", 
    "type": "skProc", 
    "code": "proc formadd*(httppost, last_post: PPcurl_httppost): TFORMcode {.cdecl, varargs, \u000A    dynlib: libname, importc: \"curl_formadd\".}"
  }, 
  {
    "name": "formget", 
    "type": "skProc", 
    "code": "proc formget*(form: Phttppost; arg: pointer; append: Tformget_callback): int32 {.\u000A    cdecl, dynlib: libname, importc: \"curl_formget\".}"
  }, 
  {
    "name": "formfree", 
    "type": "skProc", 
    "code": "proc formfree*(form: Phttppost) {.cdecl, dynlib: libname, \u000A                                  importc: \"curl_formfree\".}"
  }, 
  {
    "name": "getenv", 
    "type": "skProc", 
    "code": "proc getenv*(variable: cstring): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_getenv\".}"
  }, 
  {
    "name": "version", 
    "type": "skProc", 
    "code": "proc version*(): cstring {.cdecl, dynlib: libname, importc: \"curl_version\".}"
  }, 
  {
    "name": "easy_escape", 
    "type": "skProc", 
    "code": "proc easy_escape*(handle: PCurl; str: cstring; len: int32): cstring {.cdecl, \u000A    dynlib: libname, importc: \"curl_easy_escape\".}"
  }, 
  {
    "name": "escape", 
    "type": "skProc", 
    "code": "proc escape*(str: cstring; len: int32): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_escape\".}"
  }, 
  {
    "name": "easy_unescape", 
    "type": "skProc", 
    "code": "proc easy_unescape*(handle: PCurl; str: cstring; len: int32; \u000A                    outlength: var int32): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_easy_unescape\".}"
  }, 
  {
    "name": "unescape", 
    "type": "skProc", 
    "code": "proc unescape*(str: cstring; len: int32): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_unescape\".}"
  }, 
  {
    "name": "free", 
    "type": "skProc", 
    "code": "proc free*(p: pointer) {.cdecl, dynlib: libname, importc: \"curl_free\".}"
  }, 
  {
    "name": "global_init", 
    "type": "skProc", 
    "code": "proc global_init*(flags: int32): Tcode {.cdecl, dynlib: libname, \u000A    importc: \"curl_global_init\".}"
  }, 
  {
    "name": "global_init_mem", 
    "type": "skProc", 
    "code": "proc global_init_mem*(flags: int32; m: Tmalloc_callback; f: Tfree_callback; \u000A                      r: Trealloc_callback; s: Tstrdup_callback; \u000A                      c: Tcalloc_callback): Tcode {.cdecl, dynlib: libname, \u000A    importc: \"curl_global_init_mem\".}"
  }, 
  {
    "name": "global_cleanup", 
    "type": "skProc", 
    "code": "proc global_cleanup*() {.cdecl, dynlib: libname, importc: \"curl_global_cleanup\".}"
  }, 
  {
    "name": "slist_append", 
    "type": "skProc", 
    "code": "proc slist_append*(slist: Pslist; p: cstring): Pslist {.cdecl, dynlib: libname, \u000A    importc: \"curl_slist_append\".}"
  }, 
  {
    "name": "slist_free_all", 
    "type": "skProc", 
    "code": "proc slist_free_all*(para1: Pslist) {.cdecl, dynlib: libname, \u000A                                      importc: \"curl_slist_free_all\".}"
  }, 
  {
    "name": "getdate", 
    "type": "skProc", 
    "code": "proc getdate*(p: cstring; unused: ptr Time): Time {.cdecl, dynlib: libname, \u000A    importc: \"curl_getdate\".}"
  }, 
  {
    "name": "share_init", 
    "type": "skProc", 
    "code": "proc share_init*(): PSH {.cdecl, dynlib: libname, importc: \"curl_share_init\".}"
  }, 
  {
    "name": "share_setopt", 
    "type": "skProc", 
    "code": "proc share_setopt*(para1: PSH; option: TSHoption): TSHcode {.cdecl, varargs, \u000A    dynlib: libname, importc: \"curl_share_setopt\".}"
  }, 
  {
    "name": "share_cleanup", 
    "type": "skProc", 
    "code": "proc share_cleanup*(para1: PSH): TSHcode {.cdecl, dynlib: libname, \u000A    importc: \"curl_share_cleanup\".}"
  }, 
  {
    "name": "version_info", 
    "type": "skProc", 
    "code": "proc version_info*(para1: Tversion): Pversion_info_data {.cdecl, \u000A    dynlib: libname, importc: \"curl_version_info\".}"
  }, 
  {
    "name": "easy_strerror", 
    "type": "skProc", 
    "code": "proc easy_strerror*(para1: Tcode): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_easy_strerror\".}"
  }, 
  {
    "name": "share_strerror", 
    "type": "skProc", 
    "code": "proc share_strerror*(para1: TSHcode): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_share_strerror\".}"
  }, 
  {
    "name": "easy_init", 
    "type": "skProc", 
    "code": "proc easy_init*(): PCurl {.cdecl, dynlib: libname, importc: \"curl_easy_init\".}"
  }, 
  {
    "name": "easy_setopt", 
    "type": "skProc", 
    "code": "proc easy_setopt*(curl: PCurl; option: Toption): Tcode {.cdecl, varargs, \u000A    dynlib: libname, importc: \"curl_easy_setopt\".}"
  }, 
  {
    "name": "easy_perform", 
    "type": "skProc", 
    "code": "proc easy_perform*(curl: PCurl): Tcode {.cdecl, dynlib: libname, \u000A    importc: \"curl_easy_perform\".}"
  }, 
  {
    "name": "easy_cleanup", 
    "type": "skProc", 
    "code": "proc easy_cleanup*(curl: PCurl) {.cdecl, dynlib: libname, \u000A                                  importc: \"curl_easy_cleanup\".}"
  }, 
  {
    "name": "easy_getinfo", 
    "type": "skProc", 
    "code": "proc easy_getinfo*(curl: PCurl; info: TINFO): Tcode {.cdecl, varargs, \u000A    dynlib: libname, importc: \"curl_easy_getinfo\".}"
  }, 
  {
    "name": "easy_duphandle", 
    "type": "skProc", 
    "code": "proc easy_duphandle*(curl: PCurl): PCurl {.cdecl, dynlib: libname, \u000A    importc: \"curl_easy_duphandle\".}"
  }, 
  {
    "name": "easy_reset", 
    "type": "skProc", 
    "code": "proc easy_reset*(curl: PCurl) {.cdecl, dynlib: libname, \u000A                                importc: \"curl_easy_reset\".}"
  }, 
  {
    "name": "multi_init", 
    "type": "skProc", 
    "code": "proc multi_init*(): PM {.cdecl, dynlib: libname, importc: \"curl_multi_init\".}"
  }, 
  {
    "name": "multi_add_handle", 
    "type": "skProc", 
    "code": "proc multi_add_handle*(multi_handle: PM; handle: PCurl): TMcode {.cdecl, \u000A    dynlib: libname, importc: \"curl_multi_add_handle\".}"
  }, 
  {
    "name": "multi_remove_handle", 
    "type": "skProc", 
    "code": "proc multi_remove_handle*(multi_handle: PM; handle: PCurl): TMcode {.cdecl, \u000A    dynlib: libname, importc: \"curl_multi_remove_handle\".}"
  }, 
  {
    "name": "multi_fdset", 
    "type": "skProc", 
    "code": "proc multi_fdset*(multi_handle: PM; read_fd_set: Pfd_set; write_fd_set: Pfd_set; \u000A                  exc_fd_set: Pfd_set; max_fd: var int32): TMcode {.cdecl, \u000A    dynlib: libname, importc: \"curl_multi_fdset\".}"
  }, 
  {
    "name": "multi_perform", 
    "type": "skProc", 
    "code": "proc multi_perform*(multi_handle: PM; running_handles: var int32): TMcode {.\u000A    cdecl, dynlib: libname, importc: \"curl_multi_perform\".}"
  }, 
  {
    "name": "multi_cleanup", 
    "type": "skProc", 
    "code": "proc multi_cleanup*(multi_handle: PM): TMcode {.cdecl, dynlib: libname, \u000A    importc: \"curl_multi_cleanup\".}"
  }, 
  {
    "name": "multi_info_read", 
    "type": "skProc", 
    "code": "proc multi_info_read*(multi_handle: PM; msgs_in_queue: var int32): PMsg {.cdecl, \u000A    dynlib: libname, importc: \"curl_multi_info_read\".}"
  }, 
  {
    "name": "multi_strerror", 
    "type": "skProc", 
    "code": "proc multi_strerror*(para1: TMcode): cstring {.cdecl, dynlib: libname, \u000A    importc: \"curl_multi_strerror\".}"
  }, 
  {
    "name": "multi_socket", 
    "type": "skProc", 
    "code": "proc multi_socket*(multi_handle: PM; s: Tsocket; running_handles: var int32): TMcode {.\u000A    cdecl, dynlib: libname, importc: \"curl_multi_socket\".}"
  }, 
  {
    "name": "multi_socket_all", 
    "type": "skProc", 
    "code": "proc multi_socket_all*(multi_handle: PM; running_handles: var int32): TMcode {.\u000A    cdecl, dynlib: libname, importc: \"curl_multi_socket_all\".}"
  }, 
  {
    "name": "multi_timeout", 
    "type": "skProc", 
    "code": "proc multi_timeout*(multi_handle: PM; milliseconds: var int32): TMcode {.cdecl, \u000A    dynlib: libname, importc: \"curl_multi_timeout\".}"
  }, 
  {
    "name": "multi_setopt", 
    "type": "skProc", 
    "code": "proc multi_setopt*(multi_handle: PM; option: TMoption): TMcode {.cdecl, varargs, \u000A    dynlib: libname, importc: \"curl_multi_setopt\".}"
  }, 
  {
    "name": "multi_assign", 
    "type": "skProc", 
    "code": "proc multi_assign*(multi_handle: PM; sockfd: Tsocket; sockp: pointer): TMcode {.\u000A    cdecl, dynlib: libname, importc: \"curl_multi_assign\".}"
  }
]