[
  {
    "comment": "The ``tables`` module implements variants of an efficient hash table that is\u000A## a mapping from keys to values. ``Table`` is the usual hash table,\u000A## ``OrderedTable`` is like ``Table`` but remembers insertion order\u000A## and ``CountTable`` is a mapping from a key to its number of occurances.\u000A## For consistency with every other data type in Nim these have **value**\u000A## semantics, this means that ``=`` performs a copy of the hash table.\u000A## For **reference** semantics use the ``Ref`` variant: ``TableRef``,\u000A## ``OrderedTableRef``, ``CountTableRef``.\u000A##\u000A## If you are using simple standard types like ``int`` or ``string`` for the\u000A## keys of the table you won't have any problems, but as soon as you try to use\u000A## a more complex object as a key you will be greeted by a strange compiler\u000A## error::\u000A##\u000A##   Error: type mismatch: got (Person)\u000A##   but expected one of:\u000A##   hashes.hash(x: openarray[A]): THash\u000A##   hashes.hash(x: int): THash\u000A##   hashes.hash(x: float): THash\u000A##   \u2026\u000A##\u000A## What is happening here is that the types used for table keys require to have\u000A## a ``hash()`` proc which will convert them to a `THash <hashes.html#THash>`_\u000A## value, and the compiler is listing all the hash functions it knows.\u000A## Additionally there has to be a ``==`` operator that provides the same\u000A## semantics as its corresponding ``hash`` proc.\u000A##\u000A## After you add ``hash`` and ``==`` for your custom type everything will work.\u000A## Currently however ``hash`` for objects is not defined, whereas\u000A## ``system.==`` for objects does exist and performs a \"deep\" comparison (every\u000A## field is compared) which is usually what you want. So in the following\u000A## example implementing only ``hash`` suffices:\u000A##\u000A## .. code-block::\u000A##   type\u000A##     Person = object\u000A##       firstName, lastName: string\u000A##\u000A##   proc hash(x: Person): THash =\u000A##     ## Piggyback on the already available string hash proc.\u000A##     ##\u000A##     ## Without this proc nothing works!\u000A##     result = x.firstName.hash !& x.lastName.hash\u000A##     result = !$result\u000A##\u000A##   var\u000A##     salaries = initTable[Person, int]()\u000A##     p1, p2: Person\u000A##\u000A##   p1.firstName = \"Jon\"\u000A##   p1.lastName = \"Ross\"\u000A##   salaries[p1] = 30_000\u000A##\u000A##   p2.firstName = \"\uC18C\uC9C4\"\u000A##   p2.lastName = \"\uBC15\"\u000A##   salaries[p2] = 45_000"
  }, 
  {
    "name": "TableRef", 
    "type": "skType", 
    "code": "TableRef*[A, B] = ref Table[A, B]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A, B](t: Table[A, B]): int"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>.", 
    "code": "iterator pairs*[A, B](t: Table[A, B]): tuple[key: A, val: B]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mpairs*[A, B](t: var Table[A, B]): tuple[key: A, val: var B]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite>.", 
    "code": "iterator keys*[A, B](t: Table[A, B]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>.", 
    "code": "iterator values*[A, B](t: Table[A, B]): B"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mvalues*[A, B](t: var Table[A, B]): var B"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, default empty value for the type <cite>B</cite> is returned and no exception is raised. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A, B](t: Table[A, B]; key: A): B"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A, B](t: var Table[A, B]; key: A): var B"
  }, 
  {
    "name": "allValues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite> that belongs to the given <cite>key</cite>.", 
    "code": "iterator allValues*[A, B](t: Table[A, B]; key: A): B"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A, B](t: Table[A, B]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>.", 
    "code": "proc `[]=`*[A, B](t: var Table[A, B]; key: A; val: B)"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "puts a new (key, value)-pair into <cite>t</cite> even if <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt> already exists.", 
    "code": "proc add*[A, B](t: var Table[A, B]; key: A; val: B)"
  }, 
  {
    "name": "del", 
    "type": "skProc", 
    "description": "deletes <cite>key</cite> from hash table <cite>t</cite>.", 
    "code": "proc del*[A, B](t: var Table[A, B]; key: A)"
  }, 
  {
    "name": "initTable", 
    "type": "skProc", 
    "description": "<p>creates a new hash table that is empty.</p>\u000A<p><cite>initialSize</cite> needs to be a power of two. If you need to accept runtime values for this you could use the <tt class=\"docutils literal\"><span class=\"pre\">nextPowerOfTwo</span></tt> proc from the <a class=\"reference external\" href=\"math.html\">math</a> module.</p>\u000A", 
    "code": "proc initTable*[A, B](initialSize = 64): Table[A, B]"
  }, 
  {
    "name": "toTable", 
    "type": "skProc", 
    "description": "creates a new hash table that contains the given <cite>pairs</cite>.", 
    "code": "proc toTable*[A, B](pairs: openArray[tuple[key: A, val: B]]): Table[A, B]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for hash tables.", 
    "code": "proc `$`*[A, B](t: Table[A, B]): string"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "code": "proc `==`*[A, B](s, t: Table[A, B]): bool"
  }, 
  {
    "name": "indexBy", 
    "type": "skProc", 
    "description": "Index the collection with the proc provided.", 
    "code": "proc indexBy*[A, B, C](collection: A; index: proc (x: B): C): Table[C, B]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A, B](t: TableRef[A, B]): int"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>.", 
    "code": "iterator pairs*[A, B](t: TableRef[A, B]): tuple[key: A, val: B]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mpairs*[A, B](t: TableRef[A, B]): tuple[key: A, val: var B]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite>.", 
    "code": "iterator keys*[A, B](t: TableRef[A, B]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>.", 
    "code": "iterator values*[A, B](t: TableRef[A, B]): B"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mvalues*[A, B](t: TableRef[A, B]): var B"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, default empty value for the type <cite>B</cite> is returned and no exception is raised. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A, B](t: TableRef[A, B]; key: A): B"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A, B](t: TableRef[A, B]; key: A): var B"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A, B](t: TableRef[A, B]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>.", 
    "code": "proc `[]=`*[A, B](t: TableRef[A, B]; key: A; val: B)"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "puts a new (key, value)-pair into <cite>t</cite> even if <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt> already exists.", 
    "code": "proc add*[A, B](t: TableRef[A, B]; key: A; val: B)"
  }, 
  {
    "name": "del", 
    "type": "skProc", 
    "description": "deletes <cite>key</cite> from hash table <cite>t</cite>.", 
    "code": "proc del*[A, B](t: TableRef[A, B]; key: A)"
  }, 
  {
    "name": "newTable", 
    "type": "skProc", 
    "code": "proc newTable*[A, B](initialSize = 64): TableRef[A, B]"
  }, 
  {
    "name": "newTable", 
    "type": "skProc", 
    "description": "creates a new hash table that contains the given <cite>pairs</cite>.", 
    "code": "proc newTable*[A, B](pairs: openArray[tuple[key: A, val: B]]): TableRef[A, B]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for hash tables.", 
    "code": "proc `$`*[A, B](t: TableRef[A, B]): string"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "code": "proc `==`*[A, B](s, t: TableRef[A, B]): bool"
  }, 
  {
    "name": "newTableFrom", 
    "type": "skProc", 
    "description": "Index the collection with the proc provided.", 
    "code": "proc newTableFrom*[A, B, C](collection: A; index: proc (x: B): C): TableRef[C, B]"
  }, 
  {
    "name": "OrderedTableRef", 
    "type": "skType", 
    "code": "OrderedTableRef*[A, B] = ref OrderedTable[A, B]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A, B](t: OrderedTable[A, B]): int {.inline.}"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite> in insertion order.", 
    "code": "iterator pairs*[A, B](t: OrderedTable[A, B]): tuple[key: A, val: B]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite> in insertion order. The values can be modified.", 
    "code": "iterator mpairs*[A, B](t: var OrderedTable[A, B]): tuple[key: A, val: var B]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite> in insertion order.", 
    "code": "iterator keys*[A, B](t: OrderedTable[A, B]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite> in insertion order.", 
    "code": "iterator values*[A, B](t: OrderedTable[A, B]): B"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite> in insertion order. The values can be modified.", 
    "code": "iterator mvalues*[A, B](t: var OrderedTable[A, B]): var B"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, default empty value for the type <cite>B</cite> is returned and no exception is raised. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A, B](t: OrderedTable[A, B]; key: A): B"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A, B](t: var OrderedTable[A, B]; key: A): var B"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A, B](t: OrderedTable[A, B]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>.", 
    "code": "proc `[]=`*[A, B](t: var OrderedTable[A, B]; key: A; val: B)"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "puts a new (key, value)-pair into <cite>t</cite> even if <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt> already exists.", 
    "code": "proc add*[A, B](t: var OrderedTable[A, B]; key: A; val: B)"
  }, 
  {
    "name": "initOrderedTable", 
    "type": "skProc", 
    "description": "<p>creates a new ordered hash table that is empty.</p>\u000A<p><cite>initialSize</cite> needs to be a power of two. If you need to accept runtime values for this you could use the <tt class=\"docutils literal\"><span class=\"pre\">nextPowerOfTwo</span></tt> proc from the <a class=\"reference external\" href=\"math.html\">math</a> module.</p>\u000A", 
    "code": "proc initOrderedTable*[A, B](initialSize = 64): OrderedTable[A, B]"
  }, 
  {
    "name": "toOrderedTable", 
    "type": "skProc", 
    "description": "creates a new ordered hash table that contains the given <cite>pairs</cite>.", 
    "code": "proc toOrderedTable*[A, B](pairs: openArray[tuple[key: A, val: B]]): OrderedTable[\u000A    A, B]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for ordered hash tables.", 
    "code": "proc `$`*[A, B](t: OrderedTable[A, B]): string"
  }, 
  {
    "name": "sort", 
    "type": "skProc", 
    "description": "sorts <cite>t</cite> according to <cite>cmp</cite>. This modifies the internal list that kept the insertion order, so insertion order is lost after this call but key lookup and insertions remain possible after <cite>sort</cite> (in contrast to the <cite>sort</cite> for count tables).", 
    "code": "proc sort*[A, B](t: var OrderedTable[A, B]; \u000A                 cmp: proc (x, y: tuple[key: A, val: B]): int)"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A, B](t: OrderedTableRef[A, B]): int {.inline.}"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite> in insertion order.", 
    "code": "iterator pairs*[A, B](t: OrderedTableRef[A, B]): tuple[key: A, val: B]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite> in insertion order. The values can be modified.", 
    "code": "iterator mpairs*[A, B](t: OrderedTableRef[A, B]): tuple[key: A, val: var B]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite> in insertion order.", 
    "code": "iterator keys*[A, B](t: OrderedTableRef[A, B]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite> in insertion order.", 
    "code": "iterator values*[A, B](t: OrderedTableRef[A, B]): B"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite> in insertion order. The values can be modified.", 
    "code": "iterator mvalues*[A, B](t: OrderedTableRef[A, B]): var B"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, default empty value for the type <cite>B</cite> is returned and no exception is raised. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A, B](t: OrderedTableRef[A, B]; key: A): B"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A, B](t: OrderedTableRef[A, B]; key: A): var B"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A, B](t: OrderedTableRef[A, B]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>.", 
    "code": "proc `[]=`*[A, B](t: OrderedTableRef[A, B]; key: A; val: B)"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "puts a new (key, value)-pair into <cite>t</cite> even if <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt> already exists.", 
    "code": "proc add*[A, B](t: OrderedTableRef[A, B]; key: A; val: B)"
  }, 
  {
    "name": "newOrderedTable", 
    "type": "skProc", 
    "description": "<p>creates a new ordered hash table that is empty.</p>\u000A<p><cite>initialSize</cite> needs to be a power of two. If you need to accept runtime values for this you could use the <tt class=\"docutils literal\"><span class=\"pre\">nextPowerOfTwo</span></tt> proc from the <a class=\"reference external\" href=\"math.html\">math</a> module.</p>\u000A", 
    "code": "proc newOrderedTable*[A, B](initialSize = 64): OrderedTableRef[A, B]"
  }, 
  {
    "name": "newOrderedTable", 
    "type": "skProc", 
    "description": "creates a new ordered hash table that contains the given <cite>pairs</cite>.", 
    "code": "proc newOrderedTable*[A, B](pairs: openArray[tuple[key: A, val: B]]): OrderedTableRef[\u000A    A, B]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for ordered hash tables.", 
    "code": "proc `$`*[A, B](t: OrderedTableRef[A, B]): string"
  }, 
  {
    "name": "sort", 
    "type": "skProc", 
    "description": "sorts <cite>t</cite> according to <cite>cmp</cite>. This modifies the internal list that kept the insertion order, so insertion order is lost after this call but key lookup and insertions remain possible after <cite>sort</cite> (in contrast to the <cite>sort</cite> for count tables).", 
    "code": "proc sort*[A, B](t: OrderedTableRef[A, B]; \u000A                 cmp: proc (x, y: tuple[key: A, val: B]): int)"
  }, 
  {
    "name": "CountTableRef", 
    "type": "skType", 
    "code": "CountTableRef*[A] = ref CountTable[A]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A](t: CountTable[A]): int"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>.", 
    "code": "iterator pairs*[A](t: CountTable[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mpairs*[A](t: var CountTable[A]): tuple[key: A, val: var int]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite>.", 
    "code": "iterator keys*[A](t: CountTable[A]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>.", 
    "code": "iterator values*[A](t: CountTable[A]): int"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mvalues*[A](t: CountTable[A]): var int"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, 0 is returned. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A](t: CountTable[A]; key: A): int"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A](t: var CountTable[A]; key: A): var int"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A](t: CountTable[A]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>. <cite>val</cite> has to be positive.", 
    "code": "proc `[]=`*[A](t: var CountTable[A]; key: A; val: int)"
  }, 
  {
    "name": "initCountTable", 
    "type": "skProc", 
    "description": "<p>creates a new count table that is empty.</p>\u000A<p><cite>initialSize</cite> needs to be a power of two. If you need to accept runtime values for this you could use the <tt class=\"docutils literal\"><span class=\"pre\">nextPowerOfTwo</span></tt> proc from the <a class=\"reference external\" href=\"math.html\">math</a> module.</p>\u000A", 
    "code": "proc initCountTable*[A](initialSize = 64): CountTable[A]"
  }, 
  {
    "name": "toCountTable", 
    "type": "skProc", 
    "description": "creates a new count table with every key in <cite>keys</cite> having a count of 1.", 
    "code": "proc toCountTable*[A](keys: openArray[A]): CountTable[A]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for count tables.", 
    "code": "proc `$`*[A](t: CountTable[A]): string"
  }, 
  {
    "name": "inc", 
    "type": "skProc", 
    "description": "increments <cite>t[key]</cite> by <cite>val</cite>.", 
    "code": "proc inc*[A](t: var CountTable[A]; key: A; val = 1)"
  }, 
  {
    "name": "smallest", 
    "type": "skProc", 
    "description": "returns the largest (key,val)-pair. Efficiency: O(n)", 
    "code": "proc smallest*[A](t: CountTable[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "largest", 
    "type": "skProc", 
    "description": "returns the (key,val)-pair with the largest <cite>val</cite>. Efficiency: O(n)", 
    "code": "proc largest*[A](t: CountTable[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "sort", 
    "type": "skProc", 
    "description": "sorts the count table so that the entry with the highest counter comes first. This is destructive! You must not modify <cite>t</cite> afterwards! You can use the iterators <cite>pairs</cite>,  <cite>keys</cite>, and <cite>values</cite> to iterate over <cite>t</cite> in the sorted order.", 
    "code": "proc sort*[A](t: var CountTable[A])"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>t</cite>.", 
    "code": "proc len*[A](t: CountTableRef[A]): int"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>.", 
    "code": "iterator pairs*[A](t: CountTableRef[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "mpairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mpairs*[A](t: CountTableRef[A]): tuple[key: A, val: var int]"
  }, 
  {
    "name": "keys", 
    "type": "skIterator", 
    "description": "iterates over any key in the table <cite>t</cite>.", 
    "code": "iterator keys*[A](t: CountTableRef[A]): A"
  }, 
  {
    "name": "values", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>.", 
    "code": "iterator values*[A](t: CountTableRef[A]): int"
  }, 
  {
    "name": "mvalues", 
    "type": "skIterator", 
    "description": "iterates over any value in the table <cite>t</cite>. The values can be modified.", 
    "code": "iterator mvalues*[A](t: CountTableRef[A]): var int"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. If <cite>key</cite> is not in <cite>t</cite>, 0 is returned. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[A](t: CountTableRef[A]; key: A): int"
  }, 
  {
    "name": "mget", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">t[key]</span></tt>. The value can be modified. If <cite>key</cite> is not in <cite>t</cite>, the <tt class=\"docutils literal\"><span class=\"pre\">EInvalidKey</span></tt> exception is raised.", 
    "code": "proc mget*[A](t: CountTableRef[A]; key: A): var int"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>t</cite>.", 
    "code": "proc hasKey*[A](t: CountTableRef[A]; key: A): bool"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>t</cite>. <cite>val</cite> has to be positive.", 
    "code": "proc `[]=`*[A](t: CountTableRef[A]; key: A; val: int)"
  }, 
  {
    "name": "newCountTable", 
    "type": "skProc", 
    "description": "<p>creates a new count table that is empty.</p>\u000A<p><cite>initialSize</cite> needs to be a power of two. If you need to accept runtime values for this you could use the <tt class=\"docutils literal\"><span class=\"pre\">nextPowerOfTwo</span></tt> proc from the <a class=\"reference external\" href=\"math.html\">math</a> module.</p>\u000A", 
    "code": "proc newCountTable*[A](initialSize = 64): CountTableRef[A]"
  }, 
  {
    "name": "newCountTable", 
    "type": "skProc", 
    "description": "creates a new count table with every key in <cite>keys</cite> having a count of 1.", 
    "code": "proc newCountTable*[A](keys: openArray[A]): CountTableRef[A]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for count tables.", 
    "code": "proc `$`*[A](t: CountTableRef[A]): string"
  }, 
  {
    "name": "inc", 
    "type": "skProc", 
    "description": "increments <cite>t[key]</cite> by <cite>val</cite>.", 
    "code": "proc inc*[A](t: CountTableRef[A]; key: A; val = 1)"
  }, 
  {
    "name": "smallest", 
    "type": "skProc", 
    "description": "returns the largest (key,val)-pair. Efficiency: O(n)", 
    "code": "proc smallest*[A](t: CountTableRef[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "largest", 
    "type": "skProc", 
    "description": "returns the (key,val)-pair with the largest <cite>val</cite>. Efficiency: O(n)", 
    "code": "proc largest*[A](t: CountTableRef[A]): tuple[key: A, val: int]"
  }, 
  {
    "name": "sort", 
    "type": "skProc", 
    "description": "sorts the count table so that the entry with the highest counter comes first. This is destructive! You must not modify <cite>t</cite> afterwards! You can use the iterators <cite>pairs</cite>,  <cite>keys</cite>, and <cite>values</cite> to iterate over <cite>t</cite> in the sorted order.", 
    "code": "proc sort*[A](t: CountTableRef[A])"
  }
]