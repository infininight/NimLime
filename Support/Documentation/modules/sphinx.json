[
  {
    "comment": "Nim wrapper for ``sphinx``."
  }, 
  {
    "name": "sphinxDll", 
    "type": "skConst", 
    "code": "sphinxDll* = \"spinx.dll\""
  }, 
  {
    "name": "SEARCHD_WARNING", 
    "type": "skConst", 
    "code": "SEARCHD_WARNING* = 3"
  }, 
  {
    "name": "SPH_MATCH_EXTENDED2", 
    "type": "skConst", 
    "code": "SPH_MATCH_EXTENDED2* = 6"
  }, 
  {
    "name": "SPH_RANK_DEFAULT", 
    "type": "skConst", 
    "code": "SPH_RANK_DEFAULT* = SPH_RANK_PROXIMITY_BM25"
  }, 
  {
    "name": "SPH_SORT_EXPR", 
    "type": "skConst", 
    "code": "SPH_SORT_EXPR* = 5"
  }, 
  {
    "name": "SPH_FILTER_FLOATRANGE", 
    "type": "skConst", 
    "code": "SPH_FILTER_FLOATRANGE* = 2"
  }, 
  {
    "name": "SPH_ATTR_MULTI", 
    "type": "skConst", 
    "code": "SPH_ATTR_MULTI* = 0x40000000"
  }, 
  {
    "name": "SPH_GROUPBY_ATTRPAIR", 
    "type": "skConst", 
    "code": "SPH_GROUPBY_ATTRPAIR* = 5"
  }, 
  {
    "name": "Tkeyword_info", 
    "type": "skType", 
    "code": "Tkeyword_info* {.pure, final.} = object \u000A  tokenized*: cstring\u000A  normalized*: cstring\u000A  num_docs*: cint\u000A  num_hits*: cint\u000A"
  }, 
  {
    "name": "create", 
    "type": "skProc", 
    "code": "proc create*(copy_args: TSphinxBool): PClient {.cdecl, importc: \"sphinx_create\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "cleanup", 
    "type": "skProc", 
    "code": "proc cleanup*(client: PClient) {.cdecl, importc: \"sphinx_cleanup\", \u000A                                 dynlib: sphinxDll.}"
  }, 
  {
    "name": "destroy", 
    "type": "skProc", 
    "code": "proc destroy*(client: PClient) {.cdecl, importc: \"sphinx_destroy\", \u000A                                 dynlib: sphinxDll.}"
  }, 
  {
    "name": "error", 
    "type": "skProc", 
    "code": "proc error*(client: PClient): cstring {.cdecl, importc: \"sphinx_error\", \u000A                                        dynlib: sphinxDll.}"
  }, 
  {
    "name": "warning", 
    "type": "skProc", 
    "code": "proc warning*(client: PClient): cstring {.cdecl, importc: \"sphinx_warning\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_server", 
    "type": "skProc", 
    "code": "proc set_server*(client: PClient; host: cstring; port: cint): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_server\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_connect_timeout", 
    "type": "skProc", 
    "code": "proc set_connect_timeout*(client: PClient; seconds: float32): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_connect_timeout\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "code": "proc open*(client: PClient): TSphinxBool {.cdecl, importc: \"sphinx_open\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "code": "proc close*(client: PClient): TSphinxBool {.cdecl, importc: \"sphinx_close\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_limits", 
    "type": "skProc", 
    "code": "proc set_limits*(client: PClient; offset: cint; limit: cint; max_matches: cint; \u000A                 cutoff: cint): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_limits\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_max_query_time", 
    "type": "skProc", 
    "code": "proc set_max_query_time*(client: PClient; max_query_time: cint): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_max_query_time\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_match_mode", 
    "type": "skProc", 
    "code": "proc set_match_mode*(client: PClient; mode: cint): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_match_mode\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_ranking_mode", 
    "type": "skProc", 
    "code": "proc set_ranking_mode*(client: PClient; ranker: cint): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_ranking_mode\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_sort_mode", 
    "type": "skProc", 
    "code": "proc set_sort_mode*(client: PClient; mode: cint; sortby: cstring): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_sort_mode\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_field_weights", 
    "type": "skProc", 
    "code": "proc set_field_weights*(client: PClient; num_weights: cint; \u000A                        field_names: cstringArray; field_weights: ptr cint): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_field_weights\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_index_weights", 
    "type": "skProc", 
    "code": "proc set_index_weights*(client: PClient; num_weights: cint; \u000A                        index_names: cstringArray; index_weights: ptr cint): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_index_weights\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_id_range", 
    "type": "skProc", 
    "code": "proc set_id_range*(client: PClient; minid: int64; maxid: int64): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_id_range\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "add_filter", 
    "type": "skProc", 
    "code": "proc add_filter*(client: PClient; attr: cstring; num_values: cint; \u000A                 values: ptr int64; exclude: TSphinxBool): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_add_filter\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "add_filter_range", 
    "type": "skProc", 
    "code": "proc add_filter_range*(client: PClient; attr: cstring; umin: int64; umax: int64; \u000A                       exclude: TSphinxBool): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_add_filter_range\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "add_filter_float_range", 
    "type": "skProc", 
    "code": "proc add_filter_float_range*(client: PClient; attr: cstring; fmin: float32; \u000A                             fmax: float32; exclude: TSphinxBool): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_add_filter_float_range\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_geoanchor", 
    "type": "skProc", 
    "code": "proc set_geoanchor*(client: PClient; attr_latitude: cstring; \u000A                    attr_longitude: cstring; latitude: float32; \u000A                    longitude: float32): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_geoanchor\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_groupby", 
    "type": "skProc", 
    "code": "proc set_groupby*(client: PClient; attr: cstring; groupby_func: cint; \u000A                  group_sort: cstring): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_groupby\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_groupby_distinct", 
    "type": "skProc", 
    "code": "proc set_groupby_distinct*(client: PClient; attr: cstring): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_groupby_distinct\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_retries", 
    "type": "skProc", 
    "code": "proc set_retries*(client: PClient; count: cint; delay: cint): TSphinxBool {.\u000A    cdecl, importc: \"sphinx_set_retries\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "add_override", 
    "type": "skProc", 
    "code": "proc add_override*(client: PClient; attr: cstring; docids: ptr int64; \u000A                   num_values: cint; values: ptr cint): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_add_override\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "set_select", 
    "type": "skProc", 
    "code": "proc set_select*(client: PClient; select_list: cstring): TSphinxBool {.cdecl, \u000A    importc: \"sphinx_set_select\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "reset_filters", 
    "type": "skProc", 
    "code": "proc reset_filters*(client: PClient) {.cdecl, importc: \"sphinx_reset_filters\", \u000A                                       dynlib: sphinxDll.}"
  }, 
  {
    "name": "reset_groupby", 
    "type": "skProc", 
    "code": "proc reset_groupby*(client: PClient) {.cdecl, importc: \"sphinx_reset_groupby\", \u000A                                       dynlib: sphinxDll.}"
  }, 
  {
    "name": "query", 
    "type": "skProc", 
    "code": "proc query*(client: PClient; query: cstring; index_list: cstring; \u000A            comment: cstring): ptr Tresult {.cdecl, importc: \"sphinx_query\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "add_query", 
    "type": "skProc", 
    "code": "proc add_query*(client: PClient; query: cstring; index_list: cstring; \u000A                comment: cstring): cint {.cdecl, importc: \"sphinx_add_query\", \u000A    dynlib: sphinxDll.}"
  }, 
  {
    "name": "run_queries", 
    "type": "skProc", 
    "code": "proc run_queries*(client: PClient): ptr Tresult {.cdecl, \u000A    importc: \"sphinx_run_queries\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_num_results", 
    "type": "skProc", 
    "code": "proc get_num_results*(client: PClient): cint {.cdecl, \u000A    importc: \"sphinx_get_num_results\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_id", 
    "type": "skProc", 
    "code": "proc get_id*(result: ptr Tresult; match: cint): int64 {.cdecl, \u000A    importc: \"sphinx_get_id\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_weight", 
    "type": "skProc", 
    "code": "proc get_weight*(result: ptr Tresult; match: cint): cint {.cdecl, \u000A    importc: \"sphinx_get_weight\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_int", 
    "type": "skProc", 
    "code": "proc get_int*(result: ptr Tresult; match: cint; attr: cint): int64 {.cdecl, \u000A    importc: \"sphinx_get_int\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_float", 
    "type": "skProc", 
    "code": "proc get_float*(result: ptr Tresult; match: cint; attr: cint): float32 {.cdecl, \u000A    importc: \"sphinx_get_float\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_mva", 
    "type": "skProc", 
    "code": "proc get_mva*(result: ptr Tresult; match: cint; attr: cint): ptr cint {.cdecl, \u000A    importc: \"sphinx_get_mva\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "get_string", 
    "type": "skProc", 
    "code": "proc get_string*(result: ptr Tresult; match: cint; attr: cint): cstring {.cdecl, \u000A    importc: \"sphinx_get_string\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "init_excerpt_options", 
    "type": "skProc", 
    "code": "proc init_excerpt_options*(opts: ptr Texcerpt_options) {.cdecl, \u000A    importc: \"sphinx_init_excerpt_options\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "build_excerpts", 
    "type": "skProc", 
    "code": "proc build_excerpts*(client: PClient; num_docs: cint; docs: cstringArray; \u000A                     index: cstring; words: cstring; opts: ptr Texcerpt_options): cstringArray {.\u000A    cdecl, importc: \"sphinx_build_excerpts\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "update_attributes", 
    "type": "skProc", 
    "code": "proc update_attributes*(client: PClient; index: cstring; num_attrs: cint; \u000A                        attrs: cstringArray; num_docs: cint; docids: ptr int64; \u000A                        values: ptr int64): cint {.cdecl, \u000A    importc: \"sphinx_update_attributes\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "update_attributes_mva", 
    "type": "skProc", 
    "code": "proc update_attributes_mva*(client: PClient; index: cstring; attr: cstring; \u000A                            docid: int64; num_values: cint; values: ptr cint): cint {.\u000A    cdecl, importc: \"sphinx_update_attributes_mva\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "build_keywords", 
    "type": "skProc", 
    "code": "proc build_keywords*(client: PClient; query: cstring; index: cstring; \u000A                     hits: TSphinxBool; out_num_keywords: ptr cint): ptr Tkeyword_info {.\u000A    cdecl, importc: \"sphinx_build_keywords\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "status", 
    "type": "skProc", 
    "code": "proc status*(client: PClient; num_rows: ptr cint; num_cols: ptr cint): cstringArray {.\u000A    cdecl, importc: \"sphinx_status\", dynlib: sphinxDll.}"
  }, 
  {
    "name": "status_destroy", 
    "type": "skProc", 
    "code": "proc status_destroy*(status: cstringArray; num_rows: cint; num_cols: cint) {.\u000A    cdecl, importc: \"sphinx_status_destroy\", dynlib: sphinxDll.}"
  }
]