[
  {
    "comment": "This module implements an advanced facility for executing OS processes\u000A## and process communication."
  }, 
  {
    "name": "ProcessOption", 
    "type": "skType", 
    "description": "options that can be passed <cite>startProcess</cite>", 
    "code": "ProcessOption* = enum \u000A  poEchoCmd,                  ## echo the command before execution\u000A  poUsePath, ## Asks system to search for executable using PATH environment\u000A             ## variable.\u000A             ## On Windows, this is the default.\u000A  poEvalCommand, ## Pass `command` directly to the shell, without quoting.\u000A                 ## Use it only if `command` comes from trused source.\u000A  poStdErrToStdOut,           ## merge stdout and stderr to the stdout stream\u000A  poParentStreams             ## use the parent's streams"
  }, 
  {
    "name": "poUseShell", 
    "type": "skConst", 
    "description": "Deprecated alias for poUsePath.", 
    "code": "poUseShell* {.deprecated.} = poUsePath"
  }, 
  {
    "name": "quoteShellWindows", 
    "type": "skProc", 
    "description": "Quote s, so it can be safely passed to Windows API. Based on Python's subprocess.list2cmdline See <a class=\"reference external\" href=\"http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\">http://msdn.microsoft.com/en-us/library/17w5ykft.aspx</a>", 
    "code": "proc quoteShellWindows*(s: string): string {.noSideEffect, rtl, extern: \"nosp$1\".}"
  }, 
  {
    "name": "quoteShellPosix", 
    "type": "skProc", 
    "description": "Quote s, so it can be safely passed to POSIX shell. Based on Python's pipes.quote", 
    "code": "proc quoteShellPosix*(s: string): string {.noSideEffect, rtl, extern: \"nosp$1\".}"
  }, 
  {
    "name": "quoteShell", 
    "type": "skProc", 
    "description": "Quote s, so it can be safely passed to shell.", 
    "code": "proc quoteShell*(s: string): string {.noSideEffect, rtl, extern: \"nosp$1\".}"
  }, 
  {
    "name": "execProcess", 
    "type": "skProc", 
    "description": "A convenience procedure that executes <tt class=\"docutils literal\"><span class=\"pre\">command</span></tt> with <tt class=\"docutils literal\"><span class=\"pre\">startProcess</span></tt> and returns its output as a string. WARNING: this function uses poEvalCommand by default for backward compatibility. Make sure to pass options explicitly.", 
    "code": "proc execProcess*(command: string; args: openArray[string] = []; \u000A                  env: StringTableRef = nil; options: set[ProcessOption] = {\u000A    poStdErrToStdOut, poUsePath, poEvalCommand}): TaintedString {.rtl, \u000A    extern: \"nosp$1\", tags: [ExecIOEffect, ReadIOEffect].}"
  }, 
  {
    "name": "execCmd", 
    "type": "skProc", 
    "description": "Executes <tt class=\"docutils literal\"><span class=\"pre\">command</span></tt> and returns its error code. Standard input, output, error streams are inherited from the calling process. This operation is also often called <span id=\"system_1\">system</span>.", 
    "code": "proc execCmd*(command: string): int {.rtl, extern: \"nosp$1\", \u000A                                      tags: [ExecIOEffect].}"
  }, 
  {
    "name": "startProcess", 
    "type": "skProc", 
    "description": "<p>Starts a process. <cite>Command</cite> is the executable file, <cite>workingDir</cite> is the process's working directory. If <tt class=\"docutils literal\"><span class=\"pre\">workingDir == &quot;&quot;</span></tt> the current directory is used. <cite>args</cite> are the command line arguments that are passed to the process. On many operating systems, the first command line argument is the name of the executable. <cite>args</cite> should not contain this argument! <cite>env</cite> is the environment that will be passed to the process. If <tt class=\"docutils literal\"><span class=\"pre\">env == nil</span></tt> the environment is inherited of the parent process. <cite>options</cite> are additional flags that may be passed to <cite>startProcess</cite>. See the documentation of <tt class=\"docutils literal\"><span class=\"pre\">TProcessOption</span></tt> for the meaning of these flags. You need to <cite>close</cite> the process when done.</p>\u000A<p>Note that you can't pass any <cite>args</cite> if you use the option <tt class=\"docutils literal\"><span class=\"pre\">poEvalCommand</span></tt>, which invokes the system shell to run the specified <cite>command</cite>. In this situation you have to concatenate manually the contents of <cite>args</cite> to <cite>command</cite> carefully escaping/quoting any special characters, since it will be passed <em>as is</em> to the system shell. Each system/shell may feature different escaping rules, so try to avoid this kind of shell invokation if possible as it leads to non portable software.</p>\u000A<p>Return value: The newly created process object. Nil is never returned, but <tt class=\"docutils literal\"><span class=\"pre\">EOS</span></tt> is raised in case of an error.</p>\u000A", 
    "code": "proc startProcess*(command: string; workingDir: string = \"\"; \u000A                   args: openArray[string] = []; env: StringTableRef = nil; \u000A                   options: set[ProcessOption] = {poStdErrToStdOut}): Process {.\u000A    rtl, extern: \"nosp$1\", tags: [ExecIOEffect, ReadEnvEffect].}"
  }, 
  {
    "name": "startCmd", 
    "type": "skProc", 
    "description": "Deprecated - use <cite>startProcess</cite> directly.", 
    "code": "proc startCmd*(command: string; \u000A               options: set[ProcessOption] = {poStdErrToStdOut, poUsePath}): Process {.\u000A    tags: [ExecIOEffect, ReadEnvEffect], deprecated.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "When the process has finished executing, cleanup related handles", 
    "code": "proc close*(p: Process) {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "suspend", 
    "type": "skProc", 
    "description": "Suspends the process <cite>p</cite>.", 
    "code": "proc suspend*(p: Process) {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "resume", 
    "type": "skProc", 
    "description": "Resumes the process <cite>p</cite>.", 
    "code": "proc resume*(p: Process) {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "terminate", 
    "type": "skProc", 
    "description": "Stop the process <cite>p</cite>. On Posix OSes the procedure sends <tt class=\"docutils literal\"><span class=\"pre\">SIGTERM</span></tt> to the process. On Windows the Win32 API function <tt class=\"docutils literal\"><span class=\"pre\">TerminateProcess()</span></tt> is called to stop the process.", 
    "code": "proc terminate*(p: Process) {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "kill", 
    "type": "skProc", 
    "description": "Kill the process <cite>p</cite>. On Posix OSes the procedure sends <tt class=\"docutils literal\"><span class=\"pre\">SIGKILL</span></tt> to the process. On Windows <tt class=\"docutils literal\"><span class=\"pre\">kill()</span></tt> is simply an alias for <tt class=\"docutils literal\"><span class=\"pre\">terminate()</span></tt>.", 
    "code": "proc kill*(p: Process) {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "running", 
    "type": "skProc", 
    "description": "Returns true iff the process <cite>p</cite> is still running. Returns immediately.", 
    "code": "proc running*(p: Process): bool {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "processID", 
    "type": "skProc", 
    "description": "returns <cite>p</cite>'s process ID.", 
    "code": "proc processID*(p: Process): int {.rtl, extern: \"nosp$1\".}"
  }, 
  {
    "name": "waitForExit", 
    "type": "skProc", 
    "description": "<p>waits for the process to finish and returns <cite>p</cite>'s error code.</p>\u000A<p><strong>Warning</strong>: Be careful when using waitForExit for processes created without poParentStreams because they may fill output buffers, causing deadlock.</p>\u000A", 
    "code": "proc waitForExit*(p: Process; timeout: int = - 1): int {.rtl, extern: \"nosp$1\", \u000A    tags: [].}"
  }, 
  {
    "name": "peekExitCode", 
    "type": "skProc", 
    "description": "return -1 if the process is still running. Otherwise the process' exit code", 
    "code": "proc peekExitCode*(p: Process): int {.tags: [].}"
  }, 
  {
    "name": "inputStream", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s input stream for writing to.</p>\u000A<p><strong>Warning</strong>: The returned <cite>PStream</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc inputStream*(p: Process): Stream {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "outputStream", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s output stream for reading from.</p>\u000A<p><strong>Warning</strong>: The returned <cite>PStream</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc outputStream*(p: Process): Stream {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "errorStream", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s error stream for reading from.</p>\u000A<p><strong>Warning</strong>: The returned <cite>PStream</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc errorStream*(p: Process): Stream {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "inputHandle", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s input file handle for writing to.</p>\u000A<p><strong>Warning</strong>: The returned <cite>TFileHandle</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc inputHandle*(p: Process): FileHandle {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "outputHandle", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s output file handle for reading from.</p>\u000A<p><strong>Warning</strong>: The returned <cite>TFileHandle</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc outputHandle*(p: Process): FileHandle {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "errorHandle", 
    "type": "skProc", 
    "description": "<p>returns <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>'s error file handle for reading from.</p>\u000A<p><strong>Warning</strong>: The returned <cite>TFileHandle</cite> should not be closed manually as it is closed when closing the PProcess <tt class=\"docutils literal\"><span class=\"pre\">p</span></tt>.</p>\u000A", 
    "code": "proc errorHandle*(p: Process): FileHandle {.rtl, extern: \"nosp$1\", tags: [].}"
  }, 
  {
    "name": "countProcessors", 
    "type": "skProc", 
    "description": "returns the numer of the processors/cores the machine has. Returns 0 if it cannot be detected.", 
    "code": "proc countProcessors*(): int {.rtl, extern: \"nosp$1\".}"
  }, 
  {
    "name": "execProcesses", 
    "type": "skProc", 
    "description": "executes the commands <cite>cmds</cite> in parallel. Creates <cite>n</cite> processes that execute in parallel. The highest return value of all processes is returned. Runs <cite>beforeRunEvent</cite> before running each command.", 
    "code": "proc execProcesses*(cmds: openArray[string]; \u000A                    options = {poStdErrToStdOut, poParentStreams}; \u000A                    n = countProcessors(); beforeRunEvent: proc (idx: int) = nil): int {.\u000A    rtl, extern: \"nosp$1\", \u000A    tags: [ExecIOEffect, TimeEffect, ReadEnvEffect, RootEffect].}"
  }, 
  {
    "name": "select", 
    "type": "skProc", 
    "description": "<p><cite>select</cite> with a sensible Nim interface. <cite>timeout</cite> is in miliseconds. Specify -1 for no timeout. Returns the number of processes that are ready to read from. The processes that are ready to be read from are removed from <cite>readfds</cite>.</p>\u000A<p><strong>Warning</strong>: This function may give unexpected or completely wrong results on Windows.</p>\u000A", 
    "code": "proc select*(readfds: var seq[Process]; timeout = 500): int"
  }, 
  {
    "name": "execCmdEx", 
    "type": "skProc", 
    "description": "a convenience proc that runs the <cite>command</cite>, grabs all its output and exit code and returns both.", 
    "code": "proc execCmdEx*(command: string; \u000A                options: set[ProcessOption] = {poStdErrToStdOut, poUsePath}): tuple[\u000A    output: TaintedString, exitCode: int] {.tags: [ExecIOEffect, ReadIOEffect], \u000A    gcsafe.}"
  }
]