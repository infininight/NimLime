[
  {
    "comment": "Implementation of singly and doubly linked lists. Because it makes no sense\u000A## to do so, the 'next' and 'prev' pointers are not hidden from you and can\u000A## be manipulated directly for efficiency."
  }, 
  {
    "name": "DoublyLinkedRing", 
    "type": "skType", 
    "description": "a doubly linked ring", 
    "code": "DoublyLinkedRing*[T] = object \u000A  head*: DoublyLinkedNode[T]\u000A"
  }, 
  {
    "name": "initSinglyLinkedList", 
    "type": "skProc", 
    "description": "creates a new singly linked list that is empty.", 
    "code": "proc initSinglyLinkedList*[T](): SinglyLinkedList[T]"
  }, 
  {
    "name": "initDoublyLinkedList", 
    "type": "skProc", 
    "description": "creates a new doubly linked list that is empty.", 
    "code": "proc initDoublyLinkedList*[T](): DoublyLinkedList[T]"
  }, 
  {
    "name": "initSinglyLinkedRing", 
    "type": "skProc", 
    "description": "creates a new singly linked ring that is empty.", 
    "code": "proc initSinglyLinkedRing*[T](): SinglyLinkedRing[T]"
  }, 
  {
    "name": "initDoublyLinkedRing", 
    "type": "skProc", 
    "description": "creates a new doubly linked ring that is empty.", 
    "code": "proc initDoublyLinkedRing*[T](): DoublyLinkedRing[T]"
  }, 
  {
    "name": "newDoublyLinkedNode", 
    "type": "skProc", 
    "description": "creates a new doubly linked node with the given <cite>value</cite>.", 
    "code": "proc newDoublyLinkedNode*[T](value: T): DoublyLinkedNode[T]"
  }, 
  {
    "name": "newSinglyLinkedNode", 
    "type": "skProc", 
    "description": "creates a new singly linked node with the given <cite>value</cite>.", 
    "code": "proc newSinglyLinkedNode*[T](value: T): SinglyLinkedNode[T]"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "yields every value of <cite>L</cite>.", 
    "code": "iterator items*[T](L: DoublyLinkedList[T]): T"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "yields every value of <cite>L</cite>.", 
    "code": "iterator items*[T](L: SinglyLinkedList[T]): T"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "yields every value of <cite>L</cite>.", 
    "code": "iterator items*[T](L: SinglyLinkedRing[T]): T"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "yields every value of <cite>L</cite>.", 
    "code": "iterator items*[T](L: DoublyLinkedRing[T]): T"
  }, 
  {
    "name": "nodes", 
    "type": "skIterator", 
    "description": "iterates over every node of <cite>x</cite>. Removing the current node from the list during traversal is supported.", 
    "code": "iterator nodes*[T](L: SinglyLinkedList[T]): SinglyLinkedNode[T]"
  }, 
  {
    "name": "nodes", 
    "type": "skIterator", 
    "description": "iterates over every node of <cite>x</cite>. Removing the current node from the list during traversal is supported.", 
    "code": "iterator nodes*[T](L: DoublyLinkedList[T]): DoublyLinkedNode[T]"
  }, 
  {
    "name": "nodes", 
    "type": "skIterator", 
    "description": "iterates over every node of <cite>x</cite>. Removing the current node from the list during traversal is supported.", 
    "code": "iterator nodes*[T](L: SinglyLinkedRing[T]): SinglyLinkedNode[T]"
  }, 
  {
    "name": "nodes", 
    "type": "skIterator", 
    "description": "iterates over every node of <cite>x</cite>. Removing the current node from the list during traversal is supported.", 
    "code": "iterator nodes*[T](L: DoublyLinkedRing[T]): DoublyLinkedNode[T]"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "turns a list into its string representation.", 
    "code": "proc `$`*[T](L: SinglyLinkedList[T]): string"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "turns a list into its string representation.", 
    "code": "proc `$`*[T](L: DoublyLinkedList[T]): string"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "turns a list into its string representation.", 
    "code": "proc `$`*[T](L: SinglyLinkedRing[T]): string"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "turns a list into its string representation.", 
    "code": "proc `$`*[T](L: DoublyLinkedRing[T]): string"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns nil if the value does not exist.", 
    "code": "proc find*[T](L: SinglyLinkedList[T]; value: T): SinglyLinkedNode[T]"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns nil if the value does not exist.", 
    "code": "proc find*[T](L: DoublyLinkedList[T]; value: T): DoublyLinkedNode[T]"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns nil if the value does not exist.", 
    "code": "proc find*[T](L: SinglyLinkedRing[T]; value: T): SinglyLinkedNode[T]"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns nil if the value does not exist.", 
    "code": "proc find*[T](L: DoublyLinkedRing[T]; value: T): DoublyLinkedNode[T]"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns false if the value does not exist, true otherwise.", 
    "code": "proc contains*[T](L: SinglyLinkedList[T]; value: T): bool {.inline.}"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns false if the value does not exist, true otherwise.", 
    "code": "proc contains*[T](L: DoublyLinkedList[T]; value: T): bool {.inline.}"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns false if the value does not exist, true otherwise.", 
    "code": "proc contains*[T](L: SinglyLinkedRing[T]; value: T): bool {.inline.}"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "searches in the list for a value. Returns false if the value does not exist, true otherwise.", 
    "code": "proc contains*[T](L: DoublyLinkedRing[T]; value: T): bool {.inline.}"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a node to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var SinglyLinkedList[T]; n: SinglyLinkedNode[T]) {.inline.}"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a node to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var SinglyLinkedList[T]; value: T) {.inline.}"
  }, 
  {
    "name": "append", 
    "type": "skProc", 
    "description": "appends a node <cite>n</cite> to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc append*[T](L: var DoublyLinkedList[T]; n: DoublyLinkedNode[T])"
  }, 
  {
    "name": "append", 
    "type": "skProc", 
    "description": "appends a value to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc append*[T](L: var DoublyLinkedList[T]; value: T)"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a node <cite>n</cite> to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var DoublyLinkedList[T]; n: DoublyLinkedNode[T])"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a value to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var DoublyLinkedList[T]; value: T)"
  }, 
  {
    "name": "remove", 
    "type": "skProc", 
    "description": "removes <cite>n</cite> from <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc remove*[T](L: var DoublyLinkedList[T]; n: DoublyLinkedNode[T])"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a node <cite>n</cite> to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var SinglyLinkedRing[T]; n: SinglyLinkedNode[T])"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a value to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var SinglyLinkedRing[T]; value: T)"
  }, 
  {
    "name": "append", 
    "type": "skProc", 
    "description": "appends a node <cite>n</cite> to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc append*[T](L: var DoublyLinkedRing[T]; n: DoublyLinkedNode[T])"
  }, 
  {
    "name": "append", 
    "type": "skProc", 
    "description": "appends a value to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc append*[T](L: var DoublyLinkedRing[T]; value: T)"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a node <cite>n</cite> to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var DoublyLinkedRing[T]; n: DoublyLinkedNode[T])"
  }, 
  {
    "name": "prepend", 
    "type": "skProc", 
    "description": "prepends a value to <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc prepend*[T](L: var DoublyLinkedRing[T]; value: T)"
  }, 
  {
    "name": "remove", 
    "type": "skProc", 
    "description": "removes <cite>n</cite> from <cite>L</cite>. Efficiency: O(1).", 
    "code": "proc remove*[T](L: var DoublyLinkedRing[T]; n: DoublyLinkedNode[T])"
  }
]