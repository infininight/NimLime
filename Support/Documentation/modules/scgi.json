[
  {
    "comment": "This module implements helper procs for SCGI applications. Example:\u000A## \u000A## .. code-block:: Nim\u000A##\u000A##    import strtabs, sockets, scgi\u000A##\u000A##    var counter = 0\u000A##    proc handleRequest(client: Socket, input: string, \u000A##                       headers: StringTableRef): bool {.procvar.} =\u000A##      inc(counter)\u000A##      client.writeStatusOkTextContent()\u000A##      client.send(\"Hello for the $#th time.\" % $counter & \"\\c\\L\")\u000A##      return false # do not stop processing\u000A##\u000A##    run(handleRequest)\u000A##\u000A## **Warning:** The API of this module is unstable, and therefore is subject\u000A## to change."
  }, 
  {
    "name": "ScgiError", 
    "type": "skType", 
    "description": "the exception that is raised, if a SCGI error occurs", 
    "code": "ScgiError* = object of IOError"
  }, 
  {
    "name": "raiseScgiError", 
    "type": "skProc", 
    "description": "raises an ScgiError exception with message <cite>msg</cite>.", 
    "code": "proc raiseScgiError*(msg: string) {.noreturn.}"
  }, 
  {
    "name": "AsyncScgiState", 
    "type": "skType", 
    "code": "AsyncScgiState* = ref AsyncScgiStateObj"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "description": "opens a connection.", 
    "code": "proc open*(s: var ScgiState; port = Port(4000); address = \"127.0.0.1\"; \u000A           reuseAddr = false)"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the connection.", 
    "code": "proc close*(s: var ScgiState)"
  }, 
  {
    "name": "next", 
    "type": "skProc", 
    "description": "proceed to the first/next request. Waits <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> miliseconds for a request, if <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> is <cite>-1</cite> then this function will never time out. Returns <cite>true</cite> if a new request has been processed.", 
    "code": "proc next*(s: var ScgiState; timeout: int = - 1): bool"
  }, 
  {
    "name": "writeStatusOkTextContent", 
    "type": "skProc", 
    "description": "<p>sends the following string to the socket <cite>c</cite>:<pre>\u000AStatus: 200 OK\\r\\LContent-Type: text/html\\r\\L\\r\\L</pre>\u000A</p>\u000A<p>You should send this before sending your HTML page, for example.</p>\u000A", 
    "code": "proc writeStatusOkTextContent*(c: Socket; contentType = \"text/html\")"
  }, 
  {
    "name": "run", 
    "type": "skProc", 
    "description": "encapsulates the SCGI object and main loop.", 
    "code": "proc run*(handleRequest: proc (client: Socket; input: string; \u000A                               headers: StringTableRef): bool {.nimcall, gcsafe.}; \u000A          port = Port(4000))"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "description": "<p>Creates an <tt class=\"docutils literal\"><span class=\"pre\">AsyncScgiState</span></tt> object which serves as a SCGI server.</p>\u000A<p>After the execution of <tt class=\"docutils literal\"><span class=\"pre\">handleRequest</span></tt> the client socket will be closed automatically unless it has already been closed.</p>\u000A", 
    "code": "proc open*(handleRequest: proc (client: AsyncSocket; input: string; \u000A                                headers: StringTableRef) {.closure, gcsafe.}; \u000A           port = Port(4000); address = \"127.0.0.1\"; reuseAddr = false): AsyncScgiState"
  }, 
  {
    "name": "register", 
    "type": "skProc", 
    "description": "Registers <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt> with dispatcher <tt class=\"docutils literal\"><span class=\"pre\">d</span></tt>.", 
    "code": "proc register*(d: Dispatcher; s: AsyncScgiState): Delegate {.discardable.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "Closes the <tt class=\"docutils literal\"><span class=\"pre\">AsyncScgiState</span></tt>.", 
    "code": "proc close*(s: AsyncScgiState)"
  }
]