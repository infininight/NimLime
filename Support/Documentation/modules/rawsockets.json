[
  {
    "comment": "This module implements a low-level cross-platform sockets interface. Look\u000A## at the ``net`` module for the higher-level version."
  }, 
  {
    "name": "Hostent", 
    "type": "skType", 
    "description": "information about a given host", 
    "code": "Hostent* = object \u000A  name*: string\u000A  aliases*: seq[string]\u000A  addrtype*: Domain\u000A  length*: int\u000A  addrList*: seq[string]\u000A"
  }, 
  {
    "name": "osInvalidSocket", 
    "type": "skLet", 
    "code": "osInvalidSocket* = winlean.INVALID_SOCKET"
  }, 
  {
    "name": "FIONBIO", 
    "type": "skConst", 
    "code": "FIONBIO* = IOC_IN.int32 or ((sizeof(int32) and IOCPARM_MASK) shl 16) or\u000A    (102 shl 8) or 126"
  }, 
  {
    "name": "ioctlsocket", 
    "type": "skProc", 
    "code": "proc ioctlsocket*(s: SocketHandle; cmd: clong; argptr: ptr clong): cint {.\u000A    stdcall, importc: \"ioctlsocket\", dynlib: \"ws2_32.dll\".}"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "description": "<tt class=\"docutils literal\"><span class=\"pre\">==</span></tt> for ports.", 
    "code": "proc `==`*(a, b: Port): bool {.borrow.}"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "returns the port number as a string", 
    "code": "proc `$`*(p: Port): string {.borrow.}"
  }, 
  {
    "name": "toInt", 
    "type": "skProc", 
    "description": "Converts the TDomain enum to a platform-dependent <tt class=\"docutils literal\"><span class=\"pre\">cint</span></tt>.", 
    "code": "proc toInt*(domain: Domain): cint"
  }, 
  {
    "name": "toInt", 
    "type": "skProc", 
    "description": "Converts the TType enum to a platform-dependent <tt class=\"docutils literal\"><span class=\"pre\">cint</span></tt>.", 
    "code": "proc toInt*(typ: SockType): cint"
  }, 
  {
    "name": "toInt", 
    "type": "skProc", 
    "description": "Converts the TProtocol enum to a platform-dependent <tt class=\"docutils literal\"><span class=\"pre\">cint</span></tt>.", 
    "code": "proc toInt*(p: Protocol): cint"
  }, 
  {
    "name": "newRawSocket", 
    "type": "skProc", 
    "description": "Creates a new socket; returns <cite>InvalidSocket</cite> if an error occurs.", 
    "code": "proc newRawSocket*(domain: Domain = AF_INET; typ: SockType = SOCK_STREAM; \u000A                   protocol: Protocol = IPPROTO_TCP): SocketHandle"
  }, 
  {
    "name": "newRawSocket", 
    "type": "skProc", 
    "description": "<p>Creates a new socket; returns <cite>InvalidSocket</cite> if an error occurs.</p>\u000A<p>Use this overload if one of the enums specified above does not contain what you need.</p>\u000A", 
    "code": "proc newRawSocket*(domain: cint; typ: cint; protocol: cint): SocketHandle"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes a socket.", 
    "code": "proc close*(socket: SocketHandle)"
  }, 
  {
    "name": "bindAddr", 
    "type": "skProc", 
    "code": "proc bindAddr*(socket: SocketHandle; name: ptr SockAddr; namelen: SockLen): cint"
  }, 
  {
    "name": "listen", 
    "type": "skProc", 
    "description": "Marks <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> as accepting connections. <tt class=\"docutils literal\"><span class=\"pre\">Backlog</span></tt> specifies the maximum length of the queue of pending connections.", 
    "code": "proc listen*(socket: SocketHandle; backlog = SOMAXCONN): cint {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getAddrInfo", 
    "type": "skProc", 
    "description": "<blockquote><p><strong>Warning</strong>: The resulting <tt class=\"docutils literal\"><span class=\"pre\">ptr TAddrInfo</span></tt> must be freed using <tt class=\"docutils literal\"><span class=\"pre\">dealloc</span></tt>!</p></blockquote>\u000A", 
    "code": "proc getAddrInfo*(address: string; port: Port; af: Domain = AF_INET; \u000A                  typ: SockType = SOCK_STREAM; prot: Protocol = IPPROTO_TCP): ptr AddrInfo"
  }, 
  {
    "name": "dealloc", 
    "type": "skProc", 
    "code": "proc dealloc*(ai: ptr AddrInfo)"
  }, 
  {
    "name": "ntohl", 
    "type": "skProc", 
    "description": "Converts 32-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.", 
    "code": "proc ntohl*(x: int32): int32"
  }, 
  {
    "name": "ntohs", 
    "type": "skProc", 
    "description": "Converts 16-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.", 
    "code": "proc ntohs*(x: int16): int16"
  }, 
  {
    "name": "htonl", 
    "type": "skProc", 
    "description": "Converts 32-bit integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.", 
    "code": "proc htonl*(x: int32): int32"
  }, 
  {
    "name": "htons", 
    "type": "skProc", 
    "description": "Converts 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.", 
    "code": "proc htons*(x: int16): int16"
  }, 
  {
    "name": "getServByName", 
    "type": "skProc", 
    "description": "<p>Searches the database from the beginning and finds the first entry for which the service name specified by <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt> matches the s_name member and the protocol name specified by <tt class=\"docutils literal\"><span class=\"pre\">proto</span></tt> matches the s_proto member.</p>\u000A<p>On posix this will search through the <tt class=\"docutils literal\"><span class=\"pre\">/etc/services</span></tt> file.</p>\u000A", 
    "code": "proc getServByName*(name, proto: string): Servent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getServByPort", 
    "type": "skProc", 
    "description": "<p>Searches the database from the beginning and finds the first entry for which the port specified by <tt class=\"docutils literal\"><span class=\"pre\">port</span></tt> matches the s_port member and the protocol name specified by <tt class=\"docutils literal\"><span class=\"pre\">proto</span></tt> matches the s_proto member.</p>\u000A<p>On posix this will search through the <tt class=\"docutils literal\"><span class=\"pre\">/etc/services</span></tt> file.</p>\u000A", 
    "code": "proc getServByPort*(port: Port; proto: string): Servent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getHostByAddr", 
    "type": "skProc", 
    "description": "This function will lookup the hostname of an IP Address.", 
    "code": "proc getHostByAddr*(ip: string): Hostent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getHostByName", 
    "type": "skProc", 
    "description": "This function will lookup the IP address of a hostname.", 
    "code": "proc getHostByName*(name: string): Hostent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getSockName", 
    "type": "skProc", 
    "description": "returns the socket's associated port number.", 
    "code": "proc getSockName*(socket: SocketHandle): Port"
  }, 
  {
    "name": "getSockOptInt", 
    "type": "skProc", 
    "description": "getsockopt for integer options.", 
    "code": "proc getSockOptInt*(socket: SocketHandle; level, optname: int): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "setSockOptInt", 
    "type": "skProc", 
    "description": "setsockopt for integer options.", 
    "code": "proc setSockOptInt*(socket: SocketHandle; level, optname, optval: int) {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "setBlocking", 
    "type": "skProc", 
    "description": "<p>Sets blocking mode on socket.</p>\u000A<p>Raises EOS on error.</p>\u000A", 
    "code": "proc setBlocking*(s: SocketHandle; blocking: bool)"
  }, 
  {
    "name": "select", 
    "type": "skProc", 
    "description": "<p>Traditional select function. This function will return the number of sockets that are ready to be read from, written to, or which have errors. If there are none; 0 is returned. <tt class=\"docutils literal\"><span class=\"pre\">Timeout</span></tt> is in miliseconds and -1 can be specified for no timeout.</p>\u000A<p>A socket is removed from the specific <tt class=\"docutils literal\"><span class=\"pre\">seq</span></tt> when it has data waiting to be read/written to or has errors (<tt class=\"docutils literal\"><span class=\"pre\">exceptfds</span></tt>).</p>\u000A", 
    "code": "proc select*(readfds: var seq[SocketHandle]; timeout = 500): int"
  }, 
  {
    "name": "selectWrite", 
    "type": "skProc", 
    "description": "<p>When a socket in <tt class=\"docutils literal\"><span class=\"pre\">writefds</span></tt> is ready to be written to then a non-zero value will be returned specifying the count of the sockets which can be written to. The sockets which can be written to will also be removed from <tt class=\"docutils literal\"><span class=\"pre\">writefds</span></tt>.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> is specified in miliseconds and <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt> can be specified for an unlimited time.</p>\u000A", 
    "code": "proc selectWrite*(writefds: var seq[SocketHandle]; timeout = 500): int {.\u000A    tags: [ReadIOEffect].}"
  }
]