[
  {
    "comment": "Constructive mathematics is naturally typed. -- Simon Thompson\u000A## \u000A## Basic math routines for Nim.\u000A## This module is available for the `JavaScript target\u000A## <backends.html#the-javascript-target>`_."
  }, 
  {
    "name": "MaxFloatPrecision", 
    "type": "skConst", 
    "description": "maximum number of meaningful digits after the decimal point for Nim's <tt class=\"docutils literal\"><span class=\"pre\">float</span></tt> type.", 
    "code": "MaxFloatPrecision* = MaxFloat64Precision"
  }, 
  {
    "name": "FloatClass", 
    "type": "skType", 
    "description": "describes the class a floating point value belongs to. This is the type that is returned by <cite>classify</cite>.", 
    "code": "FloatClass* = enum \u000A  fcNormal,                   ## value is an ordinary nonzero floating point value\u000A  fcSubnormal,                ## value is a subnormal (a very small) floating point value\u000A  fcZero,                     ## value is zero\u000A  fcNegZero,                  ## value is the negative zero\u000A  fcNan,                      ## value is Not-A-Number (NAN)\u000A  fcInf,                      ## value is positive infinity\u000A  fcNegInf                    ## value is negative infinity"
  }, 
  {
    "name": "classify", 
    "type": "skProc", 
    "description": "classifies a floating point value. Returns <cite>x</cite>'s class as specified by <cite>FloatClass</cite>.", 
    "code": "proc classify*(x: float): FloatClass"
  }, 
  {
    "name": "binom", 
    "type": "skProc", 
    "description": "computes the binomial coefficient", 
    "code": "proc binom*(n, k: int): int {.noSideEffect.}"
  }, 
  {
    "name": "fac", 
    "type": "skProc", 
    "description": "computes the faculty/factorial function.", 
    "code": "proc fac*(n: int): int {.noSideEffect.}"
  }, 
  {
    "name": "isPowerOfTwo", 
    "type": "skProc", 
    "description": "returns true, if <cite>x</cite> is a power of two, false otherwise. Zero and negative numbers are not a power of two.", 
    "code": "proc isPowerOfTwo*(x: int): bool {.noSideEffect.}"
  }, 
  {
    "name": "nextPowerOfTwo", 
    "type": "skProc", 
    "description": "returns <cite>x</cite> rounded up to the nearest power of two. Zero and negative numbers get rounded up to 1.", 
    "code": "proc nextPowerOfTwo*(x: int): int {.noSideEffect.}"
  }, 
  {
    "name": "countBits32", 
    "type": "skProc", 
    "description": "counts the set bits in <cite>n</cite>.", 
    "code": "proc countBits32*(n: int32): int {.noSideEffect.}"
  }, 
  {
    "name": "sum", 
    "type": "skProc", 
    "description": "computes the sum of the elements in <cite>x</cite>. If <cite>x</cite> is empty, 0 is returned.", 
    "code": "proc sum*[T](x: openArray[T]): T {.noSideEffect.}"
  }, 
  {
    "name": "mean", 
    "type": "skProc", 
    "description": "computes the mean of the elements in <cite>x</cite>. If <cite>x</cite> is empty, NaN is returned.", 
    "code": "proc mean*(x: openArray[float]): float {.noSideEffect.}"
  }, 
  {
    "name": "variance", 
    "type": "skProc", 
    "description": "computes the variance of the elements in <cite>x</cite>. If <cite>x</cite> is empty, NaN is returned.", 
    "code": "proc variance*(x: openArray[float]): float {.noSideEffect.}"
  }, 
  {
    "name": "random", 
    "type": "skProc", 
    "description": "returns a random number in the range 0..max-1. The sequence of random number is always the same, unless <cite>randomize</cite> is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount.", 
    "code": "proc random*(max: int): int {.gcsafe.}"
  }, 
  {
    "name": "random", 
    "type": "skProc", 
    "description": "returns a random number in the range 0..&lt;max. The sequence of random number is always the same, unless <cite>randomize</cite> is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. This has a 16-bit resolution on windows and a 48-bit resolution on other platforms.", 
    "code": "proc random*(max: float): float {.gcsafe.}"
  }, 
  {
    "name": "randomize", 
    "type": "skProc", 
    "description": "initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. Note: Does nothing for the JavaScript target, as JavaScript does not support this.", 
    "code": "proc randomize*() {.gcsafe.}"
  }, 
  {
    "name": "randomize", 
    "type": "skProc", 
    "description": "initializes the random number generator with a specific seed. Note: Does nothing for the JavaScript target, as JavaScript does not support this.", 
    "code": "proc randomize*(seed: int) {.gcsafe.}"
  }, 
  {
    "name": "sqrt", 
    "type": "skProc", 
    "description": "computes the square root of <cite>x</cite>.", 
    "code": "proc sqrt*(x: float): float {.importc: \"sqrt\", header: \"<math.h>\".}"
  }, 
  {
    "name": "ln", 
    "type": "skProc", 
    "description": "computes ln(x).", 
    "code": "proc ln*(x: float): float {.importc: \"log\", header: \"<math.h>\".}"
  }, 
  {
    "name": "log10", 
    "type": "skProc", 
    "code": "proc log10*(x: float): float {.importc: \"log10\", header: \"<math.h>\".}"
  }, 
  {
    "name": "log2", 
    "type": "skProc", 
    "code": "proc log2*(x: float): float"
  }, 
  {
    "name": "exp", 
    "type": "skProc", 
    "description": "computes e**x.", 
    "code": "proc exp*(x: float): float {.importc: \"exp\", header: \"<math.h>\".}"
  }, 
  {
    "name": "frexp", 
    "type": "skProc", 
    "description": "Split a number into mantissa and exponent. <cite>frexp</cite> calculates the mantissa m (a float greater than or equal to 0.5 and less than 1) and the integer value n such that <cite>x</cite> (the original float value) equals m * 2**n. frexp stores n in <cite>exponent</cite> and returns m.", 
    "code": "proc frexp*(x: float; exponent: var int): float {.importc: \"frexp\", \u000A    header: \"<math.h>\".}"
  }, 
  {
    "name": "round", 
    "type": "skProc", 
    "description": "converts a float to an int by rounding.  ", 
    "code": "proc round*(x: float): int {.importc: \"lrint\", header: \"<math.h>\".}"
  }, 
  {
    "name": "arccos", 
    "type": "skProc", 
    "code": "proc arccos*(x: float): float {.importc: \"acos\", header: \"<math.h>\".}"
  }, 
  {
    "name": "arcsin", 
    "type": "skProc", 
    "code": "proc arcsin*(x: float): float {.importc: \"asin\", header: \"<math.h>\".}"
  }, 
  {
    "name": "arctan", 
    "type": "skProc", 
    "code": "proc arctan*(x: float): float {.importc: \"atan\", header: \"<math.h>\".}"
  }, 
  {
    "name": "arctan2", 
    "type": "skProc", 
    "description": "Calculate the arc tangent of <cite>y</cite> / <cite>x</cite>. <cite>atan2</cite> returns the arc tangent of <cite>y</cite> / <cite>x</cite>; it produces correct results even when the resulting angle is near pi/2 or -pi/2 (<cite>x</cite> near 0).", 
    "code": "proc arctan2*(y, x: float): float {.importc: \"atan2\", header: \"<math.h>\".}"
  }, 
  {
    "name": "cos", 
    "type": "skProc", 
    "code": "proc cos*(x: float): float {.importc: \"cos\", header: \"<math.h>\".}"
  }, 
  {
    "name": "cosh", 
    "type": "skProc", 
    "code": "proc cosh*(x: float): float {.importc: \"cosh\", header: \"<math.h>\".}"
  }, 
  {
    "name": "hypot", 
    "type": "skProc", 
    "description": "same as <tt class=\"docutils literal\"><span class=\"pre\">sqrt(x*x + y*y)</span></tt>.", 
    "code": "proc hypot*(x, y: float): float {.importc: \"hypot\", header: \"<math.h>\".}"
  }, 
  {
    "name": "sinh", 
    "type": "skProc", 
    "code": "proc sinh*(x: float): float {.importc: \"sinh\", header: \"<math.h>\".}"
  }, 
  {
    "name": "sin", 
    "type": "skProc", 
    "code": "proc sin*(x: float): float {.importc: \"sin\", header: \"<math.h>\".}"
  }, 
  {
    "name": "tan", 
    "type": "skProc", 
    "code": "proc tan*(x: float): float {.importc: \"tan\", header: \"<math.h>\".}"
  }, 
  {
    "name": "tanh", 
    "type": "skProc", 
    "code": "proc tanh*(x: float): float {.importc: \"tanh\", header: \"<math.h>\".}"
  }, 
  {
    "name": "pow", 
    "type": "skProc", 
    "description": "computes x to power raised of y.", 
    "code": "proc pow*(x, y: float): float {.importc: \"pow\", header: \"<math.h>\".}"
  }, 
  {
    "name": "trunc", 
    "type": "skProc", 
    "code": "proc trunc*(x: float): float {.importc: \"trunc\", header: \"<math.h>\".}"
  }, 
  {
    "name": "floor", 
    "type": "skProc", 
    "code": "proc floor*(x: float): float {.importc: \"floor\", header: \"<math.h>\".}"
  }, 
  {
    "name": "ceil", 
    "type": "skProc", 
    "code": "proc ceil*(x: float): float {.importc: \"ceil\", header: \"<math.h>\".}"
  }, 
  {
    "name": "fmod", 
    "type": "skProc", 
    "code": "proc fmod*(x, y: float): float {.importc: \"fmod\", header: \"<math.h>\".}"
  }, 
  {
    "name": "`mod`", 
    "type": "skProc", 
    "code": "proc `mod`*(x, y: float): float"
  }, 
  {
    "name": "random", 
    "type": "skProc", 
    "description": "For a slice <cite>a .. b</cite> returns a value in the range <cite>a .. b-1</cite>.", 
    "code": "proc random*[T](x: Slice[T]): T"
  }, 
  {
    "name": "RunningStat", 
    "type": "skType", 
    "description": "an accumulator for statistical data", 
    "code": "RunningStat* = object \u000A  n*: int                     ## number of pushed data\u000A  sum*, min*, max*, mean*: float ## self-explaining\u000A  oldM, oldS, newS: float\u000A"
  }, 
  {
    "name": "push", 
    "type": "skProc", 
    "description": "pushes a value <cite>x</cite> for processing", 
    "code": "proc push*(s: var RunningStat; x: float)"
  }, 
  {
    "name": "push", 
    "type": "skProc", 
    "description": "pushes a value <cite>x</cite> for processing. <cite>x</cite> is simply converted to <tt class=\"docutils literal\"><span class=\"pre\">float</span></tt> and the other push operation is called.", 
    "code": "proc push*(s: var RunningStat; x: int)"
  }, 
  {
    "name": "variance", 
    "type": "skProc", 
    "description": "computes the current variance of <cite>s</cite>", 
    "code": "proc variance*(s: RunningStat): float"
  }, 
  {
    "name": "standardDeviation", 
    "type": "skProc", 
    "description": "computes the current standard deviation of <cite>s</cite>", 
    "code": "proc standardDeviation*(s: RunningStat): float"
  }
]