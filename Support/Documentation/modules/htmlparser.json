[
  {
    "comment": "This module parses an HTML document and creates its XML tree representation.\u000A## It is supposed to handle the *wild* HTML the real world uses.\u000A## \u000A## It can be used to parse a wild HTML document and output it as valid XHTML\u000A## document (well, if you are lucky):\u000A##\u000A## .. code-block:: Nim\u000A##\u000A##   echo loadHtml(\"mydirty.html\")\u000A##\u000A## Every tag in the resulting tree is in lower case.\u000A##\u000A## **Note:** The resulting ``PXmlNode`` already uses the ``clientData`` field, \u000A## so it cannot be used by clients of this library.\u000A##\u000A## Example: Transforming hyperlinks\u000A## ================================\u000A##\u000A## This code demonstrates how you can iterate over all the tags in an HTML file\u000A## and write back the modified version. In this case we look for hyperlinks\u000A## ending with the extension ``.rst`` and convert them to ``.html``.\u000A##\u000A## .. code-block:: Nim\u000A##\u000A##   import htmlparser\u000A##   import xmltree  # To use '$' for PXmlNode\u000A##   import strtabs  # To access PXmlAttributes\u000A##   import os       # To use splitFile\u000A##   import strutils # To use cmpIgnoreCase\u000A##\u000A##   proc transformHyperlinks() =\u000A##     let html = loadHTML(\"input.html\")\u000A##\u000A##     for a in html.findAll(\"a\"):\u000A##       let href = a.attrs[\"href\"]\u000A##       if not href.isNil:\u000A##         let (dir, filename, ext) = splitFile(href)\u000A##         if cmpIgnoreCase(ext, \".rst\") == 0:\u000A##           a.attrs[\"href\"] = dir / filename & \".html\"\u000A##\u000A##     writeFile(\"output.html\", $html)"
  }, 
  {
    "name": "THtmlTag", 
    "type": "skType", 
    "description": "list of all supported HTML tags; order will always be alphabetically", 
    "code": "THtmlTag* = enum \u000A  tagUnknown,                 ## unknown HTML element\u000A  tagA,                       ## the HTML ``a`` element\u000A  tagAbbr,                    ## the deprecated HTML ``abbr`` element\u000A  tagAcronym,                 ## the HTML ``acronym`` element\u000A  tagAddress,                 ## the HTML ``address`` element\u000A  tagApplet,                  ## the deprecated HTML ``applet`` element\u000A  tagArea,                    ## the HTML ``area`` element\u000A  tagArticle,                 ## the HTML ``article`` element\u000A  tagAside,                   ## the HTML ``aside`` element\u000A  tagAudio,                   ## the HTML ``audio`` element\u000A  tagB,                       ## the HTML ``b`` element\u000A  tagBase,                    ## the HTML ``base`` element\u000A  tagBdi,                     ## the HTML ``bdi`` element\u000A  tagBdo,                     ## the deprecated HTML ``dbo`` element\u000A  tagBasefont,                ## the deprecated HTML ``basefont`` element\u000A  tagBig,                     ## the HTML ``big`` element\u000A  tagBlockquote,              ## the HTML ``blockquote`` element\u000A  tagBody,                    ## the HTML ``body`` element\u000A  tagBr,                      ## the HTML ``br`` element\u000A  tagButton,                  ## the HTML ``button`` element\u000A  tagCanvas,                  ## the HTML ``canvas`` element\u000A  tagCaption,                 ## the HTML ``caption`` element\u000A  tagCenter,                  ## the deprecated HTML ``center`` element\u000A  tagCite,                    ## the HTML ``cite`` element\u000A  tagCode,                    ## the HTML ``code`` element\u000A  tagCol,                     ## the HTML ``col`` element\u000A  tagColgroup,                ## the HTML ``colgroup`` element\u000A  tagCommand,                 ## the HTML ``command`` element\u000A  tagDatalist,                ## the HTML ``datalist`` element\u000A  tagDd,                      ## the HTML ``dd`` element\u000A  tagDel,                     ## the HTML ``del`` element\u000A  tagDetails,                 ## the HTML ``details`` element\u000A  tagDfn,                     ## the HTML ``dfn`` element\u000A  tagDialog,                  ## the HTML ``dialog`` element\u000A  tagDiv,                     ## the HTML ``div`` element\u000A  tagDir,                     ## the deprecated HTLM ``dir`` element\u000A  tagDl,                      ## the HTML ``dl`` element\u000A  tagDt,                      ## the HTML ``dt`` element\u000A  tagEm,                      ## the HTML ``em`` element\u000A  tagEmbed,                   ## the HTML ``embed`` element\u000A  tagFieldset,                ## the HTML ``fieldset`` element\u000A  tagFigcaption,              ## the HTML ``figcaption`` element\u000A  tagFigure,                  ## the HTML ``figure`` element\u000A  tagFont,                    ## the deprecated HTML ``font`` element\u000A  tagFooter,                  ## the HTML ``footer`` element\u000A  tagForm,                    ## the HTML ``form`` element\u000A  tagFrame,                   ## the HTML ``frame`` element\u000A  tagFrameset,                ## the deprecated HTML ``frameset`` element\u000A  tagH1,                      ## the HTML ``h1`` element\u000A  tagH2,                      ## the HTML ``h2`` element\u000A  tagH3,                      ## the HTML ``h3`` element\u000A  tagH4,                      ## the HTML ``h4`` element\u000A  tagH5,                      ## the HTML ``h5`` element\u000A  tagH6,                      ## the HTML ``h6`` element\u000A  tagHead,                    ## the HTML ``head`` element\u000A  tagHeader,                  ## the HTML ``header`` element\u000A  tagHgroup,                  ## the HTML ``hgroup`` element\u000A  tagHtml,                    ## the HTML ``html`` element\u000A  tagHr,                      ## the HTML ``hr`` element\u000A  tagI,                       ## the HTML ``i`` element\u000A  tagIframe,                  ## the deprecated HTML ``iframe`` element\u000A  tagImg,                     ## the HTML ``img`` element\u000A  tagInput,                   ## the HTML ``input`` element\u000A  tagIns,                     ## the HTML ``ins`` element\u000A  tagIsindex,                 ## the deprecated HTML ``isindex`` element\u000A  tagKbd,                     ## the HTML ``kbd`` element\u000A  tagKeygen,                  ## the HTML ``keygen`` element\u000A  tagLabel,                   ## the HTML ``label`` element\u000A  tagLegend,                  ## the HTML ``legend`` element\u000A  tagLi,                      ## the HTML ``li`` element\u000A  tagLink,                    ## the HTML ``link`` element\u000A  tagMap,                     ## the HTML ``map`` element\u000A  tagMark,                    ## the HTML ``mark`` element\u000A  tagMenu,                    ## the deprecated HTML ``menu`` element\u000A  tagMeta,                    ## the HTML ``meta`` element\u000A  tagMeter,                   ## the HTML ``meter`` element\u000A  tagNav,                     ## the HTML ``nav`` element\u000A  tagNobr,                    ## the deprecated HTML ``nobr`` element\u000A  tagNoframes,                ## the deprecated HTML ``noframes`` element\u000A  tagNoscript,                ## the HTML ``noscript`` element\u000A  tagObject,                  ## the HTML ``object`` element\u000A  tagOl,                      ## the HTML ``ol`` element\u000A  tagOptgroup,                ## the HTML ``optgroup`` element\u000A  tagOption,                  ## the HTML ``option`` element\u000A  tagOutput,                  ## the HTML ``output`` element\u000A  tagP,                       ## the HTML ``p`` element\u000A  tagParam,                   ## the HTML ``param`` element\u000A  tagPre,                     ## the HTML ``pre`` element\u000A  tagProgress,                ## the HTML ``progress`` element\u000A  tagQ,                       ## the HTML ``q`` element\u000A  tagRp,                      ## the HTML ``rp`` element\u000A  tagRt,                      ## the HTML ``rt`` element\u000A  tagRuby,                    ## the HTML ``ruby`` element\u000A  tagS,                       ## the deprecated HTML ``s`` element\u000A  tagSamp,                    ## the HTML ``samp`` element\u000A  tagScript,                  ## the HTML ``script`` element\u000A  tagSection,                 ## the HTML ``section`` element\u000A  tagSelect,                  ## the HTML ``select`` element\u000A  tagSmall,                   ## the HTML ``small`` element\u000A  tagSource,                  ## the HTML ``source`` element\u000A  tagSpan,                    ## the HTML ``span`` element\u000A  tagStrike,                  ## the deprecated HTML ``strike`` element\u000A  tagStrong,                  ## the HTML ``strong`` element\u000A  tagStyle,                   ## the HTML ``style`` element\u000A  tagSub,                     ## the HTML ``sub`` element\u000A  tagSummary,                 ## the HTML ``summary`` element\u000A  tagSup,                     ## the HTML ``sup`` element\u000A  tagTable,                   ## the HTML ``table`` element\u000A  tagTbody,                   ## the HTML ``tbody`` element\u000A  tagTd,                      ## the HTML ``td`` element\u000A  tagTextarea,                ## the HTML ``textarea`` element\u000A  tagTfoot,                   ## the HTML ``tfoot`` element\u000A  tagTh,                      ## the HTML ``th`` element\u000A  tagThead,                   ## the HTML ``thead`` element\u000A  tagTime,                    ## the HTML ``time`` element\u000A  tagTitle,                   ## the HTML ``title`` element\u000A  tagTr,                      ## the HTML ``tr`` element\u000A  tagTrack,                   ## the HTML ``track`` element\u000A  tagTt,                      ## the HTML ``tt`` element\u000A  tagU,                       ## the deprecated HTML ``u`` element\u000A  tagUl,                      ## the HTML ``ul`` element\u000A  tagVar,                     ## the HTML ``var`` element\u000A  tagVideo,                   ## the HTML ``video`` element\u000A  tagWbr                      ## the HTML ``wbr`` element"
  }, 
  {
    "name": "htmlTag", 
    "type": "skProc", 
    "description": "gets <cite>n</cite>'s tag as a <tt class=\"docutils literal\"><span class=\"pre\">THtmlTag</span></tt>.", 
    "code": "proc htmlTag*(n: XmlNode): THtmlTag"
  }, 
  {
    "name": "htmlTag", 
    "type": "skProc", 
    "description": "converts <cite>s</cite> to a <tt class=\"docutils literal\"><span class=\"pre\">THtmlTag</span></tt>. If <cite>s</cite> is no HTML tag, <tt class=\"docutils literal\"><span class=\"pre\">tagUnknown</span></tt> is returned.", 
    "code": "proc htmlTag*(s: string): THtmlTag"
  }, 
  {
    "name": "entityToUtf8", 
    "type": "skProc", 
    "description": "converts an HTML entity name like <tt class=\"docutils literal\"><span class=\"pre\">&amp;Uuml;</span></tt> to its UTF-8 equivalent. &quot;&quot; is returned if the entity name is unknown. The HTML parser already converts entities to UTF-8.", 
    "code": "proc entityToUtf8*(entity: string): string"
  }, 
  {
    "name": "parseHtml", 
    "type": "skProc", 
    "description": "parses the XML from stream <cite>s</cite> and returns a <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt>. Every occured parsing error is added to the <cite>errors</cite> sequence.", 
    "code": "proc parseHtml*(s: Stream; filename: string; errors: var seq[string]): XmlNode"
  }, 
  {
    "name": "parseHtml", 
    "type": "skProc", 
    "description": "parses the XTML from stream <cite>s</cite> and returns a <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt>. All parsing errors are ignored.", 
    "code": "proc parseHtml*(s: Stream): XmlNode"
  }, 
  {
    "name": "loadHtml", 
    "type": "skProc", 
    "description": "Loads and parses HTML from file specified by <tt class=\"docutils literal\"><span class=\"pre\">path</span></tt>, and returns a <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt>.  Every occured parsing error is added to the <cite>errors</cite> sequence.", 
    "code": "proc loadHtml*(path: string; errors: var seq[string]): XmlNode"
  }, 
  {
    "name": "loadHtml", 
    "type": "skProc", 
    "description": "Loads and parses HTML from file specified by <tt class=\"docutils literal\"><span class=\"pre\">path</span></tt>, and returns a <tt class=\"docutils literal\"><span class=\"pre\">PXmlNode</span></tt>. All parsing errors are ignored.", 
    "code": "proc loadHtml*(path: string): XmlNode"
  }
]