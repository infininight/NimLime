[
  {
    "comment": "The ``gentabs`` module implements an efficient hash table that is a\u000A## key-value mapping. The keys are required to be strings, but the values\u000A## may be any Nim or user defined type. This module supports matching \u000A## of keys in case-sensitive, case-insensitive and style-insensitive modes."
  }, 
  {
    "name": "PGenTable", 
    "type": "skType", 
    "description": "use this type to declare hash tables", 
    "code": "PGenTable*[T] = ref TGenTable[T]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of keys in <cite>tbl</cite>.", 
    "code": "proc len*[T](tbl: PGenTable[T]): int {.inline.}"
  }, 
  {
    "name": "pairs", 
    "type": "skIterator", 
    "description": "iterates over any (key, value) pair in the table <cite>tbl</cite>.", 
    "code": "iterator pairs*[T](tbl: PGenTable[T]): tuple[key: string, value: T]"
  }, 
  {
    "name": "newGenTable", 
    "type": "skProc", 
    "description": "creates a new generic hash table that is empty.", 
    "code": "proc newGenTable*[T](mode: TGenTableMode): PGenTable[T]"
  }, 
  {
    "name": "hasKey", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in the table <cite>tbl</cite>.", 
    "code": "proc hasKey*[T](tbl: PGenTable[T]; key: string): bool"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value at <tt class=\"docutils literal\"><span class=\"pre\">tbl[key]</span></tt>. If <cite>key</cite> is not in <cite>tbl</cite>, default(T) is returned and no exception is raised. One can check with <tt class=\"docutils literal\"><span class=\"pre\">hasKey</span></tt> whether the key exists.", 
    "code": "proc `[]`*[T](tbl: PGenTable[T]; key: string): T"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "puts a (key, value)-pair into <cite>tbl</cite>.", 
    "code": "proc `[]=`*[T](tbl: PGenTable[T]; key: string; val: T)"
  }
]