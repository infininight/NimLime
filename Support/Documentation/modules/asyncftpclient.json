[
  {
    "comment": "This module implement an asynchronous FTP client.\u000A##\u000A## Examples\u000A## --------\u000A##\u000A## .. code-block::nim\u000A##\u000A##      var ftp = newAsyncFtpClient(\"example.com\", user = \"test\", pass = \"test\")\u000A##      proc main(ftp: AsyncFtpClient) {.async.} =\u000A##        await ftp.connect()\u000A##        echo await ftp.pwd()\u000A##        echo await ftp.listDirs()\u000A##        await ftp.store(\"payload.jpg\", \"payload.jpg\")\u000A##        await ftp.retrFile(\"payload.jpg\", \"payload2.jpg\")\u000A##        echo(\"Finished\")\u000A##\u000A##      waitFor main(ftp)"
  }, 
  {
    "name": "ProgressChangedProc", 
    "type": "skType", 
    "code": "ProgressChangedProc* = proc (total, progress: BiggestInt; speed: float): Future[\u000A    void] {.closure, gcsafe.}"
  }, 
  {
    "name": "send", 
    "type": "skProc", 
    "description": "Send a message to the server, and wait for a primary reply. <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt> is added for you.", 
    "code": "proc send*(ftp: AsyncFtpClient; m: string): Future[TaintedString] {.async.}"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "description": "Connect to the FTP server specified by <tt class=\"docutils literal\"><span class=\"pre\">ftp</span></tt>.", 
    "code": "proc connect*(ftp: AsyncFtpClient) {.async.}"
  }, 
  {
    "name": "pwd", 
    "type": "skProc", 
    "description": "Returns the current working directory.", 
    "code": "proc pwd*(ftp: AsyncFtpClient): Future[TaintedString] {.async.}"
  }, 
  {
    "name": "cd", 
    "type": "skProc", 
    "description": "Changes the current directory on the remote FTP server to <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt>.", 
    "code": "proc cd*(ftp: AsyncFtpClient; dir: string) {.async.}"
  }, 
  {
    "name": "cdup", 
    "type": "skProc", 
    "description": "Changes the current directory to the parent of the current directory.", 
    "code": "proc cdup*(ftp: AsyncFtpClient) {.async.}"
  }, 
  {
    "name": "listDirs", 
    "type": "skProc", 
    "description": "Returns a list of filenames in the given directory. If <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt> is &quot;&quot;, the current directory is used. If <tt class=\"docutils literal\"><span class=\"pre\">async</span></tt> is true, this function will return immediately and it will be your job to use asyncio's <tt class=\"docutils literal\"><span class=\"pre\">poll</span></tt> to progress this operation.", 
    "code": "proc listDirs*(ftp: AsyncFtpClient; dir = \"\"): Future[seq[string]] {.async.}"
  }, 
  {
    "name": "existsFile", 
    "type": "skProc", 
    "description": "Determines whether <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt> exists.", 
    "code": "proc existsFile*(ftp: AsyncFtpClient; file: string): Future[bool] {.async.}"
  }, 
  {
    "name": "createDir", 
    "type": "skProc", 
    "description": "Creates a directory <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt>. If <tt class=\"docutils literal\"><span class=\"pre\">recursive</span></tt> is true, the topmost subdirectory of <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt> will be created first, following the secondmost... etc. this allows you to give a full path as the <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt> without worrying about subdirectories not existing.", 
    "code": "proc createDir*(ftp: AsyncFtpClient; dir: string; recursive = false) {.async.}"
  }, 
  {
    "name": "chmod", 
    "type": "skProc", 
    "description": "Changes permission of <tt class=\"docutils literal\"><span class=\"pre\">path</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">permissions</span></tt>.", 
    "code": "proc chmod*(ftp: AsyncFtpClient; path: string; permissions: set[TFilePermission]) {.\u000A    async.}"
  }, 
  {
    "name": "list", 
    "type": "skProc", 
    "description": "Lists all files in <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt>. If <tt class=\"docutils literal\"><span class=\"pre\">dir</span></tt> is <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt>, uses the current working directory.", 
    "code": "proc list*(ftp: AsyncFtpClient; dir = \"\"): Future[string] {.async.}"
  }, 
  {
    "name": "retrText", 
    "type": "skProc", 
    "description": "Retrieves <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt>. File must be ASCII text.", 
    "code": "proc retrText*(ftp: AsyncFtpClient; file: string): Future[string] {.async.}"
  }, 
  {
    "name": "defaultOnProgressChanged", 
    "type": "skProc", 
    "description": "Default FTP <tt class=\"docutils literal\"><span class=\"pre\">onProgressChanged</span></tt> handler. Does nothing.", 
    "code": "proc defaultOnProgressChanged*(total, progress: BiggestInt; speed: float): Future[\u000A    void] {.nimcall, gcsafe.}"
  }, 
  {
    "name": "retrFile", 
    "type": "skProc", 
    "description": "Downloads <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt> and saves it to <tt class=\"docutils literal\"><span class=\"pre\">dest</span></tt>. The <tt class=\"docutils literal\"><span class=\"pre\">EvRetr</span></tt> event is passed to the specified <tt class=\"docutils literal\"><span class=\"pre\">handleEvent</span></tt> function when the download is finished. The event's <tt class=\"docutils literal\"><span class=\"pre\">filename</span></tt> field will be equal to <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt>.", 
    "code": "proc retrFile*(ftp: AsyncFtpClient; file, dest: string; \u000A               onProgressChanged = defaultOnProgressChanged) {.async.}"
  }, 
  {
    "name": "store", 
    "type": "skProc", 
    "description": "Uploads <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">dest</span></tt> on the remote FTP server. Usage of this function asynchronously is recommended to view the progress of the download. The <tt class=\"docutils literal\"><span class=\"pre\">EvStore</span></tt> event is passed to the specified <tt class=\"docutils literal\"><span class=\"pre\">handleEvent</span></tt> function when the upload is finished, and the <tt class=\"docutils literal\"><span class=\"pre\">filename</span></tt> field will be equal to <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt>.", 
    "code": "proc store*(ftp: AsyncFtpClient; file, dest: string; \u000A            onProgressChanged = defaultOnProgressChanged) {.async.}"
  }, 
  {
    "name": "newAsyncFtpClient", 
    "type": "skProc", 
    "description": "Creates a new <tt class=\"docutils literal\"><span class=\"pre\">AsyncFtpClient</span></tt> object.", 
    "code": "proc newAsyncFtpClient*(address: string; port = Port(21); user, pass = \"\"): AsyncFtpClient"
  }
]