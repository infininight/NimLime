[
  {
    "comment": "This module implements a simple high performance `CSV`:idx:\u000A## (`comma separated value`:idx:) parser. \u000A##\u000A## Example: How to use the parser\u000A## ==============================\u000A##\u000A## .. code-block:: nim\u000A##   import os, parsecsv, streams\u000A##   var s = newFileStream(paramStr(1), fmRead)\u000A##   if s == nil: quit(\"cannot open the file\" & paramStr(1))\u000A##   var x: CsvParser\u000A##   open(x, s, paramStr(1))\u000A##   while readRow(x):\u000A##     echo \"new row: \"\u000A##     for val in items(x.row):\u000A##       echo \"##\", val, \"##\"\u000A##   close(x)\u000A##"
  }, 
  {
    "name": "CsvError", 
    "type": "skType", 
    "description": "exception that is raised if a parsing error occurs", 
    "code": "CsvError* = object of IOError"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "description": "initializes the parser with an input stream. <cite>Filename</cite> is only used for nice error messages. The parser's behaviour can be controlled by the diverse optional parameters:<ul class=\"simple\"><li><cite>separator</cite>: character used to separate fields</li>\u000A<li><cite>quote</cite>: Used to quote fields containing special characters like <cite>separator</cite>, <cite>quote</cite> or new-line characters. '0' disables the parsing of quotes.</li>\u000A<li><cite>escape</cite>: removes any special meaning from the following character; '0' disables escaping; if escaping is disabled and <cite>quote</cite> is not '0', two <cite>quote</cite> characters are parsed one literal <cite>quote</cite> character.</li>\u000A<li><cite>skipInitialSpace</cite>: If true, whitespace immediately following the <cite>separator</cite> is ignored.</li>\u000A</ul>\u000A", 
    "code": "proc open*(my: var CsvParser; input: Stream; filename: string; separator = ','; \u000A           quote = '\\\"'; escape = '\\0'; skipInitialSpace = false)"
  }, 
  {
    "name": "processedRows", 
    "type": "skProc", 
    "description": "returns number of the processed rows", 
    "code": "proc processedRows*(my: var CsvParser): int"
  }, 
  {
    "name": "readRow", 
    "type": "skProc", 
    "description": "reads the next row; if <cite>columns</cite> &gt; 0, it expects the row to have exactly this many columns. Returns false if the end of the file has been encountered else true.", 
    "code": "proc readRow*(my: var CsvParser; columns = 0): bool"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the parser <cite>my</cite> and its associated input stream.", 
    "code": "proc close*(my: var CsvParser) {.inline.}"
  }
]