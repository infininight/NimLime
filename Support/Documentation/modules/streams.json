[
  {
    "comment": "This module provides a stream interface and two implementations thereof:\u000A## the `FileStream` and the `StringStream` which implement the stream\u000A## interface for Nim file objects (`File`) and strings. Other modules\u000A## may provide other implementations for this standard stream interface."
  }, 
  {
    "name": "StreamObj", 
    "type": "skType", 
    "description": "Stream interface that supports writing or reading. Note that these fields here shouldn't be used directly. They are accessible so that a stream implementation can override them.", 
    "code": "StreamObj* = object of RootObj\u000A  closeImpl*: proc (s: Stream) {.nimcall, tags: [], gcsafe.}\u000A  atEndImpl*: proc (s: Stream): bool {.nimcall, tags: [], gcsafe.}\u000A  setPositionImpl*: proc (s: Stream; pos: int) {.nimcall, tags: [], gcsafe.}\u000A  getPositionImpl*: proc (s: Stream): int {.nimcall, tags: [], gcsafe.}\u000A  readDataImpl*: proc (s: Stream; buffer: pointer; bufLen: int): int {.nimcall, \u000A      tags: [ReadIOEffect], gcsafe.}\u000A  writeDataImpl*: proc (s: Stream; buffer: pointer; bufLen: int) {.nimcall, \u000A      tags: [WriteIOEffect], gcsafe.}\u000A  flushImpl*: proc (s: Stream) {.nimcall, tags: [WriteIOEffect], gcsafe.}\u000A"
  }, 
  {
    "name": "flush", 
    "type": "skProc", 
    "description": "flushes the buffers that the stream <cite>s</cite> might use.", 
    "code": "proc flush*(s: Stream)"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the stream <cite>s</cite>.", 
    "code": "proc close*(s: Stream)"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the stream <cite>s</cite>.", 
    "code": "proc close*(s, unused: Stream) {.deprecated.}"
  }, 
  {
    "name": "atEnd", 
    "type": "skProc", 
    "description": "checks if more data can be read from <cite>f</cite>. Returns true if all data has been read.", 
    "code": "proc atEnd*(s: Stream): bool"
  }, 
  {
    "name": "atEnd", 
    "type": "skProc", 
    "description": "checks if more data can be read from <cite>f</cite>. Returns true if all data has been read.", 
    "code": "proc atEnd*(s, unused: Stream): bool {.deprecated.}"
  }, 
  {
    "name": "setPosition", 
    "type": "skProc", 
    "description": "sets the position <cite>pos</cite> of the stream <cite>s</cite>.", 
    "code": "proc setPosition*(s: Stream; pos: int)"
  }, 
  {
    "name": "setPosition", 
    "type": "skProc", 
    "description": "sets the position <cite>pos</cite> of the stream <cite>s</cite>.", 
    "code": "proc setPosition*(s, unused: Stream; pos: int) {.deprecated.}"
  }, 
  {
    "name": "getPosition", 
    "type": "skProc", 
    "description": "retrieves the current position in the stream <cite>s</cite>.", 
    "code": "proc getPosition*(s: Stream): int"
  }, 
  {
    "name": "getPosition", 
    "type": "skProc", 
    "description": "retrieves the current position in the stream <cite>s</cite>.", 
    "code": "proc getPosition*(s, unused: Stream): int {.deprecated.}"
  }, 
  {
    "name": "readData", 
    "type": "skProc", 
    "description": "low level proc that reads data into an untyped <cite>buffer</cite> of <cite>bufLen</cite> size.", 
    "code": "proc readData*(s: Stream; buffer: pointer; bufLen: int): int"
  }, 
  {
    "name": "readData", 
    "type": "skProc", 
    "description": "low level proc that reads data into an untyped <cite>buffer</cite> of <cite>bufLen</cite> size.", 
    "code": "proc readData*(s, unused: Stream; buffer: pointer; bufLen: int): int {.\u000A    deprecated.}"
  }, 
  {
    "name": "writeData", 
    "type": "skProc", 
    "description": "low level proc that writes an untyped <cite>buffer</cite> of <cite>bufLen</cite> size to the stream <cite>s</cite>.", 
    "code": "proc writeData*(s: Stream; buffer: pointer; bufLen: int)"
  }, 
  {
    "name": "writeData", 
    "type": "skProc", 
    "description": "low level proc that writes an untyped <cite>buffer</cite> of <cite>bufLen</cite> size to the stream <cite>s</cite>.", 
    "code": "proc writeData*(s, unused: Stream; buffer: pointer; bufLen: int) {.deprecated.}"
  }, 
  {
    "name": "write", 
    "type": "skProc", 
    "description": "generic write procedure. Writes <cite>x</cite> to the stream <cite>s</cite>. Implementation:<pre><span class=\"Identifier\">s</span><span class=\"Operator\">.</span><span class=\"Identifier\">writeData</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">s</span><span class=\"Punctuation\">,</span> <span class=\"Keyword\">addr</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">sizeof</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "proc write*[T](s: Stream; x: T)"
  }, 
  {
    "name": "write", 
    "type": "skProc", 
    "description": "writes the string <cite>x</cite> to the the stream <cite>s</cite>. No length field or terminating zero is written.", 
    "code": "proc write*(s: Stream; x: string)"
  }, 
  {
    "name": "writeln", 
    "type": "skProc", 
    "description": "writes one or more strings to the the stream <cite>s</cite> followed by a new line. No length field or terminating zero is written.", 
    "code": "proc writeln*(s: Stream; args: varargs[string, `$`])"
  }, 
  {
    "name": "readChar", 
    "type": "skProc", 
    "description": "reads a char from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured. Returns '0' as an EOF marker.", 
    "code": "proc readChar*(s: Stream): char"
  }, 
  {
    "name": "readBool", 
    "type": "skProc", 
    "description": "reads a bool from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readBool*(s: Stream): bool"
  }, 
  {
    "name": "readInt8", 
    "type": "skProc", 
    "description": "reads an int8 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readInt8*(s: Stream): int8"
  }, 
  {
    "name": "readInt16", 
    "type": "skProc", 
    "description": "reads an int16 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readInt16*(s: Stream): int16"
  }, 
  {
    "name": "readInt32", 
    "type": "skProc", 
    "description": "reads an int32 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readInt32*(s: Stream): int32"
  }, 
  {
    "name": "readInt64", 
    "type": "skProc", 
    "description": "reads an int64 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readInt64*(s: Stream): int64"
  }, 
  {
    "name": "readFloat32", 
    "type": "skProc", 
    "description": "reads a float32 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readFloat32*(s: Stream): float32"
  }, 
  {
    "name": "readFloat64", 
    "type": "skProc", 
    "description": "reads a float64 from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readFloat64*(s: Stream): float64"
  }, 
  {
    "name": "readStr", 
    "type": "skProc", 
    "description": "reads a string of length <cite>length</cite> from the stream <cite>s</cite>. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readStr*(s: Stream; length: int): TaintedString"
  }, 
  {
    "name": "readLine", 
    "type": "skProc", 
    "description": "reads a line of text from the stream <cite>s</cite> into <cite>line</cite>. <cite>line</cite> must not be <tt class=\"docutils literal\"><span class=\"pre\">nil</span></tt>! May throw an IO exception. A line of text may be delimited by <tt class=\"docutils literal\"><span class=\"pre\">CR</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">LF</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">CRLF</span></tt>. The newline character(s) are not part of the returned string. Returns <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt> if the end of the file has been reached, <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> otherwise. If <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt> is returned <cite>line</cite> contains no new data.", 
    "code": "proc readLine*(s: Stream; line: var TaintedString): bool"
  }, 
  {
    "name": "readLine", 
    "type": "skProc", 
    "description": "Reads a line from a stream <cite>s</cite>. Note: This is not very efficient. Raises <cite>EIO</cite> if an error occured.", 
    "code": "proc readLine*(s: Stream): TaintedString"
  }, 
  {
    "name": "StringStreamObj", 
    "type": "skType", 
    "code": "StringStreamObj* = object of StreamObj\u000A  data*: string\u000A  pos: int\u000A"
  }, 
  {
    "name": "newStringStream", 
    "type": "skProc", 
    "description": "creates a new stream from the string <cite>s</cite>.", 
    "code": "proc newStringStream*(s: string = \"\"): StringStream"
  }, 
  {
    "name": "FileStreamObj", 
    "type": "skType", 
    "code": "FileStreamObj* = object of Stream\u000A  f: File\u000A"
  }, 
  {
    "name": "newFileStream", 
    "type": "skProc", 
    "description": "creates a new stream from the file <cite>f</cite>.", 
    "code": "proc newFileStream*(f: File): FileStream"
  }, 
  {
    "name": "newFileStream", 
    "type": "skProc", 
    "description": "creates a new stream from the file named <cite>filename</cite> with the mode <cite>mode</cite>. If the file cannot be opened, nil is returned. See the <a class=\"reference external\" href=\"system.html\">system</a> module for a list of available TFileMode enums.", 
    "code": "proc newFileStream*(filename: string; mode: FileMode): FileStream"
  }
]