[
  {
    "comment": "This module implements URI parsing as specified by RFC 3986."
  }, 
  {
    "name": "Uri", 
    "type": "skType", 
    "code": "Uri* = object \u000A  scheme*, username*, password*: string\u000A  hostname*, port*, path*, query*, anchor*: string\u000A"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "<strong>Deprecated since 0.9.6</strong>: Use <tt class=\"docutils literal\"><span class=\"pre\">TUri</span></tt> instead.", 
    "code": "proc `$`*(url: TUrl): string {.deprecated.}"
  }, 
  {
    "name": "`/`", 
    "type": "skProc", 
    "description": "<p>Joins two URLs together, separating them with / if needed.</p>\u000A<p><strong>Deprecated since 0.9.6</strong>: Use <tt class=\"docutils literal\"><span class=\"pre\">TUri</span></tt> instead.</p>\u000A", 
    "code": "proc `/`*(a, b: TUrl): TUrl {.deprecated.}"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "<p>Appends url to url.</p>\u000A<p><strong>Deprecated since 0.9.6</strong>: Use <tt class=\"docutils literal\"><span class=\"pre\">TUri</span></tt> instead.</p>\u000A", 
    "code": "proc add*(url: var TUrl; a: TUrl) {.deprecated.}"
  }, 
  {
    "name": "parseUri", 
    "type": "skProc", 
    "description": "Parses a URI.", 
    "code": "proc parseUri*(uri: string): TUri"
  }, 
  {
    "name": "combine", 
    "type": "skProc", 
    "description": "<p>Combines a base URI with a reference URI.</p>\u000A<p>This uses the algorithm specified in <a class=\"reference external\" href=\"http://tools.ietf.org/html/rfc3986#section-5.2.2\">section 5.2.2 of RFC 3986</a>.</p>\u000A<p>This means that the slashes inside the base URI's path as well as reference URI's path affect the resulting URI.</p>\u000A<p>For building URIs you may wish to use `/` instead.</p>\u000A<p>Examples:</p>\u000A<pre><span class=\"Keyword\">let</span> <span class=\"Identifier\">foo</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">combine</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;/baz&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/baz&quot;</span>\u000A\u000A<span class=\"Keyword\">let</span> <span class=\"Identifier\">bar</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">combine</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;baz&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/foo/baz&quot;</span>\u000A\u000A<span class=\"Keyword\">let</span> <span class=\"Identifier\">bar</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">combine</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar/&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;baz&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/foo/bar/baz&quot;</span></pre>", 
    "code": "proc combine*(base: TUri; reference: TUri): TUri"
  }, 
  {
    "name": "combine", 
    "type": "skProc", 
    "description": "Combines multiple URIs together.", 
    "code": "proc combine*(uris: varargs[TUri]): TUri"
  }, 
  {
    "name": "`/`", 
    "type": "skProc", 
    "description": "<p>Concatenates the path specified to the specified URI's path.</p>\u000A<p>Contrary to the <tt class=\"docutils literal\"><span class=\"pre\">combine</span></tt> procedure you do not have to worry about the slashes at the beginning and end of the path and URI's path respectively.</p>\u000A<p>Examples:</p>\u000A<pre><span class=\"Keyword\">let</span> <span class=\"Identifier\">foo</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar&quot;</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">/</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;/baz&quot;</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/foo/bar/baz&quot;</span>\u000A\u000A<span class=\"Keyword\">let</span> <span class=\"Identifier\">bar</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar&quot;</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">/</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;baz&quot;</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/foo/bar/baz&quot;</span>\u000A\u000A<span class=\"Keyword\">let</span> <span class=\"Identifier\">bar</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;http://example.com/foo/bar/&quot;</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">/</span> <span class=\"Identifier\">parseUri</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;baz&quot;</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">foo</span><span class=\"Operator\">.</span><span class=\"Identifier\">path</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;/foo/bar/baz&quot;</span></pre>", 
    "code": "proc `/`*(x: TUri; path: string): TUri"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "Returns the string representation of the specified URI object.", 
    "code": "proc `$`*(u: TUri): string"
  }
]