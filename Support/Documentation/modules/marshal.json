[
  {
    "comment": "This module contains procs for `serialization`:idx: and `deseralization`:idx:\u000A## of arbitrary Nim data structures. The serialization format uses `JSON`:idx:.\u000A##\u000A## **Restriction**: For objects their type is **not** serialized. This means\u000A## essentially that it does not work if the object has some other runtime\u000A## type than its compiletime type:\u000A##\u000A## .. code-block:: nim\u000A## \u000A##   type \u000A##     TA = object\u000A##     TB = object of TA\u000A##       f: int\u000A##\u000A##   var\u000A##     a: ref TA\u000A##     b: ref TB\u000A##\u000A##   new(b)\u000A##   a = b\u000A##   echo($$a[]) # produces \"{}\", not \"{f: 0}\""
  }, 
  {
    "name": "load", 
    "type": "skProc", 
    "description": "loads <cite>data</cite> from the stream <cite>s</cite>. Raises <cite>EIO</cite> in case of an error.", 
    "code": "proc load*[T](s: Stream; data: var T)"
  }, 
  {
    "name": "store", 
    "type": "skProc", 
    "description": "stores <cite>data</cite> into the stream <cite>s</cite>. Raises <cite>EIO</cite> in case of an error.", 
    "code": "proc store*[T](s: Stream; data: T)"
  }, 
  {
    "name": "`$$`", 
    "type": "skProc", 
    "description": "returns a string representation of <cite>x</cite>.", 
    "code": "proc `$$`*[T](x: T): string"
  }, 
  {
    "name": "to", 
    "type": "skProc", 
    "description": "reads data and transforms it to a <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt>.", 
    "code": "proc to*[T](data: string): T"
  }
]