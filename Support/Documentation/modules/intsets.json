[
  {
    "comment": "The ``intsets`` module implements an efficient int set implemented as a\u000A## sparse bit set.\u000A## **Note**: Since Nim currently does not allow the assignment operator to\u000A## be overloaded, ``=`` for int sets performs some rather meaningless shallow\u000A## copy; use ``assign`` to get a deep copy."
  }, 
  {
    "name": "IntSet", 
    "type": "skType", 
    "description": "an efficient set of 'int' implemented as a sparse bit set", 
    "code": "IntSet* = object \u000A  counter, max: int\u000A  head: PTrunk\u000A  data: TTrunkSeq\u000A"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "returns true iff <cite>key</cite> is in <cite>s</cite>.  ", 
    "code": "proc contains*(s: IntSet; key: int): bool"
  }, 
  {
    "name": "incl", 
    "type": "skProc", 
    "description": "includes an element <cite>key</cite> in <cite>s</cite>.", 
    "code": "proc incl*(s: var IntSet; key: int)"
  }, 
  {
    "name": "excl", 
    "type": "skProc", 
    "description": "excludes <cite>key</cite> from the set <cite>s</cite>.", 
    "code": "proc excl*(s: var IntSet; key: int)"
  }, 
  {
    "name": "containsOrIncl", 
    "type": "skProc", 
    "description": "returns true if <cite>s</cite> contains <cite>key</cite>, otherwise <cite>key</cite> is included in <cite>s</cite> and false is returned.", 
    "code": "proc containsOrIncl*(s: var IntSet; key: int): bool"
  }, 
  {
    "name": "initIntSet", 
    "type": "skProc", 
    "description": "creates a new int set that is empty.", 
    "code": "proc initIntSet*(): IntSet"
  }, 
  {
    "name": "assign", 
    "type": "skProc", 
    "description": "copies <cite>src</cite> to <cite>dest</cite>. <cite>dest</cite> does not need to be initialized by <cite>initIntSet</cite>. ", 
    "code": "proc assign*(dest: var IntSet; src: IntSet)"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "iterates over any included element of <cite>s</cite>.", 
    "code": "iterator items*(s: IntSet): int {.inline.}"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "The <cite>$</cite> operator for int sets.", 
    "code": "proc `$`*(s: IntSet): string"
  }, 
  {
    "name": "empty", 
    "type": "skProc", 
    "description": "returns true if <cite>s</cite> is empty. This is safe to call even before the set has been initialized with <cite>initIntSet</cite>.", 
    "code": "proc empty*(s: IntSet): bool {.inline.}"
  }
]