[
  {
    "name": "constIUP_VERSION_DATE", 
    "type": "skConst", 
    "code": "constIUP_VERSION_DATE* = \"2009/07/18\""
  }, 
  {
    "name": "Icallback", 
    "type": "skType", 
    "code": "Icallback* = proc (arg: PIhandle): cint {.cdecl.}"
  }, 
  {
    "name": "fileDlg", 
    "type": "skProc", 
    "code": "proc fileDlg*(): PIhandle {.importc: \"IupFileDlg\", dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "messageDlg", 
    "type": "skProc", 
    "code": "proc messageDlg*(): PIhandle {.importc: \"IupMessageDlg\", dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "colorDlg", 
    "type": "skProc", 
    "code": "proc colorDlg*(): PIhandle {.importc: \"IupColorDlg\", dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "fontDlg", 
    "type": "skProc", 
    "code": "proc fontDlg*(): PIhandle {.importc: \"IupFontDlg\", dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "getFile", 
    "type": "skProc", 
    "code": "proc getFile*(arq: cstring): cint {.importc: \"IupGetFile\", dynlib: dllname, \u000A                                    cdecl.}"
  }, 
  {
    "name": "message", 
    "type": "skProc", 
    "code": "proc message*(title, msg: cstring) {.importc: \"IupMessage\", dynlib: dllname, \u000A                                     cdecl.}"
  }, 
  {
    "name": "messagef", 
    "type": "skProc", 
    "code": "proc messagef*(title, format: cstring) {.importc: \"IupMessagef\", \u000A    dynlib: dllname, cdecl, varargs.}"
  }, 
  {
    "name": "alarm", 
    "type": "skProc", 
    "code": "proc alarm*(title, msg, b1, b2, b3: cstring): cint {.importc: \"IupAlarm\", \u000A    dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "scanf", 
    "type": "skProc", 
    "code": "proc scanf*(format: cstring): cint {.importc: \"IupScanf\", dynlib: dllname, \u000A                                     cdecl, varargs.}"
  }, 
  {
    "name": "listDialog", 
    "type": "skProc", 
    "code": "proc listDialog*(theType: cint; title: cstring; size: cint; list: cstringArray; \u000A                 op, maxCol, maxLin: cint; marks: ptr cint): cint {.\u000A    importc: \"IupListDialog\", dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "getText", 
    "type": "skProc", 
    "code": "proc getText*(title, text: cstring): cint {.importc: \"IupGetText\", \u000A    dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "getColor", 
    "type": "skProc", 
    "code": "proc getColor*(x, y: cint; r, g, b: var byte): cint {.importc: \"IupGetColor\", \u000A    dynlib: dllname, cdecl.}"
  }, 
  {
    "name": "Iparamcb", 
    "type": "skType", 
    "code": "Iparamcb* = proc (dialog: PIhandle; paramIndex: cint; userData: pointer): cint {.\u000A    cdecl.}"
  }, 
  {
    "name": "getParam", 
    "type": "skProc", 
    "code": "proc getParam*(title: cstring; action: Iparamcb; userData: pointer; \u000A               format: cstring): cint {.importc: \"IupGetParam\", cdecl, varargs, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "getParamv", 
    "type": "skProc", 
    "code": "proc getParamv*(title: cstring; action: Iparamcb; userData: pointer; \u000A                format: cstring; paramCount, paramExtra: cint; \u000A                paramData: pointer): cint {.importc: \"IupGetParamv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "code": "proc open*(argc: ptr cint; argv: ptr cstringArray): cint {.importc: \"IupOpen\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "code": "proc close*() {.importc: \"IupClose\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "imageLibOpen", 
    "type": "skProc", 
    "code": "proc imageLibOpen*() {.importc: \"IupImageLibOpen\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "mainLoop", 
    "type": "skProc", 
    "code": "proc mainLoop*(): cint {.importc: \"IupMainLoop\", cdecl, dynlib: dllname, \u000A                         discardable.}"
  }, 
  {
    "name": "loopStep", 
    "type": "skProc", 
    "code": "proc loopStep*(): cint {.importc: \"IupLoopStep\", cdecl, dynlib: dllname, \u000A                         discardable.}"
  }, 
  {
    "name": "mainLoopLevel", 
    "type": "skProc", 
    "code": "proc mainLoopLevel*(): cint {.importc: \"IupMainLoopLevel\", cdecl, \u000A                              dynlib: dllname, discardable.}"
  }, 
  {
    "name": "flush", 
    "type": "skProc", 
    "code": "proc flush*() {.importc: \"IupFlush\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "exitLoop", 
    "type": "skProc", 
    "code": "proc exitLoop*() {.importc: \"IupExitLoop\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "update", 
    "type": "skProc", 
    "code": "proc update*(ih: PIhandle) {.importc: \"IupUpdate\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "updateChildren", 
    "type": "skProc", 
    "code": "proc updateChildren*(ih: PIhandle) {.importc: \"IupUpdateChildren\", cdecl, \u000A                                     dynlib: dllname.}"
  }, 
  {
    "name": "redraw", 
    "type": "skProc", 
    "code": "proc redraw*(ih: PIhandle; children: cint) {.importc: \"IupRedraw\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "refresh", 
    "type": "skProc", 
    "code": "proc refresh*(ih: PIhandle) {.importc: \"IupRefresh\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "mapFont", 
    "type": "skProc", 
    "code": "proc mapFont*(iupfont: cstring): cstring {.importc: \"IupMapFont\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "unMapFont", 
    "type": "skProc", 
    "code": "proc unMapFont*(driverfont: cstring): cstring {.importc: \"IupUnMapFont\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "help", 
    "type": "skProc", 
    "code": "proc help*(url: cstring): cint {.importc: \"IupHelp\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "load", 
    "type": "skProc", 
    "code": "proc load*(filename: cstring): cstring {.importc: \"IupLoad\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "iupVersion", 
    "type": "skProc", 
    "code": "proc iupVersion*(): cstring {.importc: \"IupVersion\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "iupVersionDate", 
    "type": "skProc", 
    "code": "proc iupVersionDate*(): cstring {.importc: \"IupVersionDate\", cdecl, \u000A                                  dynlib: dllname.}"
  }, 
  {
    "name": "iupVersionNumber", 
    "type": "skProc", 
    "code": "proc iupVersionNumber*(): cint {.importc: \"IupVersionNumber\", cdecl, \u000A                                 dynlib: dllname.}"
  }, 
  {
    "name": "setLanguage", 
    "type": "skProc", 
    "code": "proc setLanguage*(lng: cstring) {.importc: \"IupSetLanguage\", cdecl, \u000A                                  dynlib: dllname.}"
  }, 
  {
    "name": "getLanguage", 
    "type": "skProc", 
    "code": "proc getLanguage*(): cstring {.importc: \"IupGetLanguage\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "destroy", 
    "type": "skProc", 
    "code": "proc destroy*(ih: PIhandle) {.importc: \"IupDestroy\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "detach", 
    "type": "skProc", 
    "code": "proc detach*(child: PIhandle) {.importc: \"IupDetach\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "append", 
    "type": "skProc", 
    "code": "proc append*(ih, child: PIhandle): PIhandle {.importc: \"IupAppend\", cdecl, \u000A    dynlib: dllname, discardable.}"
  }, 
  {
    "name": "insert", 
    "type": "skProc", 
    "code": "proc insert*(ih, refChild, child: PIhandle): PIhandle {.importc: \"IupInsert\", \u000A    cdecl, dynlib: dllname, discardable.}"
  }, 
  {
    "name": "getChild", 
    "type": "skProc", 
    "code": "proc getChild*(ih: PIhandle; pos: cint): PIhandle {.importc: \"IupGetChild\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getChildPos", 
    "type": "skProc", 
    "code": "proc getChildPos*(ih, child: PIhandle): cint {.importc: \"IupGetChildPos\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getChildCount", 
    "type": "skProc", 
    "code": "proc getChildCount*(ih: PIhandle): cint {.importc: \"IupGetChildCount\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getNextChild", 
    "type": "skProc", 
    "code": "proc getNextChild*(ih, child: PIhandle): PIhandle {.importc: \"IupGetNextChild\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getBrother", 
    "type": "skProc", 
    "code": "proc getBrother*(ih: PIhandle): PIhandle {.importc: \"IupGetBrother\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getParent", 
    "type": "skProc", 
    "code": "proc getParent*(ih: PIhandle): PIhandle {.importc: \"IupGetParent\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getDialog", 
    "type": "skProc", 
    "code": "proc getDialog*(ih: PIhandle): PIhandle {.importc: \"IupGetDialog\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getDialogChild", 
    "type": "skProc", 
    "code": "proc getDialogChild*(ih: PIhandle; name: cstring): PIhandle {.\u000A    importc: \"IupGetDialogChild\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "reparent", 
    "type": "skProc", 
    "code": "proc reparent*(ih, newParent: PIhandle): cint {.importc: \"IupReparent\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "popup", 
    "type": "skProc", 
    "code": "proc popup*(ih: PIhandle; x, y: cint): cint {.importc: \"IupPopup\", cdecl, \u000A    dynlib: dllname, discardable.}"
  }, 
  {
    "name": "show", 
    "type": "skProc", 
    "code": "proc show*(ih: PIhandle): cint {.importc: \"IupShow\", cdecl, dynlib: dllname, \u000A                                 discardable.}"
  }, 
  {
    "name": "showXY", 
    "type": "skProc", 
    "code": "proc showXY*(ih: PIhandle; x, y: cint): cint {.importc: \"IupShowXY\", cdecl, \u000A    dynlib: dllname, discardable.}"
  }, 
  {
    "name": "hide", 
    "type": "skProc", 
    "code": "proc hide*(ih: PIhandle): cint {.importc: \"IupHide\", cdecl, dynlib: dllname, \u000A                                 discardable.}"
  }, 
  {
    "name": "map", 
    "type": "skProc", 
    "code": "proc map*(ih: PIhandle): cint {.importc: \"IupMap\", cdecl, dynlib: dllname, \u000A                                discardable.}"
  }, 
  {
    "name": "unmap", 
    "type": "skProc", 
    "code": "proc unmap*(ih: PIhandle) {.importc: \"IupUnmap\", cdecl, dynlib: dllname, \u000A                            discardable.}"
  }, 
  {
    "name": "setAttribute", 
    "type": "skProc", 
    "code": "proc setAttribute*(ih: PIhandle; name, value: cstring) {.\u000A    importc: \"IupSetAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "storeAttribute", 
    "type": "skProc", 
    "code": "proc storeAttribute*(ih: PIhandle; name, value: cstring) {.\u000A    importc: \"IupStoreAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "setAttributes", 
    "type": "skProc", 
    "code": "proc setAttributes*(ih: PIhandle; str: cstring): PIhandle {.\u000A    importc: \"IupSetAttributes\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getAttribute", 
    "type": "skProc", 
    "code": "proc getAttribute*(ih: PIhandle; name: cstring): cstring {.\u000A    importc: \"IupGetAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getAttributes", 
    "type": "skProc", 
    "code": "proc getAttributes*(ih: PIhandle): cstring {.importc: \"IupGetAttributes\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getInt", 
    "type": "skProc", 
    "code": "proc getInt*(ih: PIhandle; name: cstring): cint {.importc: \"IupGetInt\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getInt2", 
    "type": "skProc", 
    "code": "proc getInt2*(ih: PIhandle; name: cstring): cint {.importc: \"IupGetInt2\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getIntInt", 
    "type": "skProc", 
    "code": "proc getIntInt*(ih: PIhandle; name: cstring; i1, i2: var cint): cint {.\u000A    importc: \"IupGetIntInt\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getFloat", 
    "type": "skProc", 
    "code": "proc getFloat*(ih: PIhandle; name: cstring): cfloat {.importc: \"IupGetFloat\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "setfAttribute", 
    "type": "skProc", 
    "code": "proc setfAttribute*(ih: PIhandle; name, format: cstring) {.\u000A    importc: \"IupSetfAttribute\", cdecl, dynlib: dllname, varargs.}"
  }, 
  {
    "name": "getAllAttributes", 
    "type": "skProc", 
    "code": "proc getAllAttributes*(ih: PIhandle; names: cstringArray; n: cint): cint {.\u000A    importc: \"IupGetAllAttributes\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "setAtt", 
    "type": "skProc", 
    "code": "proc setAtt*(handleName: cstring; ih: PIhandle; name: cstring): PIhandle {.\u000A    importc: \"IupSetAtt\", cdecl, dynlib: dllname, varargs, discardable.}"
  }, 
  {
    "name": "setGlobal", 
    "type": "skProc", 
    "code": "proc setGlobal*(name, value: cstring) {.importc: \"IupSetGlobal\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "storeGlobal", 
    "type": "skProc", 
    "code": "proc storeGlobal*(name, value: cstring) {.importc: \"IupStoreGlobal\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getGlobal", 
    "type": "skProc", 
    "code": "proc getGlobal*(name: cstring): cstring {.importc: \"IupGetGlobal\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "setFocus", 
    "type": "skProc", 
    "code": "proc setFocus*(ih: PIhandle): PIhandle {.importc: \"IupSetFocus\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getFocus", 
    "type": "skProc", 
    "code": "proc getFocus*(): PIhandle {.importc: \"IupGetFocus\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "previousField", 
    "type": "skProc", 
    "code": "proc previousField*(ih: PIhandle): PIhandle {.importc: \"IupPreviousField\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "nextField", 
    "type": "skProc", 
    "code": "proc nextField*(ih: PIhandle): PIhandle {.importc: \"IupNextField\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getCallback", 
    "type": "skProc", 
    "code": "proc getCallback*(ih: PIhandle; name: cstring): Icallback {.\u000A    importc: \"IupGetCallback\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "setCallback", 
    "type": "skProc", 
    "code": "proc setCallback*(ih: PIhandle; name: cstring; fn: Icallback): Icallback {.\u000A    importc: \"IupSetCallback\", cdecl, dynlib: dllname, discardable.}"
  }, 
  {
    "name": "setCallbacks", 
    "type": "skProc", 
    "code": "proc setCallbacks*(ih: PIhandle; name: cstring; fn: Icallback): PIhandle {.\u000A    importc: \"IupSetCallbacks\", cdecl, dynlib: dllname, varargs, discardable.}"
  }, 
  {
    "name": "getFunction", 
    "type": "skProc", 
    "code": "proc getFunction*(name: cstring): Icallback {.importc: \"IupGetFunction\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "setFunction", 
    "type": "skProc", 
    "code": "proc setFunction*(name: cstring; fn: Icallback): Icallback {.\u000A    importc: \"IupSetFunction\", cdecl, dynlib: dllname, discardable.}"
  }, 
  {
    "name": "getActionName", 
    "type": "skProc", 
    "code": "proc getActionName*(): cstring {.importc: \"IupGetActionName\", cdecl, \u000A                                 dynlib: dllname.}"
  }, 
  {
    "name": "getHandle", 
    "type": "skProc", 
    "code": "proc getHandle*(name: cstring): PIhandle {.importc: \"IupGetHandle\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "setHandle", 
    "type": "skProc", 
    "code": "proc setHandle*(name: cstring; ih: PIhandle): PIhandle {.\u000A    importc: \"IupSetHandle\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getAllNames", 
    "type": "skProc", 
    "code": "proc getAllNames*(names: cstringArray; n: cint): cint {.\u000A    importc: \"IupGetAllNames\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getAllDialogs", 
    "type": "skProc", 
    "code": "proc getAllDialogs*(names: cstringArray; n: cint): cint {.\u000A    importc: \"IupGetAllDialogs\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getName", 
    "type": "skProc", 
    "code": "proc getName*(ih: PIhandle): cstring {.importc: \"IupGetName\", cdecl, \u000A                                       dynlib: dllname.}"
  }, 
  {
    "name": "setAttributeHandle", 
    "type": "skProc", 
    "code": "proc setAttributeHandle*(ih: PIhandle; name: cstring; ihNamed: PIhandle) {.\u000A    importc: \"IupSetAttributeHandle\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getAttributeHandle", 
    "type": "skProc", 
    "code": "proc getAttributeHandle*(ih: PIhandle; name: cstring): PIhandle {.\u000A    importc: \"IupGetAttributeHandle\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "getClassName", 
    "type": "skProc", 
    "code": "proc getClassName*(ih: PIhandle): cstring {.importc: \"IupGetClassName\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getClassType", 
    "type": "skProc", 
    "code": "proc getClassType*(ih: PIhandle): cstring {.importc: \"IupGetClassType\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "getClassAttributes", 
    "type": "skProc", 
    "code": "proc getClassAttributes*(classname: cstring; names: cstringArray; n: cint): cint {.\u000A    importc: \"IupGetClassAttributes\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "saveClassAttributes", 
    "type": "skProc", 
    "code": "proc saveClassAttributes*(ih: PIhandle) {.importc: \"IupSaveClassAttributes\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "setClassDefaultAttribute", 
    "type": "skProc", 
    "code": "proc setClassDefaultAttribute*(classname, name, value: cstring) {.\u000A    importc: \"IupSetClassDefaultAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "create", 
    "type": "skProc", 
    "code": "proc create*(classname: cstring): PIhandle {.importc: \"IupCreate\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "createv", 
    "type": "skProc", 
    "code": "proc createv*(classname: cstring; params: pointer): PIhandle {.\u000A    importc: \"IupCreatev\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "createp", 
    "type": "skProc", 
    "code": "proc createp*(classname: cstring; first: pointer): PIhandle {.\u000A    importc: \"IupCreatep\", cdecl, dynlib: dllname, varargs.}"
  }, 
  {
    "name": "fill", 
    "type": "skProc", 
    "code": "proc fill*(): PIhandle {.importc: \"IupFill\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "radio", 
    "type": "skProc", 
    "code": "proc radio*(child: PIhandle): PIhandle {.importc: \"IupRadio\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "vbox", 
    "type": "skProc", 
    "code": "proc vbox*(child: PIhandle): PIhandle {.importc: \"IupVbox\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "vboxv", 
    "type": "skProc", 
    "code": "proc vboxv*(children: ptr PIhandle): PIhandle {.importc: \"IupVboxv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "zbox", 
    "type": "skProc", 
    "code": "proc zbox*(child: PIhandle): PIhandle {.importc: \"IupZbox\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "zboxv", 
    "type": "skProc", 
    "code": "proc zboxv*(children: ptr PIhandle): PIhandle {.importc: \"IupZboxv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "hbox", 
    "type": "skProc", 
    "code": "proc hbox*(child: PIhandle): PIhandle {.importc: \"IupHbox\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "hboxv", 
    "type": "skProc", 
    "code": "proc hboxv*(children: ptr PIhandle): PIhandle {.importc: \"IupHboxv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "normalizer", 
    "type": "skProc", 
    "code": "proc normalizer*(ihFirst: PIhandle): PIhandle {.importc: \"IupNormalizer\", cdecl, \u000A    dynlib: dllname, varargs.}"
  }, 
  {
    "name": "normalizerv", 
    "type": "skProc", 
    "code": "proc normalizerv*(ihList: ptr PIhandle): PIhandle {.importc: \"IupNormalizerv\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "cbox", 
    "type": "skProc", 
    "code": "proc cbox*(child: PIhandle): PIhandle {.importc: \"IupCbox\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "cboxv", 
    "type": "skProc", 
    "code": "proc cboxv*(children: ptr PIhandle): PIhandle {.importc: \"IupCboxv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "sbox", 
    "type": "skProc", 
    "code": "proc sbox*(child: PIhandle): PIhandle {.importc: \"IupSbox\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "frame", 
    "type": "skProc", 
    "code": "proc frame*(child: PIhandle): PIhandle {.importc: \"IupFrame\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "image", 
    "type": "skProc", 
    "code": "proc image*(width, height: cint; pixmap: pointer): PIhandle {.\u000A    importc: \"IupImage\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "imageRGB", 
    "type": "skProc", 
    "code": "proc imageRGB*(width, height: cint; pixmap: pointer): PIhandle {.\u000A    importc: \"IupImageRGB\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "imageRGBA", 
    "type": "skProc", 
    "code": "proc imageRGBA*(width, height: cint; pixmap: pointer): PIhandle {.\u000A    importc: \"IupImageRGBA\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "item", 
    "type": "skProc", 
    "code": "proc item*(title, action: cstring): PIhandle {.importc: \"IupItem\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "submenu", 
    "type": "skProc", 
    "code": "proc submenu*(title: cstring; child: PIhandle): PIhandle {.\u000A    importc: \"IupSubmenu\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "separator", 
    "type": "skProc", 
    "code": "proc separator*(): PIhandle {.importc: \"IupSeparator\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "menu", 
    "type": "skProc", 
    "code": "proc menu*(child: PIhandle): PIhandle {.importc: \"IupMenu\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "menuv", 
    "type": "skProc", 
    "code": "proc menuv*(children: ptr PIhandle): PIhandle {.importc: \"IupMenuv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "button", 
    "type": "skProc", 
    "code": "proc button*(title, action: cstring): PIhandle {.importc: \"IupButton\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "canvas", 
    "type": "skProc", 
    "code": "proc canvas*(action: cstring): PIhandle {.importc: \"IupCanvas\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "dialog", 
    "type": "skProc", 
    "code": "proc dialog*(child: PIhandle): PIhandle {.importc: \"IupDialog\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "user", 
    "type": "skProc", 
    "code": "proc user*(): PIhandle {.importc: \"IupUser\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "label", 
    "type": "skProc", 
    "code": "proc label*(title: cstring): PIhandle {.importc: \"IupLabel\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "list", 
    "type": "skProc", 
    "code": "proc list*(action: cstring): PIhandle {.importc: \"IupList\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "text", 
    "type": "skProc", 
    "code": "proc text*(action: cstring): PIhandle {.importc: \"IupText\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "multiLine", 
    "type": "skProc", 
    "code": "proc multiLine*(action: cstring): PIhandle {.importc: \"IupMultiLine\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "toggle", 
    "type": "skProc", 
    "code": "proc toggle*(title, action: cstring): PIhandle {.importc: \"IupToggle\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "timer", 
    "type": "skProc", 
    "code": "proc timer*(): PIhandle {.importc: \"IupTimer\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "progressBar", 
    "type": "skProc", 
    "code": "proc progressBar*(): PIhandle {.importc: \"IupProgressBar\", cdecl, \u000A                                dynlib: dllname.}"
  }, 
  {
    "name": "val", 
    "type": "skProc", 
    "code": "proc val*(theType: cstring): PIhandle {.importc: \"IupVal\", cdecl, \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "tabs", 
    "type": "skProc", 
    "code": "proc tabs*(child: PIhandle): PIhandle {.importc: \"IupTabs\", cdecl, \u000A                                        dynlib: dllname, varargs.}"
  }, 
  {
    "name": "tabsv", 
    "type": "skProc", 
    "code": "proc tabsv*(children: ptr PIhandle): PIhandle {.importc: \"IupTabsv\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "tree", 
    "type": "skProc", 
    "code": "proc tree*(): PIhandle {.importc: \"IupTree\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "spin", 
    "type": "skProc", 
    "code": "proc spin*(): PIhandle {.importc: \"IupSpin\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "spinbox", 
    "type": "skProc", 
    "code": "proc spinbox*(child: PIhandle): PIhandle {.importc: \"IupSpinbox\", cdecl, \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "textConvertLinColToPos", 
    "type": "skProc", 
    "code": "proc textConvertLinColToPos*(ih: PIhandle; lin, col: cint; pos: var cint) {.\u000A    importc: \"IupTextConvertLinColToPos\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "textConvertPosToLinCol", 
    "type": "skProc", 
    "code": "proc textConvertPosToLinCol*(ih: PIhandle; pos: cint; lin, col: var cint) {.\u000A    importc: \"IupTextConvertPosToLinCol\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "convertXYToPos", 
    "type": "skProc", 
    "code": "proc convertXYToPos*(ih: PIhandle; x, y: cint): cint {.\u000A    importc: \"IupConvertXYToPos\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeSetUserId", 
    "type": "skProc", 
    "code": "proc treeSetUserId*(ih: PIhandle; id: cint; userid: pointer): cint {.\u000A    importc: \"IupTreeSetUserId\", cdecl, dynlib: dllname, discardable.}"
  }, 
  {
    "name": "treeGetUserId", 
    "type": "skProc", 
    "code": "proc treeGetUserId*(ih: PIhandle; id: cint): pointer {.\u000A    importc: \"IupTreeGetUserId\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeGetId", 
    "type": "skProc", 
    "code": "proc treeGetId*(ih: PIhandle; userid: pointer): cint {.importc: \"IupTreeGetId\", \u000A    cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeSetAttribute", 
    "type": "skProc", 
    "code": "proc treeSetAttribute*(ih: PIhandle; name: cstring; id: cint; value: cstring) {.\u000A    importc: \"IupTreeSetAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeStoreAttribute", 
    "type": "skProc", 
    "code": "proc treeStoreAttribute*(ih: PIhandle; name: cstring; id: cint; value: cstring) {.\u000A    importc: \"IupTreeStoreAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeGetAttribute", 
    "type": "skProc", 
    "code": "proc treeGetAttribute*(ih: PIhandle; name: cstring; id: cint): cstring {.\u000A    importc: \"IupTreeGetAttribute\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeGetInt", 
    "type": "skProc", 
    "code": "proc treeGetInt*(ih: PIhandle; name: cstring; id: cint): cint {.\u000A    importc: \"IupTreeGetInt\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeGetFloat", 
    "type": "skProc", 
    "code": "proc treeGetFloat*(ih: PIhandle; name: cstring; id: cint): cfloat {.\u000A    importc: \"IupTreeGetFloat\", cdecl, dynlib: dllname.}"
  }, 
  {
    "name": "treeSetfAttribute", 
    "type": "skProc", 
    "code": "proc treeSetfAttribute*(ih: PIhandle; name: cstring; id: cint; format: cstring) {.\u000A    importc: \"IupTreeSetfAttribute\", cdecl, dynlib: dllname, varargs.}"
  }, 
  {
    "name": "IUP_BUTTON5", 
    "type": "skConst", 
    "code": "IUP_BUTTON5* = cint(ord('5'))"
  }, 
  {
    "name": "isShift", 
    "type": "skProc", 
    "code": "proc isShift*(s: cstring): bool"
  }, 
  {
    "name": "isControl", 
    "type": "skProc", 
    "code": "proc isControl*(s: cstring): bool"
  }, 
  {
    "name": "isButton1", 
    "type": "skProc", 
    "code": "proc isButton1*(s: cstring): bool"
  }, 
  {
    "name": "isButton2", 
    "type": "skProc", 
    "code": "proc isButton2*(s: cstring): bool"
  }, 
  {
    "name": "isbutton3", 
    "type": "skProc", 
    "code": "proc isbutton3*(s: cstring): bool"
  }, 
  {
    "name": "isDouble", 
    "type": "skProc", 
    "code": "proc isDouble*(s: cstring): bool"
  }, 
  {
    "name": "isAlt", 
    "type": "skProc", 
    "code": "proc isAlt*(s: cstring): bool"
  }, 
  {
    "name": "isSys", 
    "type": "skProc", 
    "code": "proc isSys*(s: cstring): bool"
  }, 
  {
    "name": "isButton4", 
    "type": "skProc", 
    "code": "proc isButton4*(s: cstring): bool"
  }, 
  {
    "name": "isButton5", 
    "type": "skProc", 
    "code": "proc isButton5*(s: cstring): bool"
  }, 
  {
    "name": "IUP_MASK_UINT", 
    "type": "skConst", 
    "code": "IUP_MASK_UINT* = \"/d+\""
  }, 
  {
    "name": "K_tilde", 
    "type": "skConst", 
    "code": "K_tilde* = cint(ord('~'))"
  }, 
  {
    "name": "isPrint", 
    "type": "skProc", 
    "code": "proc isPrint*(c: cint): bool"
  }, 
  {
    "name": "K_CR", 
    "type": "skConst", 
    "code": "K_CR* = cint(13)"
  }, 
  {
    "name": "isXkey", 
    "type": "skProc", 
    "code": "proc isXkey*(c: cint): bool"
  }, 
  {
    "name": "isShiftXkey", 
    "type": "skProc", 
    "code": "proc isShiftXkey*(c: cint): bool"
  }, 
  {
    "name": "isCtrlXkey", 
    "type": "skProc", 
    "code": "proc isCtrlXkey*(c: cint): bool"
  }, 
  {
    "name": "isAltXkey", 
    "type": "skProc", 
    "code": "proc isAltXkey*(c: cint): bool"
  }, 
  {
    "name": "isSysXkey", 
    "type": "skProc", 
    "code": "proc isSysXkey*(c: cint): bool"
  }, 
  {
    "name": "iUPxCODE", 
    "type": "skProc", 
    "code": "proc iUPxCODE*(c: cint): cint"
  }, 
  {
    "name": "iUPsxCODE", 
    "type": "skProc", 
    "code": "proc iUPsxCODE*(c: cint): cint"
  }, 
  {
    "name": "iUPcxCODE", 
    "type": "skProc", 
    "code": "proc iUPcxCODE*(c: cint): cint"
  }, 
  {
    "name": "iUPmxCODE", 
    "type": "skProc", 
    "code": "proc iUPmxCODE*(c: cint): cint"
  }, 
  {
    "name": "iUPyxCODE", 
    "type": "skProc", 
    "code": "proc iUPyxCODE*(c: cint): cint"
  }, 
  {
    "name": "K_yAsterisk", 
    "type": "skConst", 
    "code": "K_yAsterisk* = iUPyxCODE(K_asterisk)"
  }, 
  {
    "name": "controlsOpen", 
    "type": "skProc", 
    "code": "proc controlsOpen*(): cint {.cdecl, importc: \"IupControlsOpen\", dynlib: dllname.}"
  }, 
  {
    "name": "controlsClose", 
    "type": "skProc", 
    "code": "proc controlsClose*() {.cdecl, importc: \"IupControlsClose\", dynlib: dllname.}"
  }, 
  {
    "name": "oldValOpen", 
    "type": "skProc", 
    "code": "proc oldValOpen*() {.cdecl, importc: \"IupOldValOpen\", dynlib: dllname.}"
  }, 
  {
    "name": "oldTabsOpen", 
    "type": "skProc", 
    "code": "proc oldTabsOpen*() {.cdecl, importc: \"IupOldTabsOpen\", dynlib: dllname.}"
  }, 
  {
    "name": "colorbar", 
    "type": "skProc", 
    "code": "proc colorbar*(): PIhandle {.cdecl, importc: \"IupColorbar\", dynlib: dllname.}"
  }, 
  {
    "name": "cells", 
    "type": "skProc", 
    "code": "proc cells*(): PIhandle {.cdecl, importc: \"IupCells\", dynlib: dllname.}"
  }, 
  {
    "name": "colorBrowser", 
    "type": "skProc", 
    "code": "proc colorBrowser*(): PIhandle {.cdecl, importc: \"IupColorBrowser\", \u000A                                 dynlib: dllname.}"
  }, 
  {
    "name": "gauge", 
    "type": "skProc", 
    "code": "proc gauge*(): PIhandle {.cdecl, importc: \"IupGauge\", dynlib: dllname.}"
  }, 
  {
    "name": "dial", 
    "type": "skProc", 
    "code": "proc dial*(theType: cstring): PIhandle {.cdecl, importc: \"IupDial\", \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "matrix", 
    "type": "skProc", 
    "code": "proc matrix*(action: cstring): PIhandle {.cdecl, importc: \"IupMatrix\", \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "matSetAttribute", 
    "type": "skProc", 
    "code": "proc matSetAttribute*(ih: PIhandle; name: cstring; lin, col: cint; \u000A                      value: cstring) {.cdecl, importc: \"IupMatSetAttribute\", \u000A                                        dynlib: dllname.}"
  }, 
  {
    "name": "matStoreAttribute", 
    "type": "skProc", 
    "code": "proc matStoreAttribute*(ih: PIhandle; name: cstring; lin, col: cint; \u000A                        value: cstring) {.cdecl, \u000A    importc: \"IupMatStoreAttribute\", dynlib: dllname.}"
  }, 
  {
    "name": "matGetAttribute", 
    "type": "skProc", 
    "code": "proc matGetAttribute*(ih: PIhandle; name: cstring; lin, col: cint): cstring {.\u000A    cdecl, importc: \"IupMatGetAttribute\", dynlib: dllname.}"
  }, 
  {
    "name": "matGetInt", 
    "type": "skProc", 
    "code": "proc matGetInt*(ih: PIhandle; name: cstring; lin, col: cint): cint {.cdecl, \u000A    importc: \"IupMatGetInt\", dynlib: dllname.}"
  }, 
  {
    "name": "matGetFloat", 
    "type": "skProc", 
    "code": "proc matGetFloat*(ih: PIhandle; name: cstring; lin, col: cint): cfloat {.cdecl, \u000A    importc: \"IupMatGetFloat\", dynlib: dllname.}"
  }, 
  {
    "name": "matSetfAttribute", 
    "type": "skProc", 
    "code": "proc matSetfAttribute*(ih: PIhandle; name: cstring; lin, col: cint; \u000A                       format: cstring) {.cdecl, importc: \"IupMatSetfAttribute\", \u000A    dynlib: dllname, varargs.}"
  }, 
  {
    "name": "IUP_SECONDARY", 
    "type": "skConst", 
    "code": "IUP_SECONDARY* = - 2"
  }, 
  {
    "name": "pPlotOpen", 
    "type": "skProc", 
    "code": "proc pPlotOpen*() {.cdecl, importc: \"IupPPlotOpen\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlot", 
    "type": "skProc", 
    "code": "proc pPlot*(): PIhandle {.cdecl, importc: \"IupPPlot\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlotBegin", 
    "type": "skProc", 
    "code": "proc pPlotBegin*(ih: PIhandle; strXdata: cint) {.cdecl, \u000A    importc: \"IupPPlotBegin\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlotAdd", 
    "type": "skProc", 
    "code": "proc pPlotAdd*(ih: PIhandle; x, y: cfloat) {.cdecl, importc: \"IupPPlotAdd\", \u000A    dynlib: dllname.}"
  }, 
  {
    "name": "pPlotAddStr", 
    "type": "skProc", 
    "code": "proc pPlotAddStr*(ih: PIhandle; x: cstring; y: cfloat) {.cdecl, \u000A    importc: \"IupPPlotAddStr\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlotEnd", 
    "type": "skProc", 
    "code": "proc pPlotEnd*(ih: PIhandle): cint {.cdecl, importc: \"IupPPlotEnd\", \u000A                                     dynlib: dllname.}"
  }, 
  {
    "name": "pPlotInsertStr", 
    "type": "skProc", 
    "code": "proc pPlotInsertStr*(ih: PIhandle; index, sampleIndex: cint; x: cstring; \u000A                     y: cfloat) {.cdecl, importc: \"IupPPlotInsertStr\", \u000A                                  dynlib: dllname.}"
  }, 
  {
    "name": "pPlotInsert", 
    "type": "skProc", 
    "code": "proc pPlotInsert*(ih: PIhandle; index, sampleIndex: cint; x, y: cfloat) {.cdecl, \u000A    importc: \"IupPPlotInsert\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlotTransform", 
    "type": "skProc", 
    "code": "proc pPlotTransform*(ih: PIhandle; x, y: cfloat; ix, iy: var cint) {.cdecl, \u000A    importc: \"IupPPlotTransform\", dynlib: dllname.}"
  }, 
  {
    "name": "pPlotPaintTo", 
    "type": "skProc", 
    "code": "proc pPlotPaintTo*(ih: PIhandle; cnv: pointer) {.cdecl, \u000A    importc: \"IupPPlotPaintTo\", dynlib: dllname.}"
  }
]