[
  {
    "name": "DEFAULT_FREQUENCY", 
    "type": "skConst", 
    "code": "DEFAULT_FREQUENCY* = 22050"
  }, 
  {
    "name": "DEFAULT_FORMAT", 
    "type": "skConst", 
    "code": "DEFAULT_FORMAT* = AUDIO_S16LSB"
  }, 
  {
    "name": "LIBMIKMOD_VERSION", 
    "type": "skConst", 
    "code": "LIBMIKMOD_VERSION* = ((LIBMIKMOD_VERSION_MAJOR shl 16) or\u000A    (LIBMIKMOD_VERSION_MINOR shl 8) or (LIBMIKMOD_REVISION))"
  }, 
  {
    "name": "TMixFunction", 
    "type": "skType", 
    "code": "TMixFunction* = proc (udata, stream: pointer; length: cint): pointer {.cdecl.}"
  }, 
  {
    "name": "version", 
    "type": "skProc", 
    "code": "proc version*(x: var sdl.Tversion)"
  }, 
  {
    "name": "linkedVersion", 
    "type": "skProc", 
    "code": "proc linkedVersion*(): sdl.Pversion {.cdecl, importc: \"Mix_Linked_Version\", \u000A                                      dynlib: MixerLibName.}"
  }, 
  {
    "name": "openAudio", 
    "type": "skProc", 
    "code": "proc openAudio*(frequency: cint; format: uint16; channels: cint; chunksize: cint): cint {.\u000A    cdecl, importc: \"Mix_OpenAudio\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "allocateChannels", 
    "type": "skProc", 
    "code": "proc allocateChannels*(numchannels: cint): cint {.cdecl, \u000A    importc: \"Mix_AllocateChannels\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "querySpec", 
    "type": "skProc", 
    "code": "proc querySpec*(frequency: var cint; format: var uint16; channels: var cint): cint {.\u000A    cdecl, importc: \"Mix_QuerySpec\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "loadWAV_RW", 
    "type": "skProc", 
    "code": "proc loadWAV_RW*(src: PRWops; freesrc: cint): PChunk {.cdecl, \u000A    importc: \"Mix_LoadWAV_RW\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "loadWAV", 
    "type": "skProc", 
    "code": "proc loadWAV*(filename: cstring): PChunk"
  }, 
  {
    "name": "loadMUS", 
    "type": "skProc", 
    "code": "proc loadMUS*(filename: cstring): PMusic {.cdecl, importc: \"Mix_LoadMUS\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "quickLoadWAV", 
    "type": "skProc", 
    "code": "proc quickLoadWAV*(mem: pointer): PChunk {.cdecl, importc: \"Mix_QuickLoad_WAV\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "freeChunk", 
    "type": "skProc", 
    "code": "proc freeChunk*(chunk: PChunk) {.cdecl, importc: \"Mix_FreeChunk\", \u000A                                 dynlib: MixerLibName.}"
  }, 
  {
    "name": "freeMusic", 
    "type": "skProc", 
    "code": "proc freeMusic*(music: PMusic) {.cdecl, importc: \"Mix_FreeMusic\", \u000A                                 dynlib: MixerLibName.}"
  }, 
  {
    "name": "getMusicType", 
    "type": "skProc", 
    "code": "proc getMusicType*(music: PMusic): TMusicType {.cdecl, \u000A    importc: \"Mix_GetMusicType\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "setPostMix", 
    "type": "skProc", 
    "code": "proc setPostMix*(mixFunc: TMixFunction; arg: pointer) {.cdecl, \u000A    importc: \"Mix_SetPostMix\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "hookMusic", 
    "type": "skProc", 
    "code": "proc hookMusic*(mixFunc: TMixFunction; arg: pointer) {.cdecl, \u000A    importc: \"Mix_HookMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "hookMusicFinished", 
    "type": "skProc", 
    "code": "proc hookMusicFinished*(musicFinished: pointer) {.cdecl, \u000A    importc: \"Mix_HookMusicFinished\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "getMusicHookData", 
    "type": "skProc", 
    "code": "proc getMusicHookData*(): pointer {.cdecl, importc: \"Mix_GetMusicHookData\", \u000A                                    dynlib: MixerLibName.}"
  }, 
  {
    "name": "TChannelFinished", 
    "type": "skType", 
    "code": "TChannelFinished* = proc (channel: cint) {.cdecl.}"
  }, 
  {
    "name": "channelFinished", 
    "type": "skProc", 
    "code": "proc channelFinished*(channelFinished: TChannelFinished) {.cdecl, \u000A    importc: \"Mix_ChannelFinished\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "CHANNEL_POST", 
    "type": "skConst", 
    "code": "CHANNEL_POST* = - 2"
  }, 
  {
    "name": "TEffectDone", 
    "type": "skType", 
    "code": "TEffectDone* = proc (chan: cint; udata: pointer): pointer {.cdecl.}"
  }, 
  {
    "name": "registerEffect", 
    "type": "skProc", 
    "code": "proc registerEffect*(chan: cint; f: TEffectFunc; d: TEffectDone; arg: pointer): cint {.\u000A    cdecl, importc: \"Mix_RegisterEffect\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "unregisterEffect", 
    "type": "skProc", 
    "code": "proc unregisterEffect*(channel: cint; f: TEffectFunc): cint {.cdecl, \u000A    importc: \"Mix_UnregisterEffect\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "unregisterAllEffects", 
    "type": "skProc", 
    "code": "proc unregisterAllEffects*(channel: cint): cint {.cdecl, \u000A    importc: \"Mix_UnregisterAllEffects\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "EFFECTSMAXSPEED", 
    "type": "skConst", 
    "code": "EFFECTSMAXSPEED* = \"MIX_EFFECTSMAXSPEED\""
  }, 
  {
    "name": "setPanning", 
    "type": "skProc", 
    "code": "proc setPanning*(channel: cint; left: byte; right: byte): cint {.cdecl, \u000A    importc: \"Mix_SetPanning\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "setPosition", 
    "type": "skProc", 
    "code": "proc setPosition*(channel: cint; angle: int16; distance: byte): cint {.cdecl, \u000A    importc: \"Mix_SetPosition\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "setDistance", 
    "type": "skProc", 
    "code": "proc setDistance*(channel: cint; distance: byte): cint {.cdecl, \u000A    importc: \"Mix_SetDistance\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "setReverseStereo", 
    "type": "skProc", 
    "code": "proc setReverseStereo*(channel: cint; flip: cint): cint {.cdecl, \u000A    importc: \"Mix_SetReverseStereo\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "reserveChannels", 
    "type": "skProc", 
    "code": "proc reserveChannels*(num: cint): cint {.cdecl, importc: \"Mix_ReserveChannels\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupChannel", 
    "type": "skProc", 
    "code": "proc groupChannel*(which: cint; tag: cint): cint {.cdecl, \u000A    importc: \"Mix_GroupChannel\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupChannels", 
    "type": "skProc", 
    "code": "proc groupChannels*(`from`: cint; `to`: cint; tag: cint): cint {.cdecl, \u000A    importc: \"Mix_GroupChannels\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupAvailable", 
    "type": "skProc", 
    "code": "proc groupAvailable*(tag: cint): cint {.cdecl, importc: \"Mix_GroupAvailable\", \u000A                                        dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupCount", 
    "type": "skProc", 
    "code": "proc groupCount*(tag: cint): cint {.cdecl, importc: \"Mix_GroupCount\", \u000A                                    dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupOldest", 
    "type": "skProc", 
    "code": "proc groupOldest*(tag: cint): cint {.cdecl, importc: \"Mix_GroupOldest\", \u000A                                     dynlib: MixerLibName.}"
  }, 
  {
    "name": "groupNewer", 
    "type": "skProc", 
    "code": "proc groupNewer*(tag: cint): cint {.cdecl, importc: \"Mix_GroupNewer\", \u000A                                    dynlib: MixerLibName.}"
  }, 
  {
    "name": "playChannelTimed", 
    "type": "skProc", 
    "code": "proc playChannelTimed*(channel: cint; chunk: PChunk; loops: cint; ticks: cint): cint {.\u000A    cdecl, importc: \"Mix_PlayChannelTimed\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "playChannel", 
    "type": "skProc", 
    "code": "proc playChannel*(channel: cint; chunk: PChunk; loops: cint): cint"
  }, 
  {
    "name": "playMusic", 
    "type": "skProc", 
    "code": "proc playMusic*(music: PMusic; loops: cint): cint {.cdecl, \u000A    importc: \"Mix_PlayMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeInMusic", 
    "type": "skProc", 
    "code": "proc fadeInMusic*(music: PMusic; loops: cint; ms: cint): cint {.cdecl, \u000A    importc: \"Mix_FadeInMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeInChannelTimed", 
    "type": "skProc", 
    "code": "proc fadeInChannelTimed*(channel: cint; chunk: PChunk; loops: cint; ms: cint; \u000A                         ticks: cint): cint {.cdecl, \u000A    importc: \"Mix_FadeInChannelTimed\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeInChannel", 
    "type": "skProc", 
    "code": "proc fadeInChannel*(channel: cint; chunk: PChunk; loops: cint; ms: cint): cint"
  }, 
  {
    "name": "volume", 
    "type": "skProc", 
    "code": "proc volume*(channel: cint; volume: cint): cint {.cdecl, importc: \"Mix_Volume\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "volumeChunk", 
    "type": "skProc", 
    "code": "proc volumeChunk*(chunk: PChunk; volume: cint): cint {.cdecl, \u000A    importc: \"Mix_VolumeChunk\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "volumeMusic", 
    "type": "skProc", 
    "code": "proc volumeMusic*(volume: cint): cint {.cdecl, importc: \"Mix_VolumeMusic\", \u000A                                        dynlib: MixerLibName.}"
  }, 
  {
    "name": "haltChannel", 
    "type": "skProc", 
    "code": "proc haltChannel*(channel: cint): cint {.cdecl, importc: \"Mix_HaltChannel\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "haltGroup", 
    "type": "skProc", 
    "code": "proc haltGroup*(tag: cint): cint {.cdecl, importc: \"Mix_HaltGroup\", \u000A                                   dynlib: MixerLibName.}"
  }, 
  {
    "name": "haltMusic", 
    "type": "skProc", 
    "code": "proc haltMusic*(): cint {.cdecl, importc: \"Mix_HaltMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "expireChannel", 
    "type": "skProc", 
    "code": "proc expireChannel*(channel: cint; ticks: cint): cint {.cdecl, \u000A    importc: \"Mix_ExpireChannel\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeOutChannel", 
    "type": "skProc", 
    "code": "proc fadeOutChannel*(which: cint; ms: cint): cint {.cdecl, \u000A    importc: \"Mix_FadeOutChannel\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeOutGroup", 
    "type": "skProc", 
    "code": "proc fadeOutGroup*(tag: cint; ms: cint): cint {.cdecl, \u000A    importc: \"Mix_FadeOutGroup\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadeOutMusic", 
    "type": "skProc", 
    "code": "proc fadeOutMusic*(ms: cint): cint {.cdecl, importc: \"Mix_FadeOutMusic\", \u000A                                     dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadingMusic", 
    "type": "skProc", 
    "code": "proc fadingMusic*(): TFading {.cdecl, importc: \"Mix_FadingMusic\", \u000A                               dynlib: MixerLibName.}"
  }, 
  {
    "name": "fadingChannel", 
    "type": "skProc", 
    "code": "proc fadingChannel*(which: cint): TFading {.cdecl, importc: \"Mix_FadingChannel\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "pause", 
    "type": "skProc", 
    "code": "proc pause*(channel: cint) {.cdecl, importc: \"Mix_Pause\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "resume", 
    "type": "skProc", 
    "code": "proc resume*(channel: cint) {.cdecl, importc: \"Mix_Resume\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "paused", 
    "type": "skProc", 
    "code": "proc paused*(channel: cint): cint {.cdecl, importc: \"Mix_Paused\", \u000A                                    dynlib: MixerLibName.}"
  }, 
  {
    "name": "pauseMusic", 
    "type": "skProc", 
    "code": "proc pauseMusic*() {.cdecl, importc: \"Mix_PauseMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "resumeMusic", 
    "type": "skProc", 
    "code": "proc resumeMusic*() {.cdecl, importc: \"Mix_ResumeMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "rewindMusic", 
    "type": "skProc", 
    "code": "proc rewindMusic*() {.cdecl, importc: \"Mix_RewindMusic\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "pausedMusic", 
    "type": "skProc", 
    "code": "proc pausedMusic*(): cint {.cdecl, importc: \"Mix_PausedMusic\", \u000A                            dynlib: MixerLibName.}"
  }, 
  {
    "name": "setMusicPosition", 
    "type": "skProc", 
    "code": "proc setMusicPosition*(position: float64): cint {.cdecl, \u000A    importc: \"Mix_SetMusicPosition\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "playing", 
    "type": "skProc", 
    "code": "proc playing*(channel: cint): cint {.cdecl, importc: \"Mix_Playing\", \u000A                                     dynlib: MixerLibName.}"
  }, 
  {
    "name": "playingMusic", 
    "type": "skProc", 
    "code": "proc playingMusic*(): cint {.cdecl, importc: \"Mix_PlayingMusic\", \u000A                             dynlib: MixerLibName.}"
  }, 
  {
    "name": "setMusicCMD", 
    "type": "skProc", 
    "code": "proc setMusicCMD*(command: cstring): cint {.cdecl, importc: \"Mix_SetMusicCMD\", \u000A    dynlib: MixerLibName.}"
  }, 
  {
    "name": "setSynchroValue", 
    "type": "skProc", 
    "code": "proc setSynchroValue*(value: cint): cint {.cdecl, \u000A    importc: \"Mix_SetSynchroValue\", dynlib: MixerLibName.}"
  }, 
  {
    "name": "getSynchroValue", 
    "type": "skProc", 
    "code": "proc getSynchroValue*(): cint {.cdecl, importc: \"Mix_GetSynchroValue\", \u000A                                dynlib: MixerLibName.}"
  }, 
  {
    "name": "getChunk", 
    "type": "skProc", 
    "code": "proc getChunk*(channel: cint): PChunk {.cdecl, importc: \"Mix_GetChunk\", \u000A                                        dynlib: MixerLibName.}"
  }, 
  {
    "name": "closeAudio", 
    "type": "skProc", 
    "code": "proc closeAudio*() {.cdecl, importc: \"Mix_CloseAudio\", dynlib: MixerLibName.}"
  }
]