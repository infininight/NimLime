[
  {
    "comment": "Regular expression support for Nim. Consider using the pegs module\u000A## instead.\u000A## This module is implemented by providing a wrapper around the\u000A## `PRCE (Perl-Compatible Regular Expressions) <http://www.pcre.org>`_\u000A## C library. This means that your application will depend on the PRCE\u000A## library's licence when using this module, which should not be a problem\u000A## though.\u000A## PRCE's licence follows:\u000A##\u000A## .. include:: ../doc/regexprs.txt\u000A##"
  }, 
  {
    "name": "MaxSubpatterns", 
    "type": "skConst", 
    "description": "defines the maximum number of subpatterns that can be captured. This limit still exists for <tt class=\"docutils literal\"><span class=\"pre\">replacef</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">parallelReplace</span></tt>.", 
    "code": "MaxSubpatterns* = 20"
  }, 
  {
    "name": "RegexError", 
    "type": "skType", 
    "description": "is raised if the pattern is no valid regular expression.", 
    "code": "RegexError* = object of ValueError\u000A  "
  }, 
  {
    "name": "re", 
    "type": "skProc", 
    "description": "Constructor of regular expressions. Note that Nim's extended raw string literals support this syntax <tt class=\"docutils literal\"><span class=\"pre\">re&quot;[abc]&quot;</span></tt> as a short form for <tt class=\"docutils literal\"><span class=\"pre\">re(r&quot;[abc]&quot;)</span></tt>.", 
    "code": "proc re*(s: string; flags = {reExtended, reStudy}): Regex"
  }, 
  {
    "name": "findBounds", 
    "type": "skProc", 
    "description": "returns the starting position and end position of <cite>pattern</cite> in <cite>s</cite> and the captured substrings in the array <cite>matches</cite>. If it does not match, nothing is written into <cite>matches</cite> and <tt class=\"docutils literal\"><span class=\"pre\">(-1,0)</span></tt> is returned.", 
    "code": "proc findBounds*(s: string; pattern: Regex; matches: var openArray[string]; \u000A                 start = 0): tuple[first, last: int]"
  }, 
  {
    "name": "findBounds", 
    "type": "skProc", 
    "description": "returns the starting position and end position of <tt class=\"docutils literal\"><span class=\"pre\">pattern</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt> and the captured substrings in the array <cite>matches</cite>. If it does not match, nothing is written into <cite>matches</cite> and <tt class=\"docutils literal\"><span class=\"pre\">(-1,0)</span></tt> is returned.", 
    "code": "proc findBounds*(s: string; pattern: Regex; \u000A                 matches: var openArray[tuple[first, last: int]]; start = 0): tuple[\u000A    first, last: int]"
  }, 
  {
    "name": "findBounds", 
    "type": "skProc", 
    "description": "returns the starting position of <cite>pattern</cite> in <cite>s</cite>. If it does not match, <tt class=\"docutils literal\"><span class=\"pre\">(-1,0)</span></tt> is returned.", 
    "code": "proc findBounds*(s: string; pattern: Regex; start = 0): tuple[first, last: int]"
  }, 
  {
    "name": "match", 
    "type": "skProc", 
    "description": "returns <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> if <tt class=\"docutils literal\"><span class=\"pre\">s[start..]</span></tt> matches the <tt class=\"docutils literal\"><span class=\"pre\">pattern</span></tt> and the captured substrings in the array <tt class=\"docutils literal\"><span class=\"pre\">matches</span></tt>. If it does not match, nothing is written into <tt class=\"docutils literal\"><span class=\"pre\">matches</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt> is returned.", 
    "code": "proc match*(s: string; pattern: Regex; matches: var openArray[string]; start = 0): bool"
  }, 
  {
    "name": "match", 
    "type": "skProc", 
    "description": "returns <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> if <tt class=\"docutils literal\"><span class=\"pre\">s[start..]</span></tt> matches the <tt class=\"docutils literal\"><span class=\"pre\">pattern</span></tt>.", 
    "code": "proc match*(s: string; pattern: Regex; start = 0): bool"
  }, 
  {
    "name": "matchLen", 
    "type": "skProc", 
    "description": "the same as <tt class=\"docutils literal\"><span class=\"pre\">match</span></tt>, but it returns the length of the match, if there is no match, -1 is returned. Note that a match length of zero can happen.", 
    "code": "proc matchLen*(s: string; pattern: Regex; matches: var openArray[string]; \u000A               start = 0): int"
  }, 
  {
    "name": "matchLen", 
    "type": "skProc", 
    "description": "the same as <tt class=\"docutils literal\"><span class=\"pre\">match</span></tt>, but it returns the length of the match, if there is no match, -1 is returned. Note that a match length of zero can happen. ", 
    "code": "proc matchLen*(s: string; pattern: Regex; start = 0): int"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "returns the starting position of <tt class=\"docutils literal\"><span class=\"pre\">pattern</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt> and the captured substrings in the array <tt class=\"docutils literal\"><span class=\"pre\">matches</span></tt>. If it does not match, nothing is written into <tt class=\"docutils literal\"><span class=\"pre\">matches</span></tt> and -1 is returned.", 
    "code": "proc find*(s: string; pattern: Regex; matches: var openArray[string]; start = 0): int"
  }, 
  {
    "name": "find", 
    "type": "skProc", 
    "description": "returns the starting position of <tt class=\"docutils literal\"><span class=\"pre\">pattern</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt>. If it does not match, -1 is returned.", 
    "code": "proc find*(s: string; pattern: Regex; start = 0): int"
  }, 
  {
    "name": "findAll", 
    "type": "skIterator", 
    "description": "<p>Yields all matching <em>substrings</em> of <cite>s</cite> that match <cite>pattern</cite>.</p>\u000A<p>Note that since this is an iterator you should not modify the string you are iterating over: bad things could happen.</p>\u000A", 
    "code": "iterator findAll*(s: string; pattern: Regex; start = 0): string"
  }, 
  {
    "name": "findAll", 
    "type": "skProc", 
    "description": "returns all matching <em>substrings</em> of <cite>s</cite> that match <cite>pattern</cite>. If it does not match, @[] is returned.", 
    "code": "proc findAll*(s: string; pattern: Regex; start = 0): seq[string]"
  }, 
  {
    "name": "`=~`", 
    "type": "skTemplate", 
    "description": "This calls <tt class=\"docutils literal\"><span class=\"pre\">match</span></tt> with an implicit declared <tt class=\"docutils literal\"><span class=\"pre\">matches</span></tt> array that can be used in the scope of the <tt class=\"docutils literal\"><span class=\"pre\">=~</span></tt> call:<pre><span class=\"Keyword\">if</span> <span class=\"Identifier\">line</span> <span class=\"Operator\">=~</span> <span class=\"RawData\">re&quot;\\s*(\\w+)\\s*\\=\\s*(\\w+)&quot;</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Comment\"># matches a key=value pair:</span>\u000A  <span class=\"Identifier\">echo</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;Key: &quot;</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">matches</span><span class=\"Punctuation\">[</span><span class=\"DecNumber\">0</span><span class=\"Punctuation\">]</span><span class=\"Punctuation\">)</span>\u000A  <span class=\"Identifier\">echo</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;Value: &quot;</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">matches</span><span class=\"Punctuation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctuation\">]</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Keyword\">elif</span> <span class=\"Identifier\">line</span> <span class=\"Operator\">=~</span> <span class=\"RawData\">re&quot;\\s*(\\#.*)&quot;</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Comment\"># matches a comment</span>\u000A  <span class=\"Comment\"># note that the implicit ``matches`` array is different from the</span>\u000A  <span class=\"Comment\"># ``matches`` array of the first branch</span>\u000A  <span class=\"Identifier\">echo</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;comment: &quot;</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">matches</span><span class=\"Punctuation\">[</span><span class=\"DecNumber\">0</span><span class=\"Punctuation\">]</span><span class=\"Punctuation\">)</span>\u000A<span class=\"Keyword\">else</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Identifier\">echo</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;syntax error&quot;</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "template `=~`*(s: string; pattern: Regex): expr"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "same as <tt class=\"docutils literal\"><span class=\"pre\">find(s, pattern, start) &gt;= 0</span></tt>", 
    "code": "proc contains*(s: string; pattern: Regex; start = 0): bool"
  }, 
  {
    "name": "contains", 
    "type": "skProc", 
    "description": "same as <tt class=\"docutils literal\"><span class=\"pre\">find(s, pattern, matches, start) &gt;= 0</span></tt>", 
    "code": "proc contains*(s: string; pattern: Regex; matches: var openArray[string]; \u000A               start = 0): bool"
  }, 
  {
    "name": "startsWith", 
    "type": "skProc", 
    "description": "returns true if <cite>s</cite> starts with the pattern <cite>prefix</cite>", 
    "code": "proc startsWith*(s: string; prefix: Regex): bool"
  }, 
  {
    "name": "endsWith", 
    "type": "skProc", 
    "description": "returns true if <cite>s</cite> ends with the pattern <cite>prefix</cite>", 
    "code": "proc endsWith*(s: string; suffix: Regex): bool"
  }, 
  {
    "name": "replace", 
    "type": "skProc", 
    "description": "Replaces <cite>sub</cite> in <cite>s</cite> by the string <cite>by</cite>. Captures cannot be accessed in <cite>by</cite>. Examples:<pre><span class=\"StringLit\">&quot;var1=key; var2=key2&quot;</span><span class=\"Operator\">.</span><span class=\"Identifier\">replace</span><span class=\"Punctuation\">(</span><span class=\"RawData\">re&quot;(\\w+)'='(\\w+)&quot;</span><span class=\"Punctuation\">)</span></pre><p>Results in:</p>\u000A<pre><span class=\"StringLit\">&quot;; &quot;</span></pre>", 
    "code": "proc replace*(s: string; sub: Regex; by = \"\"): string"
  }, 
  {
    "name": "replacef", 
    "type": "skProc", 
    "description": "Replaces <cite>sub</cite> in <cite>s</cite> by the string <cite>by</cite>. Captures can be accessed in <cite>by</cite> with the notation <tt class=\"docutils literal\"><span class=\"pre\">$i</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">$#</span></tt> (see strutils.`%`). Examples:<p>&quot;var1=key; var2=key2&quot;.replacef(re&quot;(w+)'='(w+)&quot;, &quot;$1&lt;-$2$2&quot;)</p>\u000A<p>Results in:</p>\u000A<p>&quot;var1&lt;-keykey; val2&lt;-key2key2&quot;</p>\u000A", 
    "code": "proc replacef*(s: string; sub: Regex; by: string): string"
  }, 
  {
    "name": "parallelReplace", 
    "type": "skProc", 
    "description": "Returns a modified copy of <cite>s</cite> with the substitutions in <cite>subs</cite> applied in parallel.", 
    "code": "proc parallelReplace*(s: string; \u000A                      subs: openArray[tuple[pattern: Regex, repl: string]]): string"
  }, 
  {
    "name": "transformFile", 
    "type": "skProc", 
    "description": "reads in the file <cite>infile</cite>, performs a parallel replacement (calls <cite>parallelReplace</cite>) and writes back to <cite>outfile</cite>. Raises <tt class=\"docutils literal\"><span class=\"pre\">EIO</span></tt> if an error occurs. This is supposed to be used for quick scripting.", 
    "code": "proc transformFile*(infile, outfile: string; \u000A                    subs: openArray[tuple[pattern: Regex, repl: string]])"
  }, 
  {
    "name": "split", 
    "type": "skIterator", 
    "description": "<p>Splits the string <cite>s</cite> into substrings.</p>\u000A<p>Substrings are separated by the regular expression <cite>sep</cite>. Examples:</p>\u000A<pre><span class=\"Keyword\">for</span> <span class=\"Identifier\">word</span> <span class=\"Keyword\">in</span> <span class=\"Identifier\">split</span><span class=\"Punctuation\">(</span><span class=\"StringLit\">&quot;00232this02939is39an22example111&quot;</span><span class=\"Punctuation\">,</span> <span class=\"RawData\">re&quot;\\d+&quot;</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Identifier\">writeln</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">stdout</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">word</span><span class=\"Punctuation\">)</span></pre><p>Results in:</p>\u000A<pre><span class=\"StringLit\">&quot;this&quot;</span>\u000A<span class=\"StringLit\">&quot;is&quot;</span>\u000A<span class=\"StringLit\">&quot;an&quot;</span>\u000A<span class=\"StringLit\">&quot;example&quot;</span></pre>", 
    "code": "iterator split*(s: string; sep: Regex): string"
  }, 
  {
    "name": "split", 
    "type": "skProc", 
    "description": "Splits the string <cite>s</cite> into substrings.", 
    "code": "proc split*(s: string; sep: Regex): seq[string]"
  }, 
  {
    "name": "escapeRe", 
    "type": "skProc", 
    "description": "escapes <cite>s</cite> so that it is matched verbatim when used as a regular expression.", 
    "code": "proc escapeRe*(s: string): string"
  }, 
  {
    "name": "reURL", 
    "type": "skConst", 
    "description": "describes an URL", 
    "code": "reURL* = r\"\\b(http(s)?|ftp|gopher|telnet|file|notes|ms\\-help):\" &\u000A    r\"((//)|(\\\\\\\\))+[\\w\\d:#@%/;$()~_?\\+\\-\\=\\\\\\.\\&]*\\b\""
  }
]