[
  {
    "comment": "This module implements color handling for Nimrod. It is used by \u000A## the ``graphics`` module."
  }, 
  {
    "name": "Color", 
    "type": "skType", 
    "description": "a color stored as RGB", 
    "code": "Color* = distinct int"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "description": "compares two colors.", 
    "code": "proc `==`*(a, b: Color): bool {.borrow.}"
  }, 
  {
    "name": "`+`", 
    "type": "skProc", 
    "description": "adds two colors: This uses saturated artithmetic, so that each color component cannot overflow (255 is used as a maximum).", 
    "code": "proc `+`*(a, b: Color): Color"
  }, 
  {
    "name": "`-`", 
    "type": "skProc", 
    "description": "substracts two colors: This uses saturated artithmetic, so that each color component cannot overflow (255 is used as a maximum).", 
    "code": "proc `-`*(a, b: Color): Color"
  }, 
  {
    "name": "extractRGB", 
    "type": "skProc", 
    "description": "extracts the red/green/blue components of the color <cite>a</cite>.", 
    "code": "proc extractRGB*(a: Color): tuple[r, g, b: range[0 .. 255]]"
  }, 
  {
    "name": "intensity", 
    "type": "skProc", 
    "description": "returns <cite>a</cite> with intensity <cite>f</cite>. <cite>f</cite> should be a float from 0.0 (completely dark) to 1.0 (full color intensity).", 
    "code": "proc intensity*(a: Color; f: float): Color"
  }, 
  {
    "name": "mix", 
    "type": "skTemplate", 
    "description": "uses <cite>fn</cite> to mix the colors <cite>a</cite> and <cite>b</cite>. <cite>fn</cite> is invoked for each component R, G, and B. This is a template because <cite>fn</cite> should be inlined and the compiler cannot inline proc pointers yet. If <cite>fn</cite>'s result is not in the range[0..255], it will be saturated to be so.", 
    "code": "template mix*(a, b: Color; fn: expr): expr"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "converts a color into its textual representation. Example: <tt class=\"docutils literal\"><span class=\"pre\">#00FF00</span></tt>.", 
    "code": "proc `$`*(c: Color): string"
  }, 
  {
    "name": "parseColor", 
    "type": "skProc", 
    "description": "parses <cite>name</cite> to a color value. If no valid color could be parsed <tt class=\"docutils literal\"><span class=\"pre\">EInvalidValue</span></tt> is raised.", 
    "code": "proc parseColor*(name: string): Color"
  }, 
  {
    "name": "isColor", 
    "type": "skProc", 
    "description": "returns true if <cite>name</cite> is a known color name or a hexadecimal color prefixed with <tt class=\"docutils literal\"><span class=\"pre\">#</span></tt>.", 
    "code": "proc isColor*(name: string): bool"
  }, 
  {
    "name": "rgb", 
    "type": "skProc", 
    "description": "constructs a color from RGB values.", 
    "code": "proc rgb*(r, g, b: range[0 .. 255]): Color"
  }
]