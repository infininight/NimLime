[
  {
    "comment": "This module implements efficient computations of hash values for diverse\u000A## Nim types. All the procs are based on these two building blocks: the `!&\u000A## proc <#!&>`_ used to start or mix a hash value, and the `!$ proc <#!$>`_\u000A## used to *finish* the hash value.  If you want to implement hash procs for\u000A## your custom types you will end up writing the following kind of skeleton of\u000A## code:\u000A##\u000A## .. code-block:: Nim\u000A##  proc hash(x: Something): THash =\u000A##    ## Computes a THash from `x`.\u000A##    var h: THash = 0\u000A##    # Iterate over parts of `x`.\u000A##    for xAtom in x:\u000A##      # Mix the atom with the partial hash.\u000A##      h = h !& xAtom\u000A##    # Finish the hash.\u000A##    result = !$h\u000A##\u000A## If your custom types contain fields for which there already is a hash proc,\u000A## like for example objects made up of ``strings``, you can simply hash\u000A## together the hash value of the individual fields:\u000A##\u000A## .. code-block:: Nim\u000A##  proc hash(x: Something): THash =\u000A##    ## Computes a THash from `x`.\u000A##    var h: THash = 0\u000A##    h = h &! hash(x.foo)\u000A##    h = h &! hash(x.bar)\u000A##    result = !$h"
  }, 
  {
    "name": "THash", 
    "type": "skType", 
    "description": "a hash value; hash tables using these values should always have a size of a power of two and can use the <tt class=\"docutils literal\"><span class=\"pre\">and</span></tt> operator instead of <tt class=\"docutils literal\"><span class=\"pre\">mod</span></tt> for truncation of the hash value.", 
    "code": "THash* = int"
  }, 
  {
    "name": "`!&amp;`", 
    "type": "skProc", 
    "description": "mixes a hash value <cite>h</cite> with <cite>val</cite> to produce a new hash value. This is only needed if you need to implement a hash proc for a new datatype.", 
    "code": "proc `!&`*(h: THash; val: int): THash {.inline.}"
  }, 
  {
    "name": "`!$`", 
    "type": "skProc", 
    "description": "finishes the computation of the hash value. This is only needed if you need to implement a hash proc for a new datatype.", 
    "code": "proc `!$`*(h: THash): THash {.inline.}"
  }, 
  {
    "name": "hashData", 
    "type": "skProc", 
    "description": "hashes an array of bytes of size <cite>size</cite>", 
    "code": "proc hashData*(data: pointer; size: int): THash"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of pointers", 
    "code": "proc hash*(x: pointer): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of proc vars; closures are supported too.", 
    "code": "proc hash*[T: proc](x: T): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of integers", 
    "code": "proc hash*(x: int): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of integers", 
    "code": "proc hash*(x: int64): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of characters", 
    "code": "proc hash*(x: char): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of strings", 
    "code": "proc hash*(x: string): THash"
  }, 
  {
    "name": "hashIgnoreStyle", 
    "type": "skProc", 
    "description": "efficient hashing of strings; style is ignored", 
    "code": "proc hashIgnoreStyle*(x: string): THash"
  }, 
  {
    "name": "hashIgnoreCase", 
    "type": "skProc", 
    "description": "efficient hashing of strings; case is ignored", 
    "code": "proc hashIgnoreCase*(x: string): THash"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "description": "efficient hashing of tuples.", 
    "code": "proc hash*[T: tuple](x: T): THash"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "code": "proc hash*(x: float): THash {.inline.}"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "code": "proc hash*[A](x: openArray[A]): THash"
  }, 
  {
    "name": "hash", 
    "type": "skProc", 
    "code": "proc hash*[A](x: set[A]): THash"
  }
]