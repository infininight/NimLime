[
  {
    "name": "BIG_ENDIAN", 
    "type": "skConst", 
    "code": "BIG_ENDIAN* = 4321"
  }, 
  {
    "name": "AUDIO_S16SYS", 
    "type": "skConst", 
    "code": "AUDIO_S16SYS* = AUDIO_S16LSB"
  }, 
  {
    "name": "HAT_LEFTDOWN", 
    "type": "skConst", 
    "code": "HAT_LEFTDOWN* = HAT_LEFT or HAT_DOWN"
  }, 
  {
    "name": "TEventKind", 
    "type": "skType", 
    "code": "TEventKind* = enum \u000A  NOEVENT = 0, ACTIVEEVENT = 1, KEYDOWN = 2, KEYUP = 3, MOUSEMOTION = 4, \u000A  MOUSEBUTTONDOWN = 5, MOUSEBUTTONUP = 6, JOYAXISMOTION = 7, JOYBALLMOTION = 8, \u000A  JOYHATMOTION = 9, JOYBUTTONDOWN = 10, JOYBUTTONUP = 11, QUITEV = 12, \u000A  SYSWMEVENT = 13, EVENT_RESERVEDA = 14, EVENT_RESERVED = 15, VIDEORESIZE = 16, \u000A  VIDEOEXPOSE = 17, EVENT_RESERVED2 = 18, EVENT_RESERVED3 = 19, \u000A  EVENT_RESERVED4 = 20, EVENT_RESERVED5 = 21, EVENT_RESERVED6 = 22, \u000A  EVENT_RESERVED7 = 23, USEREVENT = 24"
  }, 
  {
    "name": "K_GP2X_CLICK", 
    "type": "skConst", 
    "code": "K_GP2X_CLICK* = 18"
  }, 
  {
    "name": "GRAB_ON", 
    "type": "skConst", 
    "code": "GRAB_ON* = 1"
  }, 
  {
    "name": "TUserEvent", 
    "type": "skType", 
    "code": "TUserEvent* {.final.} = object \u000A  kind*: TEventKind\u000A  code*: cint\u000A  data1*: pointer\u000A  data2*: pointer\u000A"
  }, 
  {
    "name": "TSysWm", 
    "type": "skType", 
    "code": "TSysWm* = enum \u000A  SYSWM_X11"
  }, 
  {
    "name": "TSysWMmsg", 
    "type": "skType", 
    "code": "TSysWMmsg* {.final.} = object \u000A  version*: Tversion\u000A  hwnd*: THandle\u000A  msg*: int\u000A  wParam*: int32\u000A  lParam*: int32\u000A"
  }, 
  {
    "name": "TSysWMinfo", 
    "type": "skType", 
    "code": "TSysWMinfo* {.final.} = object \u000A  version*: Tversion\u000A  window*: THandle\u000A"
  }, 
  {
    "name": "TCursor", 
    "type": "skType", 
    "code": "TCursor* {.final.} = object \u000A  area*: TRect\u000A  hotX*, hot_y*: int16\u000A  data*: ptr byte\u000A  mask*: ptr byte\u000A  save*: array[1 .. 2, ptr byte]\u000A  wmCursor*: pointer\u000A"
  }, 
  {
    "name": "TCond", 
    "type": "skType", 
    "code": "TCond* {.final.} = object "
  }, 
  {
    "name": "TSYS_ThreadHandle", 
    "type": "skType", 
    "code": "TSYS_ThreadHandle* = THandle"
  }, 
  {
    "name": "TSYS_ThreadHandle", 
    "type": "skType", 
    "code": "TSYS_ThreadHandle* = pointer"
  }, 
  {
    "name": "TWordArray", 
    "type": "skType", 
    "code": "TWordArray* = array[0 .. 16383, int16]"
  }, 
  {
    "name": "init", 
    "type": "skProc", 
    "code": "proc init*(flags: int32): int {.cdecl, importc: \"SDL_Init\", dynlib: LibName.}"
  }, 
  {
    "name": "initSubSystem", 
    "type": "skProc", 
    "code": "proc initSubSystem*(flags: int32): int {.cdecl, importc: \"SDL_InitSubSystem\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "quitSubSystem", 
    "type": "skProc", 
    "code": "proc quitSubSystem*(flags: int32) {.cdecl, importc: \"SDL_QuitSubSystem\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "wasInit", 
    "type": "skProc", 
    "code": "proc wasInit*(flags: int32): int32 {.cdecl, importc: \"SDL_WasInit\", \u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "quit", 
    "type": "skProc", 
    "code": "proc quit*() {.cdecl, importc: \"SDL_Quit\", dynlib: LibName.}"
  }, 
  {
    "name": "registerApp", 
    "type": "skProc", 
    "code": "proc registerApp*(name: cstring; style: int32; hInst: pointer): int {.cdecl, \u000A    importc: \"SDL_RegisterApp\", dynlib: LibName.}"
  }, 
  {
    "name": "tableSize", 
    "type": "skProc", 
    "code": "proc tableSize*(table: cstring): int"
  }, 
  {
    "name": "getError", 
    "type": "skProc", 
    "code": "proc getError*(): cstring {.cdecl, importc: \"SDL_GetError\", dynlib: LibName.}"
  }, 
  {
    "name": "setError", 
    "type": "skProc", 
    "code": "proc setError*(fmt: cstring) {.cdecl, importc: \"SDL_SetError\", dynlib: LibName.}"
  }, 
  {
    "name": "clearError", 
    "type": "skProc", 
    "code": "proc clearError*() {.cdecl, importc: \"SDL_ClearError\", dynlib: LibName.}"
  }, 
  {
    "name": "error", 
    "type": "skProc", 
    "code": "proc error*(Code: Terrorcode) {.cdecl, importc: \"SDL_Error\", dynlib: LibName.}"
  }, 
  {
    "name": "rwFromFile", 
    "type": "skProc", 
    "code": "proc rwFromFile*(filename, mode: cstring): PRWops {.cdecl, \u000A    importc: \"SDL_RWFromFile\", dynlib: LibName.}"
  }, 
  {
    "name": "freeRW", 
    "type": "skProc", 
    "code": "proc freeRW*(area: PRWops) {.cdecl, importc: \"SDL_FreeRW\", dynlib: LibName.}"
  }, 
  {
    "name": "rwFromFP", 
    "type": "skProc", 
    "code": "proc rwFromFP*(fp: pointer; autoclose: int): PRWops {.cdecl, \u000A    importc: \"SDL_RWFromFP\", dynlib: LibName.}"
  }, 
  {
    "name": "rwFromMem", 
    "type": "skProc", 
    "code": "proc rwFromMem*(mem: pointer; size: int): PRWops {.cdecl, \u000A    importc: \"SDL_RWFromMem\", dynlib: LibName.}"
  }, 
  {
    "name": "rwFromConstMem", 
    "type": "skProc", 
    "code": "proc rwFromConstMem*(mem: pointer; size: int): PRWops {.cdecl, \u000A    importc: \"SDL_RWFromConstMem\", dynlib: LibName.}"
  }, 
  {
    "name": "allocRW", 
    "type": "skProc", 
    "code": "proc allocRW*(): PRWops {.cdecl, importc: \"SDL_AllocRW\", dynlib: LibName.}"
  }, 
  {
    "name": "rwSeek", 
    "type": "skProc", 
    "code": "proc rwSeek*(context: PRWops; offset: int; whence: int): int"
  }, 
  {
    "name": "rwTell", 
    "type": "skProc", 
    "code": "proc rwTell*(context: PRWops): int"
  }, 
  {
    "name": "rwRead", 
    "type": "skProc", 
    "code": "proc rwRead*(context: PRWops; theptr: pointer; size: int; n: int): int"
  }, 
  {
    "name": "rwWrite", 
    "type": "skProc", 
    "code": "proc rwWrite*(context: PRWops; theptr: pointer; size: int; n: int): int"
  }, 
  {
    "name": "rwClose", 
    "type": "skProc", 
    "code": "proc rwClose*(context: PRWops): int"
  }, 
  {
    "name": "getTicks", 
    "type": "skProc", 
    "code": "proc getTicks*(): int32 {.cdecl, importc: \"SDL_GetTicks\", dynlib: LibName.}"
  }, 
  {
    "name": "delay", 
    "type": "skProc", 
    "code": "proc delay*(msec: int32) {.cdecl, importc: \"SDL_Delay\", dynlib: LibName.}"
  }, 
  {
    "name": "addTimer", 
    "type": "skProc", 
    "code": "proc addTimer*(interval: int32; callback: TNewTimerCallback; param: pointer): PTimerID {.\u000A    cdecl, importc: \"SDL_AddTimer\", dynlib: LibName.}"
  }, 
  {
    "name": "removeTimer", 
    "type": "skProc", 
    "code": "proc removeTimer*(t: PTimerID): TBool {.cdecl, importc: \"SDL_RemoveTimer\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "setTimer", 
    "type": "skProc", 
    "code": "proc setTimer*(interval: int32; callback: TTimerCallback): int {.cdecl, \u000A    importc: \"SDL_SetTimer\", dynlib: LibName.}"
  }, 
  {
    "name": "audioInit", 
    "type": "skProc", 
    "code": "proc audioInit*(driverName: cstring): int {.cdecl, importc: \"SDL_AudioInit\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "audioQuit", 
    "type": "skProc", 
    "code": "proc audioQuit*() {.cdecl, importc: \"SDL_AudioQuit\", dynlib: LibName.}"
  }, 
  {
    "name": "audioDriverName", 
    "type": "skProc", 
    "code": "proc audioDriverName*(namebuf: cstring; maxlen: int): cstring {.cdecl, \u000A    importc: \"SDL_AudioDriverName\", dynlib: LibName.}"
  }, 
  {
    "name": "openAudio", 
    "type": "skProc", 
    "code": "proc openAudio*(desired, obtained: PAudioSpec): int {.cdecl, \u000A    importc: \"SDL_OpenAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "getAudioStatus", 
    "type": "skProc", 
    "code": "proc getAudioStatus*(): TAudiostatus {.cdecl, importc: \"SDL_GetAudioStatus\", \u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "pauseAudio", 
    "type": "skProc", 
    "code": "proc pauseAudio*(pauseOn: int) {.cdecl, importc: \"SDL_PauseAudio\", \u000A                                 dynlib: LibName.}"
  }, 
  {
    "name": "loadWAV_RW", 
    "type": "skProc", 
    "code": "proc loadWAV_RW*(src: PRWops; freesrc: int; spec: PAudioSpec; \u000A                 audioBuf: ptr byte; audiolen: PUInt32): PAudioSpec {.cdecl, \u000A    importc: \"SDL_LoadWAV_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "loadWAV", 
    "type": "skProc", 
    "code": "proc loadWAV*(filename: cstring; spec: PAudioSpec; audioBuf: ptr byte; \u000A              audiolen: PUInt32): PAudioSpec"
  }, 
  {
    "name": "freeWAV", 
    "type": "skProc", 
    "code": "proc freeWAV*(audioBuf: ptr byte) {.cdecl, importc: \"SDL_FreeWAV\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "buildAudioCVT", 
    "type": "skProc", 
    "code": "proc buildAudioCVT*(cvt: PAudioCVT; srcFormat: uint16; srcChannels: byte; \u000A                    srcRate: int; dstFormat: uint16; dstChannels: byte; \u000A                    dstRate: int): int {.cdecl, importc: \"SDL_BuildAudioCVT\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "convertAudio", 
    "type": "skProc", 
    "code": "proc convertAudio*(cvt: PAudioCVT): int {.cdecl, importc: \"SDL_ConvertAudio\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "mixAudio", 
    "type": "skProc", 
    "code": "proc mixAudio*(dst, src: ptr byte; length: int32; volume: int) {.cdecl, \u000A    importc: \"SDL_MixAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "lockAudio", 
    "type": "skProc", 
    "code": "proc lockAudio*() {.cdecl, importc: \"SDL_LockAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "unlockAudio", 
    "type": "skProc", 
    "code": "proc unlockAudio*() {.cdecl, importc: \"SDL_UnlockAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "closeAudio", 
    "type": "skProc", 
    "code": "proc closeAudio*() {.cdecl, importc: \"SDL_CloseAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "cdNumDrives", 
    "type": "skProc", 
    "code": "proc cdNumDrives*(): int {.cdecl, importc: \"SDL_CDNumDrives\", dynlib: LibName.}"
  }, 
  {
    "name": "cdName", 
    "type": "skProc", 
    "code": "proc cdName*(drive: int): cstring {.cdecl, importc: \"SDL_CDName\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "cdOpen", 
    "type": "skProc", 
    "code": "proc cdOpen*(drive: int): PCD {.cdecl, importc: \"SDL_CDOpen\", dynlib: LibName.}"
  }, 
  {
    "name": "cdStatus", 
    "type": "skProc", 
    "code": "proc cdStatus*(cdrom: PCD): TCDStatus {.cdecl, importc: \"SDL_CDStatus\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "cdPlayTracks", 
    "type": "skProc", 
    "code": "proc cdPlayTracks*(cdrom: PCD; startTrack: int; startFrame: int; ntracks: int; \u000A                   nframes: int): int {.cdecl, importc: \"SDL_CDPlayTracks\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "cdPlay", 
    "type": "skProc", 
    "code": "proc cdPlay*(cdrom: PCD; start: int; len: int): int {.cdecl, \u000A    importc: \"SDL_CDPlay\", dynlib: LibName.}"
  }, 
  {
    "name": "cdPause", 
    "type": "skProc", 
    "code": "proc cdPause*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDPause\", dynlib: LibName.}"
  }, 
  {
    "name": "cdResume", 
    "type": "skProc", 
    "code": "proc cdResume*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDResume\", \u000A                                  dynlib: LibName.}"
  }, 
  {
    "name": "cdStop", 
    "type": "skProc", 
    "code": "proc cdStop*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDStop\", dynlib: LibName.}"
  }, 
  {
    "name": "cdEject", 
    "type": "skProc", 
    "code": "proc cdEject*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDEject\", dynlib: LibName.}"
  }, 
  {
    "name": "cdClose", 
    "type": "skProc", 
    "code": "proc cdClose*(cdrom: PCD) {.cdecl, importc: \"SDL_CDClose\", dynlib: LibName.}"
  }, 
  {
    "name": "cdInDrive", 
    "type": "skProc", 
    "code": "proc cdInDrive*(status: TCDStatus): bool"
  }, 
  {
    "name": "numJoysticks", 
    "type": "skProc", 
    "code": "proc numJoysticks*(): int {.cdecl, importc: \"SDL_NumJoysticks\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickName", 
    "type": "skProc", 
    "code": "proc joystickName*(index: int): cstring {.cdecl, importc: \"SDL_JoystickName\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "joystickOpen", 
    "type": "skProc", 
    "code": "proc joystickOpen*(index: int): PJoystick {.cdecl, importc: \"SDL_JoystickOpen\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "joystickOpened", 
    "type": "skProc", 
    "code": "proc joystickOpened*(index: int): int {.cdecl, importc: \"SDL_JoystickOpened\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "joystickIndex", 
    "type": "skProc", 
    "code": "proc joystickIndex*(joystick: PJoystick): int {.cdecl, \u000A    importc: \"SDL_JoystickIndex\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickNumAxes", 
    "type": "skProc", 
    "code": "proc joystickNumAxes*(joystick: PJoystick): int {.cdecl, \u000A    importc: \"SDL_JoystickNumAxes\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickNumBalls", 
    "type": "skProc", 
    "code": "proc joystickNumBalls*(joystick: PJoystick): int {.cdecl, \u000A    importc: \"SDL_JoystickNumBalls\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickNumHats", 
    "type": "skProc", 
    "code": "proc joystickNumHats*(joystick: PJoystick): int {.cdecl, \u000A    importc: \"SDL_JoystickNumHats\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickNumButtons", 
    "type": "skProc", 
    "code": "proc joystickNumButtons*(joystick: PJoystick): int {.cdecl, \u000A    importc: \"SDL_JoystickNumButtons\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickUpdate", 
    "type": "skProc", 
    "code": "proc joystickUpdate*() {.cdecl, importc: \"SDL_JoystickUpdate\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickEventState", 
    "type": "skProc", 
    "code": "proc joystickEventState*(state: int): int {.cdecl, \u000A    importc: \"SDL_JoystickEventState\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickGetAxis", 
    "type": "skProc", 
    "code": "proc joystickGetAxis*(joystick: PJoystick; axis: int): int16 {.cdecl, \u000A    importc: \"SDL_JoystickGetAxis\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickGetHat", 
    "type": "skProc", 
    "code": "proc joystickGetHat*(joystick: PJoystick; hat: int): byte {.cdecl, \u000A    importc: \"SDL_JoystickGetHat\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickGetBall", 
    "type": "skProc", 
    "code": "proc joystickGetBall*(joystick: PJoystick; ball: int; dx: var int; dy: var int): int {.\u000A    cdecl, importc: \"SDL_JoystickGetBall\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickGetButton", 
    "type": "skProc", 
    "code": "proc joystickGetButton*(joystick: PJoystick; button: int): byte {.cdecl, \u000A    importc: \"SDL_JoystickGetButton\", dynlib: LibName.}"
  }, 
  {
    "name": "joystickClose", 
    "type": "skProc", 
    "code": "proc joystickClose*(joystick: PJoystick) {.cdecl, importc: \"SDL_JoystickClose\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "pumpEvents", 
    "type": "skProc", 
    "code": "proc pumpEvents*() {.cdecl, importc: \"SDL_PumpEvents\", dynlib: LibName.}"
  }, 
  {
    "name": "peepEvents", 
    "type": "skProc", 
    "code": "proc peepEvents*(events: PEvent; numevents: int; action: TEventAction; \u000A                 mask: int32): int {.cdecl, importc: \"SDL_PeepEvents\", \u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "pollEvent", 
    "type": "skProc", 
    "code": "proc pollEvent*(event: PEvent): int {.cdecl, importc: \"SDL_PollEvent\", \u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "waitEvent", 
    "type": "skProc", 
    "code": "proc waitEvent*(event: PEvent): int {.cdecl, importc: \"SDL_WaitEvent\", \u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "pushEvent", 
    "type": "skProc", 
    "code": "proc pushEvent*(event: PEvent): int {.cdecl, importc: \"SDL_PushEvent\", \u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "setEventFilter", 
    "type": "skProc", 
    "code": "proc setEventFilter*(filter: TEventFilter) {.cdecl, \u000A    importc: \"SDL_SetEventFilter\", dynlib: LibName.}"
  }, 
  {
    "name": "getEventFilter", 
    "type": "skProc", 
    "code": "proc getEventFilter*(): TEventFilter {.cdecl, importc: \"SDL_GetEventFilter\", \u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "eventState", 
    "type": "skProc", 
    "code": "proc eventState*(theType: byte; state: int): byte {.cdecl, \u000A    importc: \"SDL_EventState\", dynlib: LibName.}"
  }, 
  {
    "name": "version", 
    "type": "skProc", 
    "code": "proc version*(x: var Tversion)"
  }, 
  {
    "name": "versionnum", 
    "type": "skProc", 
    "code": "proc versionnum*(x, y, z: int): int"
  }, 
  {
    "name": "compiledversion", 
    "type": "skProc", 
    "code": "proc compiledversion*(): int"
  }, 
  {
    "name": "versionAtleast", 
    "type": "skProc", 
    "code": "proc versionAtleast*(x, y, z: int): bool"
  }, 
  {
    "name": "linkedVersion", 
    "type": "skProc", 
    "code": "proc linkedVersion*(): PVersion {.cdecl, importc: \"SDL_Linked_Version\", \u000A                                  dynlib: LibName.}"
  }, 
  {
    "name": "videoInit", 
    "type": "skProc", 
    "code": "proc videoInit*(driverName: cstring; flags: int32): int {.cdecl, \u000A    importc: \"SDL_VideoInit\", dynlib: LibName.}"
  }, 
  {
    "name": "videoQuit", 
    "type": "skProc", 
    "code": "proc videoQuit*() {.cdecl, importc: \"SDL_VideoQuit\", dynlib: LibName.}"
  }, 
  {
    "name": "videoDriverName", 
    "type": "skProc", 
    "code": "proc videoDriverName*(namebuf: cstring; maxlen: int): cstring {.cdecl, \u000A    importc: \"SDL_VideoDriverName\", dynlib: LibName.}"
  }, 
  {
    "name": "getVideoSurface", 
    "type": "skProc", 
    "code": "proc getVideoSurface*(): PSurface {.cdecl, importc: \"SDL_GetVideoSurface\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "getVideoInfo", 
    "type": "skProc", 
    "code": "proc getVideoInfo*(): PVideoInfo {.cdecl, importc: \"SDL_GetVideoInfo\", \u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "videoModeOK", 
    "type": "skProc", 
    "code": "proc videoModeOK*(width, height, bpp: int; flags: int32): int {.cdecl, \u000A    importc: \"SDL_VideoModeOK\", importc: \"SDL_VideoModeOK\", dynlib: LibName.}"
  }, 
  {
    "name": "listModes", 
    "type": "skProc", 
    "code": "proc listModes*(format: PPixelFormat; flags: int32): PPSDL_Rect {.cdecl, \u000A    importc: \"SDL_ListModes\", dynlib: LibName.}"
  }, 
  {
    "name": "setVideoMode", 
    "type": "skProc", 
    "code": "proc setVideoMode*(width, height, bpp: int; flags: uint32): PSurface {.cdecl, \u000A    importc: \"SDL_SetVideoMode\", dynlib: LibName.}"
  }, 
  {
    "name": "updateRects", 
    "type": "skProc", 
    "code": "proc updateRects*(screen: PSurface; numrects: int; rects: PRect) {.cdecl, \u000A    importc: \"SDL_UpdateRects\", dynlib: LibName.}"
  }, 
  {
    "name": "updateRect", 
    "type": "skProc", 
    "code": "proc updateRect*(screen: PSurface; x, y: int32; w, h: int32) {.cdecl, \u000A    importc: \"SDL_UpdateRect\", dynlib: LibName.}"
  }, 
  {
    "name": "flip", 
    "type": "skProc", 
    "code": "proc flip*(screen: PSurface): int {.cdecl, importc: \"SDL_Flip\", dynlib: LibName.}"
  }, 
  {
    "name": "setGamma", 
    "type": "skProc", 
    "code": "proc setGamma*(redgamma: float32; greengamma: float32; bluegamma: float32): int {.\u000A    cdecl, importc: \"SDL_SetGamma\", dynlib: LibName.}"
  }, 
  {
    "name": "setGammaRamp", 
    "type": "skProc", 
    "code": "proc setGammaRamp*(redtable: PUInt16; greentable: PUInt16; bluetable: PUInt16): int {.\u000A    cdecl, importc: \"SDL_SetGammaRamp\", dynlib: LibName.}"
  }, 
  {
    "name": "getGammaRamp", 
    "type": "skProc", 
    "code": "proc getGammaRamp*(redtable: PUInt16; greentable: PUInt16; bluetable: PUInt16): int {.\u000A    cdecl, importc: \"SDL_GetGammaRamp\", dynlib: LibName.}"
  }, 
  {
    "name": "setColors", 
    "type": "skProc", 
    "code": "proc setColors*(surface: PSurface; colors: PColor; firstcolor: int; ncolors: int): int {.\u000A    cdecl, importc: \"SDL_SetColors\", dynlib: LibName.}"
  }, 
  {
    "name": "setPalette", 
    "type": "skProc", 
    "code": "proc setPalette*(surface: PSurface; flags: int; colors: PColor; firstcolor: int; \u000A                 ncolors: int): int {.cdecl, importc: \"SDL_SetPalette\", \u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "mapRGB", 
    "type": "skProc", 
    "code": "proc mapRGB*(format: PPixelFormat; r: byte; g: byte; b: byte): int32 {.cdecl, \u000A    importc: \"SDL_MapRGB\", dynlib: LibName.}"
  }, 
  {
    "name": "mapRGBA", 
    "type": "skProc", 
    "code": "proc mapRGBA*(format: PPixelFormat; r: byte; g: byte; b: byte; a: byte): int32 {.\u000A    cdecl, importc: \"SDL_MapRGBA\", dynlib: LibName.}"
  }, 
  {
    "name": "getRGB", 
    "type": "skProc", 
    "code": "proc getRGB*(pixel: int32; fmt: PPixelFormat; r: ptr byte; g: ptr byte; \u000A             b: ptr byte) {.cdecl, importc: \"SDL_GetRGB\", dynlib: LibName.}"
  }, 
  {
    "name": "getRGBA", 
    "type": "skProc", 
    "code": "proc getRGBA*(pixel: int32; fmt: PPixelFormat; r: ptr byte; g: ptr byte; \u000A              b: ptr byte; a: ptr byte) {.cdecl, importc: \"SDL_GetRGBA\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "allocSurface", 
    "type": "skProc", 
    "code": "proc allocSurface*(flags: int32; width, height, depth: int; \u000A                   rMask, gMask, bMask, aMask: int32): PSurface"
  }, 
  {
    "name": "createRGBSurface", 
    "type": "skProc", 
    "code": "proc createRGBSurface*(flags: int32; width, height, depth: int; \u000A                       rMask, gMask, bMask, aMask: int32): PSurface {.cdecl, \u000A    importc: \"SDL_CreateRGBSurface\", dynlib: LibName.}"
  }, 
  {
    "name": "createRGBSurfaceFrom", 
    "type": "skProc", 
    "code": "proc createRGBSurfaceFrom*(pixels: pointer; width, height, depth, pitch: int; \u000A                           rMask, gMask, bMask, aMask: int32): PSurface {.cdecl, \u000A    importc: \"SDL_CreateRGBSurfaceFrom\", dynlib: LibName.}"
  }, 
  {
    "name": "freeSurface", 
    "type": "skProc", 
    "code": "proc freeSurface*(surface: PSurface) {.cdecl, importc: \"SDL_FreeSurface\", \u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "mustLock", 
    "type": "skProc", 
    "code": "proc mustLock*(surface: PSurface): bool"
  }, 
  {
    "name": "lockSurface", 
    "type": "skProc", 
    "code": "proc lockSurface*(surface: PSurface): int {.cdecl, importc: \"SDL_LockSurface\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "unlockSurface", 
    "type": "skProc", 
    "code": "proc unlockSurface*(surface: PSurface) {.cdecl, importc: \"SDL_UnlockSurface\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "loadBMP_RW", 
    "type": "skProc", 
    "code": "proc loadBMP_RW*(src: PRWops; freesrc: int): PSurface {.cdecl, \u000A    importc: \"SDL_LoadBMP_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "loadBMP", 
    "type": "skProc", 
    "code": "proc loadBMP*(filename: cstring): PSurface"
  }, 
  {
    "name": "saveBMP_RW", 
    "type": "skProc", 
    "code": "proc saveBMP_RW*(surface: PSurface; dst: PRWops; freedst: int): int {.cdecl, \u000A    importc: \"SDL_SaveBMP_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "saveBMP", 
    "type": "skProc", 
    "code": "proc saveBMP*(surface: PSurface; filename: cstring): int"
  }, 
  {
    "name": "setColorKey", 
    "type": "skProc", 
    "code": "proc setColorKey*(surface: PSurface; flag, key: int32): int {.cdecl, \u000A    importc: \"SDL_SetColorKey\", dynlib: LibName.}"
  }, 
  {
    "name": "setAlpha", 
    "type": "skProc", 
    "code": "proc setAlpha*(surface: PSurface; flag: int32; alpha: byte): int {.cdecl, \u000A    importc: \"SDL_SetAlpha\", dynlib: LibName.}"
  }, 
  {
    "name": "setClipRect", 
    "type": "skProc", 
    "code": "proc setClipRect*(surface: PSurface; rect: PRect) {.cdecl, \u000A    importc: \"SDL_SetClipRect\", dynlib: LibName.}"
  }, 
  {
    "name": "getClipRect", 
    "type": "skProc", 
    "code": "proc getClipRect*(surface: PSurface; rect: PRect) {.cdecl, \u000A    importc: \"SDL_GetClipRect\", dynlib: LibName.}"
  }, 
  {
    "name": "convertSurface", 
    "type": "skProc", 
    "code": "proc convertSurface*(src: PSurface; fmt: PPixelFormat; flags: int32): PSurface {.\u000A    cdecl, importc: \"SDL_ConvertSurface\", dynlib: LibName.}"
  }, 
  {
    "name": "blitSurface", 
    "type": "skProc", 
    "code": "proc blitSurface*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int"
  }, 
  {
    "name": "upperBlit", 
    "type": "skProc", 
    "code": "proc upperBlit*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int {.\u000A    cdecl, importc: \"SDL_UpperBlit\", dynlib: LibName.}"
  }, 
  {
    "name": "lowerBlit", 
    "type": "skProc", 
    "code": "proc lowerBlit*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int {.\u000A    cdecl, importc: \"SDL_LowerBlit\", dynlib: LibName.}"
  }, 
  {
    "name": "fillRect", 
    "type": "skProc", 
    "code": "proc fillRect*(dst: PSurface; dstrect: PRect; color: int32): int {.cdecl, \u000A    importc: \"SDL_FillRect\", dynlib: LibName.}"
  }, 
  {
    "name": "displayFormat", 
    "type": "skProc", 
    "code": "proc displayFormat*(surface: PSurface): PSurface {.cdecl, \u000A    importc: \"SDL_DisplayFormat\", dynlib: LibName.}"
  }, 
  {
    "name": "displayFormatAlpha", 
    "type": "skProc", 
    "code": "proc displayFormatAlpha*(surface: PSurface): PSurface {.cdecl, \u000A    importc: \"SDL_DisplayFormatAlpha\", dynlib: LibName.}"
  }, 
  {
    "name": "createYUVOverlay", 
    "type": "skProc", 
    "code": "proc createYUVOverlay*(width: int; height: int; format: int32; display: PSurface): POverlay {.\u000A    cdecl, importc: \"SDL_CreateYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "lockYUVOverlay", 
    "type": "skProc", 
    "code": "proc lockYUVOverlay*(overlay: POverlay): int {.cdecl, \u000A    importc: \"SDL_LockYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "unlockYUVOverlay", 
    "type": "skProc", 
    "code": "proc unlockYUVOverlay*(overlay: POverlay) {.cdecl, \u000A    importc: \"SDL_UnlockYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "displayYUVOverlay", 
    "type": "skProc", 
    "code": "proc displayYUVOverlay*(overlay: POverlay; dstrect: PRect): int {.cdecl, \u000A    importc: \"SDL_DisplayYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "freeYUVOverlay", 
    "type": "skProc", 
    "code": "proc freeYUVOverlay*(overlay: POverlay) {.cdecl, importc: \"SDL_FreeYUVOverlay\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "glLoadLibrary", 
    "type": "skProc", 
    "code": "proc glLoadLibrary*(filename: cstring): int {.cdecl, \u000A    importc: \"SDL_GL_LoadLibrary\", dynlib: LibName.}"
  }, 
  {
    "name": "glGetProcAddress", 
    "type": "skProc", 
    "code": "proc glGetProcAddress*(procname: cstring): pointer {.cdecl, \u000A    importc: \"SDL_GL_GetProcAddress\", dynlib: LibName.}"
  }, 
  {
    "name": "glSetAttribute", 
    "type": "skProc", 
    "code": "proc glSetAttribute*(attr: TGLAttr; value: int): int {.cdecl, \u000A    importc: \"SDL_GL_SetAttribute\", dynlib: LibName.}"
  }, 
  {
    "name": "glGetAttribute", 
    "type": "skProc", 
    "code": "proc glGetAttribute*(attr: TGLAttr; value: var int): int {.cdecl, \u000A    importc: \"SDL_GL_GetAttribute\", dynlib: LibName.}"
  }, 
  {
    "name": "glSwapBuffers", 
    "type": "skProc", 
    "code": "proc glSwapBuffers*() {.cdecl, importc: \"SDL_GL_SwapBuffers\", dynlib: LibName.}"
  }, 
  {
    "name": "glUpdateRects", 
    "type": "skProc", 
    "code": "proc glUpdateRects*(numrects: int; rects: PRect) {.cdecl, \u000A    importc: \"SDL_GL_UpdateRects\", dynlib: LibName.}"
  }, 
  {
    "name": "glLock", 
    "type": "skProc", 
    "code": "proc glLock*() {.cdecl, importc: \"SDL_GL_Lock\", dynlib: LibName.}"
  }, 
  {
    "name": "glUnlock", 
    "type": "skProc", 
    "code": "proc glUnlock*() {.cdecl, importc: \"SDL_GL_Unlock\", dynlib: LibName.}"
  }, 
  {
    "name": "wmGetCaption", 
    "type": "skProc", 
    "code": "proc wmGetCaption*(title: var cstring; icon: var cstring) {.cdecl, \u000A    importc: \"SDL_WM_GetCaption\", dynlib: LibName.}"
  }, 
  {
    "name": "wmSetCaption", 
    "type": "skProc", 
    "code": "proc wmSetCaption*(title: cstring; icon: cstring) {.cdecl, \u000A    importc: \"SDL_WM_SetCaption\", dynlib: LibName.}"
  }, 
  {
    "name": "wmSetIcon", 
    "type": "skProc", 
    "code": "proc wmSetIcon*(icon: PSurface; mask: byte) {.cdecl, importc: \"SDL_WM_SetIcon\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "wmIconifyWindow", 
    "type": "skProc", 
    "code": "proc wmIconifyWindow*(): int {.cdecl, importc: \"SDL_WM_IconifyWindow\", \u000A                               dynlib: LibName.}"
  }, 
  {
    "name": "wmToggleFullScreen", 
    "type": "skProc", 
    "code": "proc wmToggleFullScreen*(surface: PSurface): int {.cdecl, \u000A    importc: \"SDL_WM_ToggleFullScreen\", dynlib: LibName.}"
  }, 
  {
    "name": "wmGrabInput", 
    "type": "skProc", 
    "code": "proc wmGrabInput*(mode: TGrabMode): TGrabMode {.cdecl, \u000A    importc: \"SDL_WM_GrabInput\", dynlib: LibName.}"
  }, 
  {
    "name": "getMouseState", 
    "type": "skProc", 
    "code": "proc getMouseState*(x: var int; y: var int): byte {.cdecl, \u000A    importc: \"SDL_GetMouseState\", dynlib: LibName.}"
  }, 
  {
    "name": "getRelativeMouseState", 
    "type": "skProc", 
    "code": "proc getRelativeMouseState*(x: var int; y: var int): byte {.cdecl, \u000A    importc: \"SDL_GetRelativeMouseState\", dynlib: LibName.}"
  }, 
  {
    "name": "warpMouse", 
    "type": "skProc", 
    "code": "proc warpMouse*(x, y: uint16) {.cdecl, importc: \"SDL_WarpMouse\", dynlib: LibName.}"
  }, 
  {
    "name": "createCursor", 
    "type": "skProc", 
    "code": "proc createCursor*(data, mask: ptr byte; w, h, hotX, hotY: int): PCursor {.\u000A    cdecl, importc: \"SDL_CreateCursor\", dynlib: LibName.}"
  }, 
  {
    "name": "setCursor", 
    "type": "skProc", 
    "code": "proc setCursor*(cursor: PCursor) {.cdecl, importc: \"SDL_SetCursor\", \u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "getCursor", 
    "type": "skProc", 
    "code": "proc getCursor*(): PCursor {.cdecl, importc: \"SDL_GetCursor\", dynlib: LibName.}"
  }, 
  {
    "name": "freeCursor", 
    "type": "skProc", 
    "code": "proc freeCursor*(cursor: PCursor) {.cdecl, importc: \"SDL_FreeCursor\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "showCursor", 
    "type": "skProc", 
    "code": "proc showCursor*(toggle: int): int {.cdecl, importc: \"SDL_ShowCursor\", \u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "button", 
    "type": "skProc", 
    "code": "proc button*(b: int): int"
  }, 
  {
    "name": "enableUNICODE", 
    "type": "skProc", 
    "code": "proc enableUNICODE*(enable: int): int {.cdecl, importc: \"SDL_EnableUNICODE\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "enableKeyRepeat", 
    "type": "skProc", 
    "code": "proc enableKeyRepeat*(delay: int; interval: int): int {.cdecl, \u000A    importc: \"SDL_EnableKeyRepeat\", dynlib: LibName.}"
  }, 
  {
    "name": "getKeyRepeat", 
    "type": "skProc", 
    "code": "proc getKeyRepeat*(delay: PInteger; interval: PInteger) {.cdecl, \u000A    importc: \"SDL_GetKeyRepeat\", dynlib: LibName.}"
  }, 
  {
    "name": "getKeyState", 
    "type": "skProc", 
    "code": "proc getKeyState*(numkeys: pointer): ptr byte {.cdecl, \u000A    importc: \"SDL_GetKeyState\", dynlib: LibName.}"
  }, 
  {
    "name": "getModState", 
    "type": "skProc", 
    "code": "proc getModState*(): TMod {.cdecl, importc: \"SDL_GetModState\", dynlib: LibName.}"
  }, 
  {
    "name": "setModState", 
    "type": "skProc", 
    "code": "proc setModState*(modstate: TMod) {.cdecl, importc: \"SDL_SetModState\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "getKeyName", 
    "type": "skProc", 
    "code": "proc getKeyName*(key: TKey): cstring {.cdecl, importc: \"SDL_GetKeyName\", \u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "getAppState", 
    "type": "skProc", 
    "code": "proc getAppState*(): byte {.cdecl, importc: \"SDL_GetAppState\", dynlib: LibName.}"
  }, 
  {
    "name": "createMutex", 
    "type": "skProc", 
    "code": "proc createMutex*(): PMutex {.cdecl, importc: \"SDL_CreateMutex\", dynlib: LibName.}"
  }, 
  {
    "name": "mutexP", 
    "type": "skProc", 
    "code": "proc mutexP*(mutex: PMutex): int {.cdecl, importc: \"SDL_mutexP\", dynlib: LibName.}"
  }, 
  {
    "name": "lockMutex", 
    "type": "skProc", 
    "code": "proc lockMutex*(mutex: PMutex): int"
  }, 
  {
    "name": "mutexV", 
    "type": "skProc", 
    "code": "proc mutexV*(mutex: PMutex): int {.cdecl, importc: \"SDL_mutexV\", dynlib: LibName.}"
  }, 
  {
    "name": "unlockMutex", 
    "type": "skProc", 
    "code": "proc unlockMutex*(mutex: PMutex): int"
  }, 
  {
    "name": "destroyMutex", 
    "type": "skProc", 
    "code": "proc destroyMutex*(mutex: PMutex) {.cdecl, importc: \"SDL_DestroyMutex\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "createSemaphore", 
    "type": "skProc", 
    "code": "proc createSemaphore*(initialValue: int32): PSem {.cdecl, \u000A    importc: \"SDL_CreateSemaphore\", dynlib: LibName.}"
  }, 
  {
    "name": "destroySemaphore", 
    "type": "skProc", 
    "code": "proc destroySemaphore*(sem: PSem) {.cdecl, importc: \"SDL_DestroySemaphore\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "semWait", 
    "type": "skProc", 
    "code": "proc semWait*(sem: PSem): int {.cdecl, importc: \"SDL_SemWait\", dynlib: LibName.}"
  }, 
  {
    "name": "semTryWait", 
    "type": "skProc", 
    "code": "proc semTryWait*(sem: PSem): int {.cdecl, importc: \"SDL_SemTryWait\", \u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "semWaitTimeout", 
    "type": "skProc", 
    "code": "proc semWaitTimeout*(sem: PSem; ms: int32): int {.cdecl, \u000A    importc: \"SDL_SemWaitTimeout\", dynlib: LibName.}"
  }, 
  {
    "name": "semPost", 
    "type": "skProc", 
    "code": "proc semPost*(sem: PSem): int {.cdecl, importc: \"SDL_SemPost\", dynlib: LibName.}"
  }, 
  {
    "name": "semValue", 
    "type": "skProc", 
    "code": "proc semValue*(sem: PSem): int32 {.cdecl, importc: \"SDL_SemValue\", \u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "createCond", 
    "type": "skProc", 
    "code": "proc createCond*(): PCond {.cdecl, importc: \"SDL_CreateCond\", dynlib: LibName.}"
  }, 
  {
    "name": "destroyCond", 
    "type": "skProc", 
    "code": "proc destroyCond*(cond: PCond) {.cdecl, importc: \"SDL_DestroyCond\", \u000A                                 dynlib: LibName.}"
  }, 
  {
    "name": "condSignal", 
    "type": "skProc", 
    "code": "proc condSignal*(cond: PCond): int {.cdecl, importc: \"SDL_CondSignal\", \u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "condBroadcast", 
    "type": "skProc", 
    "code": "proc condBroadcast*(cond: PCond): int {.cdecl, importc: \"SDL_CondBroadcast\", \u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "condWait", 
    "type": "skProc", 
    "code": "proc condWait*(cond: PCond; mut: PMutex): int {.cdecl, importc: \"SDL_CondWait\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "condWaitTimeout", 
    "type": "skProc", 
    "code": "proc condWaitTimeout*(cond: PCond; mut: PMutex; ms: int32): int {.cdecl, \u000A    importc: \"SDL_CondWaitTimeout\", dynlib: LibName.}"
  }, 
  {
    "name": "createThread", 
    "type": "skProc", 
    "code": "proc createThread*(fn, data: pointer): PThread {.cdecl, \u000A    importc: \"SDL_CreateThread\", dynlib: LibName.}"
  }, 
  {
    "name": "threadID", 
    "type": "skProc", 
    "code": "proc threadID*(): int32 {.cdecl, importc: \"SDL_ThreadID\", dynlib: LibName.}"
  }, 
  {
    "name": "getThreadID", 
    "type": "skProc", 
    "code": "proc getThreadID*(thread: PThread): int32 {.cdecl, importc: \"SDL_GetThreadID\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "waitThread", 
    "type": "skProc", 
    "code": "proc waitThread*(thread: PThread; status: var int) {.cdecl, \u000A    importc: \"SDL_WaitThread\", dynlib: LibName.}"
  }, 
  {
    "name": "killThread", 
    "type": "skProc", 
    "code": "proc killThread*(thread: PThread) {.cdecl, importc: \"SDL_KillThread\", \u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "getWMInfo", 
    "type": "skProc", 
    "code": "proc getWMInfo*(info: PSysWMinfo): int {.cdecl, importc: \"SDL_GetWMInfo\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "loadObject", 
    "type": "skProc", 
    "code": "proc loadObject*(sofile: cstring): pointer {.cdecl, importc: \"SDL_LoadObject\", \u000A    dynlib: LibName.}"
  }, 
  {
    "name": "loadFunction", 
    "type": "skProc", 
    "code": "proc loadFunction*(handle: pointer; name: cstring): pointer {.cdecl, \u000A    importc: \"SDL_LoadFunction\", dynlib: LibName.}"
  }, 
  {
    "name": "unloadObject", 
    "type": "skProc", 
    "code": "proc unloadObject*(handle: pointer) {.cdecl, importc: \"SDL_UnloadObject\", \u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "swap32", 
    "type": "skProc", 
    "code": "proc swap32*(d: int32): int32"
  }, 
  {
    "name": "isBitOn", 
    "type": "skProc", 
    "code": "proc isBitOn*(value: int; bit: int8): bool"
  }, 
  {
    "name": "turnBitOn", 
    "type": "skProc", 
    "code": "proc turnBitOn*(value: int; bit: int8): int"
  }, 
  {
    "name": "turnBitOff", 
    "type": "skProc", 
    "code": "proc turnBitOff*(value: int; bit: int8): int"
  }, 
  {
    "name": "framesToMsf", 
    "type": "skProc", 
    "code": "proc framesToMsf*(frames: int; m, s, f: var int)"
  }, 
  {
    "name": "msfToFrames", 
    "type": "skProc", 
    "code": "proc msfToFrames*(m, s, f: int): int"
  }
]