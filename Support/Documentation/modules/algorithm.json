[
  {
    "comment": "This module implements some common generic algorithms."
  }, 
  {
    "name": "SortOrder", 
    "type": "skType", 
    "description": "sort order", 
    "code": "SortOrder* = enum \u000A  Descending, Ascending"
  }, 
  {
    "name": "`*`", 
    "type": "skProc", 
    "description": "flips <cite>x</cite> if <tt class=\"docutils literal\"><span class=\"pre\">order == Descending</span></tt>; if <tt class=\"docutils literal\"><span class=\"pre\">order == Ascending</span></tt> then <cite>x</cite> is returned. <cite>x</cite> is supposed to be the result of a comparator, ie <tt class=\"docutils literal\"><span class=\"pre\">&lt; 0</span></tt> for <em>less than</em>, <tt class=\"docutils literal\"><span class=\"pre\">== 0</span></tt> for <em>equal</em>, <tt class=\"docutils literal\"><span class=\"pre\">&gt; 0</span></tt> for <em>greater than</em>.", 
    "code": "proc `*`*(x: int; order: SortOrder): int {.inline.}"
  }, 
  {
    "name": "reverse", 
    "type": "skProc", 
    "description": "reverses the array <tt class=\"docutils literal\"><span class=\"pre\">a[first..last]</span></tt>.", 
    "code": "proc reverse*[T](a: var openArray[T]; first, last: int)"
  }, 
  {
    "name": "reverse", 
    "type": "skProc", 
    "description": "reverses the array <cite>a</cite>.", 
    "code": "proc reverse*[T](a: var openArray[T])"
  }, 
  {
    "name": "reversed", 
    "type": "skProc", 
    "description": "returns the reverse of the array <cite>a[first..last]</cite>.", 
    "code": "proc reversed*[T](a: openArray[T]; first, last: int): seq[T]"
  }, 
  {
    "name": "reversed", 
    "type": "skProc", 
    "description": "returns the reverse of the array <cite>a</cite>.", 
    "code": "proc reversed*[T](a: openArray[T]): seq[T]"
  }, 
  {
    "name": "binarySearch", 
    "type": "skProc", 
    "description": "binary search for <cite>key</cite> in <cite>a</cite>. Returns -1 if not found.", 
    "code": "proc binarySearch*[T](a: openArray[T]; key: T): int"
  }, 
  {
    "name": "smartBinarySearch", 
    "type": "skProc", 
    "description": "<tt class=\"docutils literal\"><span class=\"pre\">a.len</span></tt> must be a power of 2 for this to work.", 
    "code": "proc smartBinarySearch*[T](a: openArray[T]; key: T): int"
  }, 
  {
    "name": "lowerBound", 
    "type": "skProc", 
    "description": "<p>same as binarySearch except that if key is not in <cite>a</cite> then this returns the location where <cite>key</cite> would be if it were. In other words if you have a sorted sequence and you call insert(thing, elm, lowerBound(thing, elm)) the sequence will still be sorted</p>\u000A<p><cite>cmp</cite> is the comparator function to use, the expected return values are the same as that of system.cmp</p>\u000A<p>example:<pre>\u000Avar arr = @[1,2,3,5,6,7,8,9]\u000Aarr.insert(4, arr.lowerBound(4))</pre>\u000A</p>\u000A<p><cite>after running the above arr is `[1,2,3,4,5,6,7,8,9]</cite></p>\u000A", 
    "code": "proc lowerBound*[T](a: openArray[T]; key: T; cmp: proc (x, y: T): int {.closure.}): int"
  }, 
  {
    "name": "lowerBound", 
    "type": "skProc", 
    "code": "proc lowerBound*[T](a: openArray[T]; key: T): int"
  }, 
  {
    "name": "sort", 
    "type": "skProc", 
    "description": "Default Nim sort. The sorting is guaranteed to be stable and the worst case is guaranteed to be O(n log n). The current implementation uses an iterative mergesort to achieve this. It uses a temporary sequence of length <tt class=\"docutils literal\"><span class=\"pre\">a.len div 2</span></tt>. Currently Nim does not support a sensible default argument for <tt class=\"docutils literal\"><span class=\"pre\">cmp</span></tt>, so you have to provide one of your own. However, the <tt class=\"docutils literal\"><span class=\"pre\">system.cmp</span></tt> procs can be used:<pre><span class=\"Identifier\">sort</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">myIntArray</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">system</span><span class=\"Operator\">.</span><span class=\"Identifier\">cmp</span><span class=\"Punctuation\">[</span><span class=\"Identifier\">int</span><span class=\"Punctuation\">]</span><span class=\"Punctuation\">)</span>\u000A\u000A<span class=\"Comment\"># do not use cmp[string] here as we want to use the specialized</span>\u000A<span class=\"Comment\"># overload:</span>\u000A<span class=\"Identifier\">sort</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">myStrArray</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">system</span><span class=\"Operator\">.</span><span class=\"Identifier\">cmp</span><span class=\"Punctuation\">)</span></pre><p>You can inline adhoc comparison procs with the <a class=\"reference external\" href=\"manual.html#do-notation\">do notation</a>. Example:</p>\u000A<pre><span class=\"Identifier\">people</span><span class=\"Operator\">.</span><span class=\"Identifier\">sort</span> <span class=\"Keyword\">do</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">Person</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">-&gt;</span> <span class=\"Identifier\">int</span><span class=\"Punctuation\">:</span>\u000A  <span class=\"Identifier\">result</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">cmp</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Operator\">.</span><span class=\"Identifier\">surname</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span><span class=\"Operator\">.</span><span class=\"Identifier\">surname</span><span class=\"Punctuation\">)</span>\u000A  <span class=\"Keyword\">if</span> <span class=\"Identifier\">result</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">0</span><span class=\"Punctuation\">:</span>\u000A    <span class=\"Identifier\">result</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">cmp</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Operator\">.</span><span class=\"Identifier\">name</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span><span class=\"Operator\">.</span><span class=\"Identifier\">name</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "proc sort*[T](a: var openArray[T]; cmp: proc (x, y: T): int {.closure.}; \u000A              order = SortOrder.Ascending)"
  }, 
  {
    "name": "product", 
    "type": "skProc", 
    "description": "produces the Cartesian product of the array. Warning: complexity may explode.", 
    "code": "proc product*[T](x: openArray[seq[T]]): seq[seq[T]]"
  }
]