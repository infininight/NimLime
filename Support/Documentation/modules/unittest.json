[
  {
    "comment": ":Author: Zahary Karadjov\u000A##\u000A## This module implements the standard unit testing facilities such as\u000A## suites, fixtures and test cases as well as facilities for combinatorial \u000A## and randomzied test case generation (not yet available) \u000A## and object mocking (not yet available)\u000A##\u000A## It is loosely based on C++'s boost.test and Haskell's QuickTest"
  }, 
  {
    "name": "OutputLevel", 
    "type": "skType", 
    "code": "OutputLevel* = enum \u000A  PRINT_ALL, PRINT_FAILURES, PRINT_NONE"
  }, 
  {
    "name": "testSetupIMPL", 
    "type": "skTemplate", 
    "code": "template testSetupIMPL*(): stmt {.immediate, dirty.}"
  }, 
  {
    "name": "testTeardownIMPL", 
    "type": "skTemplate", 
    "code": "template testTeardownIMPL*(): stmt {.immediate, dirty.}"
  }, 
  {
    "name": "suite", 
    "type": "skTemplate", 
    "code": "template suite*(name: expr; body: stmt): stmt {.immediate, dirty.}"
  }, 
  {
    "name": "test", 
    "type": "skTemplate", 
    "code": "template test*(name: expr; body: stmt): stmt {.immediate, dirty.}"
  }, 
  {
    "name": "checkpoint", 
    "type": "skProc", 
    "code": "proc checkpoint*(msg: string)"
  }, 
  {
    "name": "fail", 
    "type": "skTemplate", 
    "code": "template fail*()"
  }, 
  {
    "name": "check", 
    "type": "skMacro", 
    "code": "macro check*(conditions: stmt): stmt {.immediate.}"
  }, 
  {
    "name": "require", 
    "type": "skTemplate", 
    "code": "template require*(conditions: stmt): stmt {.immediate, dirty.}"
  }, 
  {
    "name": "expect", 
    "type": "skMacro", 
    "code": "macro expect*(exceptions: varargs[expr]; body: stmt): stmt {.immediate.}"
  }, 
  {
    "comment": "Reading settings"
  }
]