[
  {
    "comment": "`Actor`:idx: support for Nim. An actor is implemented as a thread with\u000A## a channel as its inbox. This module requires the ``--threads:on``\u000A## command line switch.\u000A##\u000A## Example:\u000A##\u000A## .. code-block:: nim\u000A##\u000A##      var\u000A##        a: TActorPool[int, void]\u000A##      createActorPool(a)\u000A##      for i in 0 .. < 300:\u000A##        a.spawn(i, proc (x: int) {.thread.} = echo x)\u000A##      a.join()\u000A##\u000A## **Note**: This whole module is deprecated. Use `threadpool` and ``spawn``\u000A## instead."
  }, 
  {
    "name": "PActor", 
    "type": "skType", 
    "description": "an actor", 
    "code": "PActor*[TIn, TOut] = ptr TActor[TIn, TOut]"
  }, 
  {
    "name": "spawn", 
    "type": "skProc", 
    "description": "creates an actor; that is a thread with an inbox. The caller MUST call <tt class=\"docutils literal\"><span class=\"pre\">join</span></tt> because that also frees the actor's associated resources.", 
    "code": "proc spawn*[TIn, TOut](action: proc (self: PActor[TIn, TOut]) {.thread.}): PActor[\u000A    TIn, TOut]"
  }, 
  {
    "name": "inbox", 
    "type": "skProc", 
    "description": "gets a pointer to the associated inbox of the actor <cite>self</cite>.", 
    "code": "proc inbox*[TIn, TOut](self: PActor[TIn, TOut]): ptr TChannel[TIn]"
  }, 
  {
    "name": "running", 
    "type": "skProc", 
    "description": "returns true if the actor <cite>a</cite> is running.", 
    "code": "proc running*[TIn, TOut](a: PActor[TIn, TOut]): bool"
  }, 
  {
    "name": "ready", 
    "type": "skProc", 
    "description": "returns true if the actor <cite>a</cite> is ready to process new messages.", 
    "code": "proc ready*[TIn, TOut](a: PActor[TIn, TOut]): bool"
  }, 
  {
    "name": "join", 
    "type": "skProc", 
    "description": "joins an actor.", 
    "code": "proc join*[TIn, TOut](a: PActor[TIn, TOut])"
  }, 
  {
    "name": "recv", 
    "type": "skProc", 
    "description": "receives a task from <cite>a</cite>'s inbox.", 
    "code": "proc recv*[TIn, TOut](a: PActor[TIn, TOut]): TTask[TIn, TOut]"
  }, 
  {
    "name": "send", 
    "type": "skProc", 
    "description": "sends a message to <cite>a</cite>'s inbox.", 
    "code": "proc send*[TIn, TOut, X, Y](receiver: PActor[TIn, TOut]; msg: TIn; \u000A                            sender: PActor[X, Y])"
  }, 
  {
    "name": "send", 
    "type": "skProc", 
    "description": "sends a message to <cite>receiver</cite>'s inbox.", 
    "code": "proc send*[TIn, TOut](receiver: PActor[TIn, TOut]; msg: TIn; \u000A                      sender: ptr TChannel[TOut] = nil)"
  }, 
  {
    "name": "sendShutdown", 
    "type": "skProc", 
    "description": "send a shutdown message to <cite>receiver</cite>.", 
    "code": "proc sendShutdown*[TIn, TOut](receiver: PActor[TIn, TOut])"
  }, 
  {
    "name": "reply", 
    "type": "skProc", 
    "description": "sends a message to io's output message box.", 
    "code": "proc reply*[TIn, TOut](t: TTask[TIn, TOut]; m: TOut)"
  }, 
  {
    "name": "TActorPool", 
    "type": "skType", 
    "description": "an actor pool", 
    "code": "TActorPool*[TIn, TOut] = object  {.pure, final.}\u000A  actors: seq[PActor[TIn, TOut]]\u000A  when TOut isnot void: \u000A      outputs: TChannel[TOut]\u000A\u000A  "
  }, 
  {
    "name": "`^`", 
    "type": "skProc", 
    "description": "alias for 'recv'.", 
    "code": "proc `^`*[T](f: ptr TChannel[T]): T"
  }, 
  {
    "name": "createActorPool", 
    "type": "skProc", 
    "description": "creates an actor pool.", 
    "code": "proc createActorPool*[TIn, TOut](a: var TActorPool[TIn, TOut]; poolSize = 4)"
  }, 
  {
    "name": "sync", 
    "type": "skProc", 
    "description": "waits for every actor of <cite>a</cite> to finish with its work. Currently this is implemented as polling every <cite>polling</cite> ms and has a slight chance of failing since we check for every actor to be in <cite>ready</cite> state and not for messages still in ether. This will change in a later version, however.", 
    "code": "proc sync*[TIn, TOut](a: var TActorPool[TIn, TOut]; polling = 50)"
  }, 
  {
    "name": "terminate", 
    "type": "skProc", 
    "description": "terminates each actor in the actor pool <cite>a</cite> and frees the resources attached to <cite>a</cite>.", 
    "code": "proc terminate*[TIn, TOut](a: var TActorPool[TIn, TOut])"
  }, 
  {
    "name": "join", 
    "type": "skProc", 
    "description": "short-cut for <cite>sync</cite> and then <cite>terminate</cite>.", 
    "code": "proc join*[TIn, TOut](a: var TActorPool[TIn, TOut])"
  }, 
  {
    "name": "spawn", 
    "type": "skProc", 
    "description": "uses the actor pool to run <tt class=\"docutils literal\"><span class=\"pre\">action(input)</span></tt> concurrently. <cite>spawn</cite> is guaranteed to not block.", 
    "code": "proc spawn*[TIn, TOut](p: var TActorPool[TIn, TOut]; input: TIn; \u000A                       action: proc (input: TIn): TOut {.thread.}): ptr TChannel[\u000A    TOut]"
  }, 
  {
    "name": "spawn", 
    "type": "skProc", 
    "description": "uses the actor pool to run <tt class=\"docutils literal\"><span class=\"pre\">action(input)</span></tt> concurrently. <cite>spawn</cite> is guaranteed to not block.", 
    "code": "proc spawn*[TIn](p: var TActorPool[TIn, void]; input: TIn; \u000A                 action: proc (input: TIn) {.thread.})"
  }
]