[
  {
    "name": "Poly", 
    "type": "skType", 
    "code": "Poly* = object \u000A  cofs: seq[float]\u000A"
  }, 
  {
    "name": "degree", 
    "type": "skProc", 
    "description": "Returns the degree of the polynomial, that is the number of coefficients-1", 
    "code": "proc degree*(p: Poly): int"
  }, 
  {
    "name": "eval", 
    "type": "skProc", 
    "description": "Evaluates a polynomial function value for <cite>x</cite> quickly using Horners method", 
    "code": "proc eval*(p: Poly; x: float): float"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "Gets a coefficient of the polynomial. p[2] will returns the quadric term, p[3] the cubic etc. Out of bounds index will return 0.0.", 
    "code": "proc `[]`*(p: Poly; idx: int): float"
  }, 
  {
    "name": "`[]=`", 
    "type": "skProc", 
    "description": "Sets an coefficient of the polynomial by index. p[2] set the quadric term, p[3] the cubic etc. If index is out of range for the coefficients, the polynomial grows to the smallest needed degree.", 
    "code": "proc `[]=`*(p: var Poly; idx: int; v: float)"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "Iterates through the corfficients of the polynomial.", 
    "code": "iterator items*(p: Poly): float"
  }, 
  {
    "name": "clean", 
    "type": "skProc", 
    "description": "Removes leading zero coefficients of the polynomial. An optional tolerance can be given for what's considered zero.", 
    "code": "proc clean*(p: var Poly; zerotol = 0.0)"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "Gets a somewhat reasonable string representation of the polynomial The format should be compatible with most online function plotters, for example directly in google search", 
    "code": "proc `$`*(p: Poly): string"
  }, 
  {
    "name": "derivative", 
    "type": "skProc", 
    "description": "Returns a new polynomial, which is the derivative of <cite>p</cite>", 
    "code": "proc derivative*(p: Poly): Poly"
  }, 
  {
    "name": "diff", 
    "type": "skProc", 
    "description": "Evaluates the differentiation of a polynomial with respect to <cite>x</cite> quickly using a modifed Horners method", 
    "code": "proc diff*(p: Poly; x: float): float"
  }, 
  {
    "name": "integral", 
    "type": "skProc", 
    "description": "Returns a new polynomial which is the indefinite integral of <cite>p</cite>. The constant term is set to 0.0", 
    "code": "proc integral*(p: Poly): Poly"
  }, 
  {
    "name": "integrate", 
    "type": "skProc", 
    "description": "Computes the definite integral of <cite>p</cite> between <cite>xmin</cite> and <cite>xmax</cite> quickly using a modified version of Horners method", 
    "code": "proc integrate*(p: Poly; xmin, xmax: float): float"
  }, 
  {
    "name": "initPoly", 
    "type": "skProc", 
    "description": "Initializes a polynomial with given coefficients. The most significant coefficient is first, so to create x^2-2x+3: intiPoly(1.0,-2.0,3.0)", 
    "code": "proc initPoly*(cofs: varargs[float]): Poly"
  }, 
  {
    "name": "divMod", 
    "type": "skProc", 
    "description": "Divides <cite>p</cite> with <cite>d</cite>, and stores the quotinent in <cite>q</cite> and the remainder in <cite>d</cite>", 
    "code": "proc divMod*(p, d: Poly; q, r: var Poly)"
  }, 
  {
    "name": "`+`", 
    "type": "skProc", 
    "description": "Adds two polynomials", 
    "code": "proc `+`*(p1: Poly; p2: Poly): Poly"
  }, 
  {
    "name": "`*`", 
    "type": "skProc", 
    "description": "Multiplies the polynomial <cite>p1</cite> with <cite>p2</cite>", 
    "code": "proc `*`*(p1: Poly; p2: Poly): Poly"
  }, 
  {
    "name": "`*`", 
    "type": "skProc", 
    "description": "Multiplies the polynomial <cite>p</cite> with a real number", 
    "code": "proc `*`*(p: Poly; f: float): Poly"
  }, 
  {
    "name": "`*`", 
    "type": "skProc", 
    "description": "Multiplies a real number with a polynomial", 
    "code": "proc `*`*(f: float; p: Poly): Poly"
  }, 
  {
    "name": "`-`", 
    "type": "skProc", 
    "description": "Negates a polynomial", 
    "code": "proc `-`*(p: Poly): Poly"
  }, 
  {
    "name": "`-`", 
    "type": "skProc", 
    "description": "Subtract <cite>p1</cite> with <cite>p2</cite>", 
    "code": "proc `-`*(p1: Poly; p2: Poly): Poly"
  }, 
  {
    "name": "`/`", 
    "type": "skProc", 
    "description": "Divides polynomial <cite>p</cite> with a real number <cite>f</cite>", 
    "code": "proc `/`*(p: Poly; f: float): Poly"
  }, 
  {
    "name": "`/`", 
    "type": "skProc", 
    "description": "Divides polynomial <cite>p</cite> with polynomial <cite>q</cite>", 
    "code": "proc `/`*(p, q: Poly): Poly"
  }, 
  {
    "name": "`mod`", 
    "type": "skProc", 
    "description": "Computes the polynomial modulo operation, that is the remainder of <cite>p</cite>/<cite>q</cite>", 
    "code": "proc `mod`*(p, q: Poly): Poly"
  }, 
  {
    "name": "normalize", 
    "type": "skProc", 
    "description": "Multiplies the polynomial inplace by a term so that the leading term is 1.0. This might lead to an unstable polynomial if the leading term is zero.", 
    "code": "proc normalize*(p: var Poly)"
  }, 
  {
    "name": "solveQuadric", 
    "type": "skProc", 
    "description": "Solves the quadric equation <cite>ax^2+bx+c</cite>, with a possible tolerance <cite>zerotol</cite> to find roots of curves just 'touching' the x axis. Returns sequence with 0,1 or 2 solutions.", 
    "code": "proc solveQuadric*(a, b, c: float; zerotol = 0.0): seq[float]"
  }, 
  {
    "name": "roots", 
    "type": "skProc", 
    "description": "Computes the real roots of the polynomial <cite>p</cite> <cite>tol</cite> is the tolerance used to break searching for each root when reached. <cite>zerotol</cite> is the tolerance, which is 'close enough' to zero to be considered a root and is used to find roots for curves that only 'touch' the x-axis. <cite>mergetol</cite> is the tolerance, of which two x-values are considered beeing the same root. <cite>maxiter</cite> can be used to limit the number of iterations for each root. Returns a (possibly empty) sorted sequence with the solutions.", 
    "code": "proc roots*(p: Poly; tol = 1e-09; zerotol = 1e-06; mergetol = 1e-12; \u000A            maxiter = 1000): seq[float]"
  }
]