[
  {
    "comment": "This module implements portable sockets, it supports a mix of different types\u000A## of sockets. Sockets are buffered by default meaning that data will be\u000A## received in ``BufferSize`` (4000) sized chunks, buffering\u000A## behaviour can be disabled by setting the ``buffered`` parameter when calling\u000A## the ``socket`` function to `false`. Be aware that some functions may not yet\u000A## support buffered sockets (mainly the recvFrom function).\u000A##\u000A## Most procedures raise OSError on error, but some may return ``-1`` or a\u000A## boolean ``false``.\u000A##\u000A## SSL is supported through the OpenSSL library. This support can be activated\u000A## by compiling with the ``-d:ssl`` switch. When an SSL socket is used it will\u000A## raise ESSL exceptions when SSL errors occur.\u000A##\u000A## Asynchronous sockets are supported, however a better alternative is to use\u000A## the `asyncio <asyncio.html>`_ module.\u000A##\u000A## Since version 0.10.2 this module is deprecated. Use the `net <net.html>`_\u000A## or the `rawsockets <rawsockets.html>`_ module instead."
  }, 
  {
    "name": "SSLAcceptResult", 
    "type": "skType", 
    "code": "SSLAcceptResult* = enum \u000A  AcceptNoClient = 0, AcceptNoHandshake, AcceptSuccess"
  }, 
  {
    "name": "BufferSize", 
    "type": "skConst", 
    "description": "size of a buffered socket's buffer", 
    "code": "BufferSize*: int = 4000"
  }, 
  {
    "name": "TimeoutError", 
    "type": "skType", 
    "code": "TimeoutError* = object of Exception"
  }, 
  {
    "name": "invalidSocket", 
    "type": "skLet", 
    "description": "invalid socket", 
    "code": "invalidSocket*: Socket = nil"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "description": "<tt class=\"docutils literal\"><span class=\"pre\">==</span></tt> for ports.", 
    "code": "proc `==`*(a, b: Port): bool {.borrow.}"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "returns the port number as a string", 
    "code": "proc `$`*(p: Port): string {.borrow.}"
  }, 
  {
    "name": "ntohl", 
    "type": "skProc", 
    "description": "Converts 32-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.", 
    "code": "proc ntohl*(x: int32): int32"
  }, 
  {
    "name": "ntohs", 
    "type": "skProc", 
    "description": "Converts 16-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.", 
    "code": "proc ntohs*(x: int16): int16"
  }, 
  {
    "name": "htonl", 
    "type": "skProc", 
    "description": "Converts 32-bit integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.", 
    "code": "proc htonl*(x: int32): int32"
  }, 
  {
    "name": "htons", 
    "type": "skProc", 
    "description": "Converts 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.", 
    "code": "proc htons*(x: int16): int16"
  }, 
  {
    "name": "socket", 
    "type": "skProc", 
    "description": "Creates a new socket; returns <cite>InvalidSocket</cite> if an error occurs.", 
    "code": "proc socket*(domain: Domain = AF_INET; typ: SockType = SOCK_STREAM; \u000A             protocol: Protocol = IPPROTO_TCP; buffered = true): Socket"
  }, 
  {
    "name": "newContext", 
    "type": "skProc", 
    "description": "<p>Creates an SSL context.</p>\u000A<p>Protocol version specifies the protocol to use. SSLv2, SSLv3, TLSv1 are are available with the addition of <tt class=\"docutils literal\"><span class=\"pre\">ProtSSLv23</span></tt> which allows for compatibility with all of them.</p>\u000A<p>There are currently only two options for verify mode; one is <tt class=\"docutils literal\"><span class=\"pre\">CVerifyNone</span></tt> and with it certificates will not be verified the other is <tt class=\"docutils literal\"><span class=\"pre\">CVerifyPeer</span></tt> and certificates will be verified for it, <tt class=\"docutils literal\"><span class=\"pre\">CVerifyPeer</span></tt> is the safest choice.</p>\u000A<p>The last two parameters specify the certificate file path and the key file path, a server socket will most likely not work without these. Certificates can be generated using the following command: <tt class=\"docutils literal\"><span class=\"pre\">openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem</span></tt>.</p>\u000A", 
    "code": "proc newContext*(protVersion = protSSLv23; verifyMode = CVerifyPeer; \u000A                 certFile = \"\"; keyFile = \"\"): SSLContext"
  }, 
  {
    "name": "wrapSocket", 
    "type": "skProc", 
    "description": "<p>Wraps a socket in an SSL context. This function effectively turns <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> into an SSL socket.</p>\u000A<p><strong>Disclaimer</strong>: This code is not well tested, may be very unsafe and prone to security vulnerabilities.</p>\u000A", 
    "code": "proc wrapSocket*(ctx: SSLContext; socket: Socket)"
  }, 
  {
    "name": "raiseSocketError", 
    "type": "skProc", 
    "description": "<p>Raises proper errors based on return values of <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt> functions.</p>\u000A<p>If <tt class=\"docutils literal\"><span class=\"pre\">async</span></tt> is <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> no error will be thrown in the case when the error was caused by no data being available to be read.</p>\u000A<p>If <tt class=\"docutils literal\"><span class=\"pre\">err</span></tt> is not lower than 0 no exception will be raised.</p>\u000A", 
    "code": "proc raiseSocketError*(socket: Socket; err: int = - 1; async = false)"
  }, 
  {
    "name": "listen", 
    "type": "skProc", 
    "description": "Marks <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> as accepting connections. <tt class=\"docutils literal\"><span class=\"pre\">Backlog</span></tt> specifies the maximum length of the queue of pending connections.", 
    "code": "proc listen*(socket: Socket; backlog = SOMAXCONN) {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "parseIp4", 
    "type": "skProc", 
    "description": "<p>parses an IP version 4 in dotted decimal form like &quot;a.b.c.d&quot;.</p>\u000A<p>This is equivalent to <span id=\"inet-ntoa_1\">inet_ntoa</span>.</p>\u000A<p>Raises EInvalidValue in case of an error.</p>\u000A", 
    "code": "proc parseIp4*(s: string): BiggestInt"
  }, 
  {
    "name": "bindAddr", 
    "type": "skProc", 
    "description": "binds an address/port number to a socket. Use address string in dotted decimal form like &quot;a.b.c.d&quot; or leave &quot;&quot; for any address.", 
    "code": "proc bindAddr*(socket: Socket; port = Port(0); address = \"\") {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getSockName", 
    "type": "skProc", 
    "description": "returns the socket's associated port number.", 
    "code": "proc getSockName*(socket: Socket): Port"
  }, 
  {
    "name": "acceptAddr", 
    "type": "skProc", 
    "description": "<p>Blocks until a connection is being made from a client. When a connection is made sets <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> to the client socket and <tt class=\"docutils literal\"><span class=\"pre\">address</span></tt> to the address of the connecting client. If <tt class=\"docutils literal\"><span class=\"pre\">server</span></tt> is non-blocking then this function returns immediately, and if there are no connections queued the returned socket will be <tt class=\"docutils literal\"><span class=\"pre\">InvalidSocket</span></tt>. This function will raise EOS if an error occurs.</p>\u000A<p>The resulting client will inherit any properties of the server socket. For example: whether the socket is buffered or not.</p>\u000A<p><strong>Note</strong>: <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> must be initialised (with <tt class=\"docutils literal\"><span class=\"pre\">new</span></tt>), this function makes no effort to initialise the <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> variable.</p>\u000A<p><strong>Warning:</strong> When using SSL with non-blocking sockets, it is best to use the acceptAddrSSL procedure as this procedure will most likely block.</p>\u000A", 
    "code": "proc acceptAddr*(server: Socket; client: var Socket; address: var string) {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "setBlocking", 
    "type": "skProc", 
    "description": "Sets blocking mode on socket", 
    "code": "proc setBlocking*(s: Socket; blocking: bool) {.tags: [], gcsafe.}"
  }, 
  {
    "name": "acceptAddrSSL", 
    "type": "skProc", 
    "description": "<p>This procedure should only be used for non-blocking <strong>SSL</strong> sockets. It will immediately return with one of the following values:</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">AcceptSuccess</span></tt> will be returned when a client has been successfully accepted and the handshake has been successfully performed between <tt class=\"docutils literal\"><span class=\"pre\">server</span></tt> and the newly connected client.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">AcceptNoHandshake</span></tt> will be returned when a client has been accepted but no handshake could be performed. This can happen when the client connects but does not yet initiate a handshake. In this case <tt class=\"docutils literal\"><span class=\"pre\">acceptAddrSSL</span></tt> should be called again with the same parameters.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">AcceptNoClient</span></tt> will be returned when no client is currently attempting to connect.</p>\u000A", 
    "code": "proc acceptAddrSSL*(server: Socket; client: var Socket; address: var string): SSLAcceptResult {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "accept", 
    "type": "skProc", 
    "description": "<p>Equivalent to <tt class=\"docutils literal\"><span class=\"pre\">acceptAddr</span></tt> but doesn't return the address, only the socket.</p>\u000A<p><strong>Note</strong>: <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> must be initialised (with <tt class=\"docutils literal\"><span class=\"pre\">new</span></tt>), this function makes no effort to initialise the <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> variable.</p>\u000A", 
    "code": "proc accept*(server: Socket; client: var Socket) {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "acceptAddr", 
    "type": "skProc", 
    "description": "<p>Slightly different version of <tt class=\"docutils literal\"><span class=\"pre\">acceptAddr</span></tt>.</p>\u000A<p><strong>Deprecated since version 0.9.0:</strong> Please use the function above.</p>\u000A", 
    "code": "proc acceptAddr*(server: Socket): tuple[client: Socket, address: string] {.\u000A    deprecated, tags: [ReadIOEffect].}"
  }, 
  {
    "name": "accept", 
    "type": "skProc", 
    "description": "<strong>Deprecated since version 0.9.0:</strong> Please use the function above.", 
    "code": "proc accept*(server: Socket): Socket {.deprecated, tags: [ReadIOEffect].}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes a socket.", 
    "code": "proc close*(socket: Socket)"
  }, 
  {
    "name": "getServByName", 
    "type": "skProc", 
    "description": "<p>Searches the database from the beginning and finds the first entry for which the service name specified by <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt> matches the s_name member and the protocol name specified by <tt class=\"docutils literal\"><span class=\"pre\">proto</span></tt> matches the s_proto member.</p>\u000A<p>On posix this will search through the <tt class=\"docutils literal\"><span class=\"pre\">/etc/services</span></tt> file.</p>\u000A", 
    "code": "proc getServByName*(name, proto: string): Servent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getServByPort", 
    "type": "skProc", 
    "description": "<p>Searches the database from the beginning and finds the first entry for which the port specified by <tt class=\"docutils literal\"><span class=\"pre\">port</span></tt> matches the s_port member and the protocol name specified by <tt class=\"docutils literal\"><span class=\"pre\">proto</span></tt> matches the s_proto member.</p>\u000A<p>On posix this will search through the <tt class=\"docutils literal\"><span class=\"pre\">/etc/services</span></tt> file.</p>\u000A", 
    "code": "proc getServByPort*(port: Port; proto: string): Servent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getHostByAddr", 
    "type": "skProc", 
    "description": "This function will lookup the hostname of an IP Address.", 
    "code": "proc getHostByAddr*(ip: string): Hostent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getHostByName", 
    "type": "skProc", 
    "description": "This function will lookup the IP address of a hostname.", 
    "code": "proc getHostByName*(name: string): Hostent {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "getSockOptInt", 
    "type": "skProc", 
    "description": "getsockopt for integer options.", 
    "code": "proc getSockOptInt*(socket: Socket; level, optname: int): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "setSockOptInt", 
    "type": "skProc", 
    "description": "setsockopt for integer options.", 
    "code": "proc setSockOptInt*(socket: Socket; level, optname, optval: int) {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "getSockOpt", 
    "type": "skProc", 
    "description": "Retrieves option <tt class=\"docutils literal\"><span class=\"pre\">opt</span></tt> as a boolean value.", 
    "code": "proc getSockOpt*(socket: Socket; opt: SOBool; level = SOL_SOCKET): bool {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "setSockOpt", 
    "type": "skProc", 
    "description": "Sets option <tt class=\"docutils literal\"><span class=\"pre\">opt</span></tt> to a boolean value specified by <tt class=\"docutils literal\"><span class=\"pre\">value</span></tt>.", 
    "code": "proc setSockOpt*(socket: Socket; opt: SOBool; value: bool; level = SOL_SOCKET) {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "description": "<p>Connects socket to <tt class=\"docutils literal\"><span class=\"pre\">address</span></tt>:<tt class=\"docutils literal\"><span class=\"pre\">port</span></tt>. <tt class=\"docutils literal\"><span class=\"pre\">Address</span></tt> can be an IP address or a host name. If <tt class=\"docutils literal\"><span class=\"pre\">address</span></tt> is a host name, this function will try each IP of that host name. <tt class=\"docutils literal\"><span class=\"pre\">htons</span></tt> is already performed on <tt class=\"docutils literal\"><span class=\"pre\">port</span></tt> so you must not do it.</p>\u000A<p>If <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is an SSL socket a handshake will be automatically performed.</p>\u000A", 
    "code": "proc connect*(socket: Socket; address: string; port = Port(0); \u000A              af: Domain = AF_INET) {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "connectAsync", 
    "type": "skProc", 
    "description": "<p>A variant of <tt class=\"docutils literal\"><span class=\"pre\">connect</span></tt> for non-blocking sockets.</p>\u000A<p>This procedure will immediatelly return, it will not block until a connection is made. It is up to the caller to make sure the connection has been established by checking (using <tt class=\"docutils literal\"><span class=\"pre\">select</span></tt>) whether the socket is writeable.</p>\u000A<p><strong>Note</strong>: For SSL sockets, the <tt class=\"docutils literal\"><span class=\"pre\">handshake</span></tt> procedure must be called whenever the socket successfully connects to a server.</p>\u000A", 
    "code": "proc connectAsync*(socket: Socket; name: string; port = Port(0); \u000A                   af: Domain = AF_INET) {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "handshake", 
    "type": "skProc", 
    "description": "<p>This proc needs to be called on a socket after it connects. This is only applicable when using <tt class=\"docutils literal\"><span class=\"pre\">connectAsync</span></tt>. This proc performs the SSL handshake.</p>\u000A<p>Returns <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> whenever the socket is not yet ready for a handshake, <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> whenever handshake completed successfully.</p>\u000A<p>A ESSL error is raised on any other errors.</p>\u000A", 
    "code": "proc handshake*(socket: Socket): bool {.tags: [ReadIOEffect, WriteIOEffect].}"
  }, 
  {
    "name": "gotHandshake", 
    "type": "skProc", 
    "description": "<p>Determines whether a handshake has occurred between a client (<tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt>) and the server that <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is connected to.</p>\u000A<p>Throws ESSL if <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is not an SSL socket.</p>\u000A", 
    "code": "proc gotHandshake*(socket: Socket): bool"
  }, 
  {
    "name": "hasDataBuffered", 
    "type": "skProc", 
    "description": "Determines whether a socket has data buffered.", 
    "code": "proc hasDataBuffered*(s: Socket): bool"
  }, 
  {
    "name": "select", 
    "type": "skProc", 
    "description": "<p>Traditional select function. This function will return the number of sockets that are ready to be read from, written to, or which have errors. If there are none; 0 is returned. <tt class=\"docutils literal\"><span class=\"pre\">Timeout</span></tt> is in miliseconds and -1 can be specified for no timeout.</p>\u000A<p>Sockets which are <strong>not</strong> ready for reading, writing or which don't have errors waiting on them are removed from the <tt class=\"docutils literal\"><span class=\"pre\">readfds</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">writefds</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">exceptfds</span></tt> sequences respectively.</p>\u000A", 
    "code": "proc select*(readfds, writefds, exceptfds: var seq[Socket]; timeout = 500): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "select", 
    "type": "skProc", 
    "description": "Variant of select with only a read and write list.", 
    "code": "proc select*(readfds, writefds: var seq[Socket]; timeout = 500): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "selectWrite", 
    "type": "skProc", 
    "description": "<p>When a socket in <tt class=\"docutils literal\"><span class=\"pre\">writefds</span></tt> is ready to be written to then a non-zero value will be returned specifying the count of the sockets which can be written to. The sockets which <strong>cannot</strong> be written to will also be removed from <tt class=\"docutils literal\"><span class=\"pre\">writefds</span></tt>.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> is specified in miliseconds and <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt> can be specified for an unlimited time.</p>\u000A", 
    "code": "proc selectWrite*(writefds: var seq[Socket]; timeout = 500): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "select", 
    "type": "skProc", 
    "description": "variant of select with a read list only", 
    "code": "proc select*(readfds: var seq[Socket]; timeout = 500): int"
  }, 
  {
    "name": "recv", 
    "type": "skProc", 
    "description": "<p>Receives data from a socket.</p>\u000A<p><strong>Note</strong>: This is a low-level function, you may be interested in the higher level versions of this function which are also named <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt>.</p>\u000A", 
    "code": "proc recv*(socket: Socket; data: pointer; size: int): int {.tags: [ReadIOEffect].}"
  }, 
  {
    "name": "recv", 
    "type": "skProc", 
    "description": "overload with a <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> parameter in miliseconds.", 
    "code": "proc recv*(socket: Socket; data: pointer; size: int; timeout: int): int {.\u000A    tags: [ReadIOEffect, TimeEffect].}"
  }, 
  {
    "name": "recv", 
    "type": "skProc", 
    "description": "<p>Higher-level version of <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt>.</p>\u000A<p>When 0 is returned the socket's connection has been closed.</p>\u000A<p>This function will throw an EOS exception when an error occurs. A value lower than 0 is never returned.</p>\u000A<p>A timeout may be specified in miliseconds, if enough data is not received within the time specified an ETimeout exception will be raised.</p>\u000A<p><strong>Note</strong>: <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> must be initialised.</p>\u000A", 
    "code": "proc recv*(socket: Socket; data: var string; size: int; timeout = - 1): int"
  }, 
  {
    "name": "recvAsync", 
    "type": "skProc", 
    "description": "<p>Async version of <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt>.</p>\u000A<p>When socket is non-blocking and no data is available on the socket, <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt> will be returned and <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> will be <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt>.</p>\u000A<p><strong>Note</strong>: <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> must be initialised.</p>\u000A", 
    "code": "proc recvAsync*(socket: Socket; data: var string; size: int): int"
  }, 
  {
    "name": "recvLine", 
    "type": "skProc", 
    "description": "<p>Receive a line of data from <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt>.</p>\u000A<p>If a full line is received <tt class=\"docutils literal\"><span class=\"pre\">\\r\\L</span></tt> is not added to <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt>, however if solely <tt class=\"docutils literal\"><span class=\"pre\">\\r\\L</span></tt> is received then <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt> will be set to it.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> is returned if data is available. <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> suggests an error, EOS exceptions are not raised and <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is simply returned instead.</p>\u000A<p>If the socket is disconnected, <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt> will be set to <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> will be returned.</p>\u000A<p>A timeout can be specified in miliseconds, if data is not received within the specified time an ETimeout exception will be raised.</p>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function has been deprecated in favour of readLine.</p>\u000A", 
    "code": "proc recvLine*(socket: Socket; line: var TaintedString; timeout = - 1): bool {.\u000A    tags: [ReadIOEffect, TimeEffect], deprecated.}"
  }, 
  {
    "name": "readLine", 
    "type": "skProc", 
    "description": "<p>Reads a line of data from <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt>.</p>\u000A<p>If a full line is read <tt class=\"docutils literal\"><span class=\"pre\">\\r\\L</span></tt> is not added to <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt>, however if solely <tt class=\"docutils literal\"><span class=\"pre\">\\r\\L</span></tt> is read then <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt> will be set to it.</p>\u000A<p>If the socket is disconnected, <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt> will be set to <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt>.</p>\u000A<p>An EOS exception will be raised in the case of a socket error.</p>\u000A<p>A timeout can be specified in miliseconds, if data is not received within the specified time an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc readLine*(socket: Socket; line: var TaintedString; timeout = - 1) {.\u000A    tags: [ReadIOEffect, TimeEffect].}"
  }, 
  {
    "name": "recvLineAsync", 
    "type": "skProc", 
    "description": "<p>Similar to <tt class=\"docutils literal\"><span class=\"pre\">recvLine</span></tt> but designed for non-blocking sockets.</p>\u000A<p>The values of the returned enum should be pretty self explanatory:</p>\u000A<blockquote><p><ul class=\"simple\"><li>If a full line has been retrieved; <tt class=\"docutils literal\"><span class=\"pre\">RecvFullLine</span></tt> is returned.</li>\u000A<li>If some data has been retrieved; <tt class=\"docutils literal\"><span class=\"pre\">RecvPartialLine</span></tt> is returned.</li>\u000A<li>If the socket has been disconnected; <tt class=\"docutils literal\"><span class=\"pre\">RecvDisconnected</span></tt> is returned.</li>\u000A<li>If call to <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt> failed; <tt class=\"docutils literal\"><span class=\"pre\">RecvFail</span></tt> is returned.</li>\u000A</ul>\u000A</p></blockquote>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function has been deprecated in favour of readLineAsync.</p>\u000A", 
    "code": "proc recvLineAsync*(socket: Socket; line: var TaintedString): RecvLineResult {.\u000A    tags: [ReadIOEffect], deprecated.}"
  }, 
  {
    "name": "readLineAsync", 
    "type": "skProc", 
    "description": "<p>Similar to <tt class=\"docutils literal\"><span class=\"pre\">recvLine</span></tt> but designed for non-blocking sockets.</p>\u000A<p>The values of the returned enum should be pretty self explanatory:</p>\u000A<blockquote><p><ul class=\"simple\"><li>If a full line has been retrieved; <tt class=\"docutils literal\"><span class=\"pre\">ReadFullLine</span></tt> is returned.</li>\u000A<li>If some data has been retrieved; <tt class=\"docutils literal\"><span class=\"pre\">ReadPartialLine</span></tt> is returned.</li>\u000A<li>If the socket has been disconnected; <tt class=\"docutils literal\"><span class=\"pre\">ReadDisconnected</span></tt> is returned.</li>\u000A<li>If no data could be retrieved; <tt class=\"docutils literal\"><span class=\"pre\">ReadNone</span></tt> is returned.</li>\u000A<li>If call to <tt class=\"docutils literal\"><span class=\"pre\">recv</span></tt> failed; <strong>an EOS exception is raised.</strong></li>\u000A</ul>\u000A</p></blockquote>\u000A", 
    "code": "proc readLineAsync*(socket: Socket; line: var TaintedString): ReadLineResult {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "recv", 
    "type": "skProc", 
    "description": "<p>receives all the available data from the socket. Socket errors will result in an <tt class=\"docutils literal\"><span class=\"pre\">EOS</span></tt> error. If socket is not a connectionless socket and socket is not connected <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt> will be returned.</p>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function is not safe for use.</p>\u000A", 
    "code": "proc recv*(socket: Socket): TaintedString {.tags: [ReadIOEffect], deprecated.}"
  }, 
  {
    "name": "recvTimeout", 
    "type": "skProc", 
    "description": "<p>overloaded variant to support a <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> parameter, the <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> parameter specifies the amount of miliseconds to wait for data on the socket.</p>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function is not safe for use.</p>\u000A", 
    "code": "proc recvTimeout*(socket: Socket; timeout: int): TaintedString {.\u000A    tags: [ReadIOEffect], deprecated.}"
  }, 
  {
    "name": "recvAsync", 
    "type": "skProc", 
    "description": "<p>receives all the data from a non-blocking socket. If socket is non-blocking and there are no messages available, <cite>False</cite> will be returned. Other socket errors will result in an <tt class=\"docutils literal\"><span class=\"pre\">EOS</span></tt> error. If socket is not a connectionless socket and socket is not connected <tt class=\"docutils literal\"><span class=\"pre\">s</span></tt> will be set to <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt>.</p>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function is not safe for use.</p>\u000A", 
    "code": "proc recvAsync*(socket: Socket; s: var TaintedString): bool {.\u000A    tags: [ReadIOEffect], deprecated.}"
  }, 
  {
    "name": "recvFrom", 
    "type": "skProc", 
    "description": "<p>Receives data from <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt>. This function should normally be used with connection-less sockets (UDP sockets).</p>\u000A<p>If an error occurs the return value will be <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt>. Otherwise the return value will be the length of data received.</p>\u000A<p><strong>Warning:</strong> This function does not yet have a buffered implementation, so when <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is buffered the non-buffered implementation will be used. Therefore if <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> contains something in its buffer this function will make no effort to return it.</p>\u000A", 
    "code": "proc recvFrom*(socket: Socket; data: var string; length: int; \u000A               address: var string; port: var Port; flags = 0'i32): int {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "recvFromAsync", 
    "type": "skProc", 
    "description": "<p>Variant of <tt class=\"docutils literal\"><span class=\"pre\">recvFrom</span></tt> for non-blocking sockets. Unlike <tt class=\"docutils literal\"><span class=\"pre\">recvFrom</span></tt>, this function will raise an EOS error whenever a socket error occurs.</p>\u000A<p>If there is no data to be read from the socket <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> will be returned.</p>\u000A", 
    "code": "proc recvFromAsync*(socket: Socket; data: var string; length: int; \u000A                    address: var string; port: var Port; flags = 0'i32): bool {.\u000A    tags: [ReadIOEffect].}"
  }, 
  {
    "name": "skip", 
    "type": "skProc", 
    "description": "<p>skips all the data that is pending for the socket</p>\u000A<p><strong>Deprecated since version 0.9.2</strong>: This function is not safe for use.</p>\u000A", 
    "code": "proc skip*(socket: Socket) {.tags: [ReadIOEffect], deprecated.}"
  }, 
  {
    "name": "skip", 
    "type": "skProc", 
    "description": "<p>Skips <tt class=\"docutils literal\"><span class=\"pre\">size</span></tt> amount of bytes.</p>\u000A<p>An optional timeout can be specified in miliseconds, if skipping the bytes takes longer than specified an ETimeout exception will be raised.</p>\u000A<p>Returns the number of skipped bytes.</p>\u000A", 
    "code": "proc skip*(socket: Socket; size: int; timeout = - 1)"
  }, 
  {
    "name": "send", 
    "type": "skProc", 
    "description": "sends data to a socket.", 
    "code": "proc send*(socket: Socket; data: pointer; size: int): int {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "send", 
    "type": "skProc", 
    "description": "sends data to a socket.", 
    "code": "proc send*(socket: Socket; data: string) {.tags: [WriteIOEffect].}"
  }, 
  {
    "name": "sendAsync", 
    "type": "skProc", 
    "description": "<p>sends data to a non-blocking socket. Returns <tt class=\"docutils literal\"><span class=\"pre\">0</span></tt> if no data could be sent, if data has been sent returns the amount of bytes of <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> that was successfully sent. This number may not always be the length of <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> but typically is.</p>\u000A<p>An EOS (or ESSL if socket is an SSL socket) exception is raised if an error occurs.</p>\u000A", 
    "code": "proc sendAsync*(socket: Socket; data: string): int {.tags: [WriteIOEffect].}"
  }, 
  {
    "name": "trySend", 
    "type": "skProc", 
    "description": "safe alternative to <tt class=\"docutils literal\"><span class=\"pre\">send</span></tt>. Does not raise an EOS when an error occurs, and instead returns <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt> on failure.", 
    "code": "proc trySend*(socket: Socket; data: string): bool {.tags: [WriteIOEffect].}"
  }, 
  {
    "name": "sendTo", 
    "type": "skProc", 
    "description": "<p>low-level sendTo proc. This proc sends <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> to the specified <tt class=\"docutils literal\"><span class=\"pre\">address</span></tt>, which may be an IP address or a hostname, if a hostname is specified this function will try each IP of that hostname.</p>\u000A<p><strong>Note:</strong> This proc is not available for SSL sockets.</p>\u000A", 
    "code": "proc sendTo*(socket: Socket; address: string; port: Port; data: pointer; \u000A             size: int; af: Domain = AF_INET; flags = 0'i32): int {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "sendTo", 
    "type": "skProc", 
    "description": "Friendlier version of the low-level <tt class=\"docutils literal\"><span class=\"pre\">sendTo</span></tt>.", 
    "code": "proc sendTo*(socket: Socket; address: string; port: Port; data: string): int {.\u000A    tags: [WriteIOEffect].}"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "description": "<p>Connects to server as specified by <tt class=\"docutils literal\"><span class=\"pre\">address</span></tt> on port specified by <tt class=\"docutils literal\"><span class=\"pre\">port</span></tt>.</p>\u000A<p>The <tt class=\"docutils literal\"><span class=\"pre\">timeout</span></tt> paremeter specifies the time in miliseconds to allow for the connection to the server to be made.</p>\u000A", 
    "code": "proc connect*(socket: Socket; address: string; port = Port(0); timeout: int; \u000A              af: Domain = AF_INET) {.tags: [ReadIOEffect, WriteIOEffect].}"
  }, 
  {
    "name": "isSSL", 
    "type": "skProc", 
    "description": "Determines whether <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is a SSL socket.", 
    "code": "proc isSSL*(socket: Socket): bool"
  }, 
  {
    "name": "getFD", 
    "type": "skProc", 
    "description": "Returns the socket's file descriptor", 
    "code": "proc getFD*(socket: Socket): SocketHandle"
  }, 
  {
    "name": "isBlocking", 
    "type": "skProc", 
    "description": "Determines whether <tt class=\"docutils literal\"><span class=\"pre\">socket</span></tt> is blocking.", 
    "code": "proc isBlocking*(socket: Socket): bool"
  }
]