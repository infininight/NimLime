[
  {
    "comment": "This module implements experimental features which may soon be moved to\u000A## the system module (or other more appropriate modules)."
  }, 
  {
    "name": "`=&gt;`", 
    "type": "skMacro", 
    "description": "Syntax sugar for anonymous procedures.<pre><span class=\"Keyword\">proc</span> <span class=\"Identifier\">passTwoAndTwo</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">f</span><span class=\"Punctuation\">:</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">int</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">int</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">-&gt;</span> <span class=\"Identifier\">int</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">int</span> <span class=\"Operator\">=</span>\u000A  <span class=\"Identifier\">f</span><span class=\"Punctuation\">(</span><span class=\"DecNumber\">2</span><span class=\"Punctuation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctuation\">)</span>\u000A\u000A<span class=\"Identifier\">passTwoAndTwo</span><span class=\"Punctuation\">(</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">=&gt;</span> <span class=\"Identifier\">x</span> <span class=\"Operator\">+</span> <span class=\"Identifier\">y</span><span class=\"Punctuation\">)</span> <span class=\"Comment\"># 4</span></pre>", 
    "code": "macro `=>`*(p, b: expr): expr {.immediate.}"
  }, 
  {
    "name": "`-&gt;`", 
    "type": "skMacro", 
    "description": "Syntax sugar for procedure types.<pre><span class=\"Keyword\">proc</span> <span class=\"Identifier\">pass2</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">f</span><span class=\"Punctuation\">:</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">float</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">float</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">-&gt;</span> <span class=\"Identifier\">float</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">float</span> <span class=\"Operator\">=</span>\u000A  <span class=\"Identifier\">f</span><span class=\"Punctuation\">(</span><span class=\"DecNumber\">2</span><span class=\"Punctuation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctuation\">)</span>\u000A\u000A<span class=\"Comment\"># is the same as:</span>\u000A\u000A<span class=\"Keyword\">proc</span> <span class=\"Identifier\">pass2</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">f</span><span class=\"Punctuation\">:</span> <span class=\"Keyword\">proc</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">float</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">float</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">float</span> <span class=\"Operator\">=</span>\u000A  <span class=\"Identifier\">f</span><span class=\"Punctuation\">(</span><span class=\"DecNumber\">2</span><span class=\"Punctuation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctuation\">)</span></pre>", 
    "code": "macro `->`*(p, b: expr): expr {.immediate.}"
  }, 
  {
    "name": "lc", 
    "type": "skVar", 
    "code": "lc*: ListComprehension"
  }, 
  {
    "name": "`[]`", 
    "type": "skMacro", 
    "description": "List comprehension, returns a sequence. <cite>comp</cite> is the actual list comprehension, for example <tt class=\"docutils literal\"><span class=\"pre\">x | (x &lt;- 1..10, x mod 2 == 0)</span></tt>. <cite>typ</cite> is the type that will be stored inside the result seq.<pre><span class=\"Identifier\">echo</span> <span class=\"Identifier\">lc</span><span class=\"Punctuation\">[</span><span class=\"Identifier\">x</span> <span class=\"Operator\">|</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span> <span class=\"Operator\">&lt;-</span> <span class=\"FloatNumber\">1.</span><span class=\"Operator\">.</span><span class=\"DecNumber\">10</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">x</span> <span class=\"Keyword\">mod</span> <span class=\"DecNumber\">2</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">0</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">int</span><span class=\"Punctuation\">]</span>\u000A\u000A<span class=\"Keyword\">const</span> <span class=\"Identifier\">n</span> <span class=\"Operator\">=</span> <span class=\"DecNumber\">20</span>\u000A<span class=\"Identifier\">echo</span> <span class=\"Identifier\">lc</span><span class=\"Punctuation\">[</span><span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctuation\">,</span><span class=\"Identifier\">y</span><span class=\"Punctuation\">,</span><span class=\"Identifier\">z</span><span class=\"Punctuation\">)</span> <span class=\"Operator\">|</span> <span class=\"Punctuation\">(</span><span class=\"Identifier\">x</span> <span class=\"Operator\">&lt;-</span> <span class=\"FloatNumber\">1.</span><span class=\"Operator\">.</span><span class=\"Identifier\">n</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">y</span> <span class=\"Operator\">&lt;-</span> <span class=\"Identifier\">x</span><span class=\"Operator\">..</span><span class=\"Identifier\">n</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">z</span> <span class=\"Operator\">&lt;-</span> <span class=\"Identifier\">y</span><span class=\"Operator\">..</span><span class=\"Identifier\">n</span><span class=\"Punctuation\">,</span> <span class=\"Identifier\">x</span><span class=\"Operator\">*</span><span class=\"Identifier\">x</span> <span class=\"Operator\">+</span> <span class=\"Identifier\">y</span><span class=\"Operator\">*</span><span class=\"Identifier\">y</span> <span class=\"Operator\">==</span> <span class=\"Identifier\">z</span><span class=\"Operator\">*</span><span class=\"Identifier\">z</span><span class=\"Punctuation\">)</span><span class=\"Punctuation\">,</span>\u000A        <span class=\"Keyword\">tuple</span><span class=\"Punctuation\">[</span><span class=\"Identifier\">a</span><span class=\"Punctuation\">,</span><span class=\"Identifier\">b</span><span class=\"Punctuation\">,</span><span class=\"Identifier\">c</span><span class=\"Punctuation\">:</span> <span class=\"Identifier\">int</span><span class=\"Punctuation\">]</span><span class=\"Punctuation\">]</span></pre>", 
    "code": "macro `[]`*(lc: ListComprehension; comp, typ: expr): expr"
  }
]