[
  {
    "comment": "A higher level `mySQL`:idx: database wrapper. The same interface is \u000A## implemented for other databases too."
  }, 
  {
    "name": "FWriteDb", 
    "type": "skType", 
    "description": "effect that denotes a write operation", 
    "code": "FWriteDb* = object of FDb"
  }, 
  {
    "name": "sql", 
    "type": "skProc", 
    "description": "<p>constructs a TSqlQuery from the string <cite>query</cite>. This is supposed to be used as a raw-string-literal modifier: <tt class=\"docutils literal\"><span class=\"pre\">sql&quot;update user set counter = counter + 1&quot;</span></tt></p>\u000A<p>If assertions are turned off, it does nothing. If assertions are turned on, later versions will check the string for valid syntax.</p>\u000A", 
    "code": "proc sql*(query: string): TSqlQuery {.noSideEffect, inline.}"
  }, 
  {
    "name": "dbError", 
    "type": "skProc", 
    "description": "raises an EDb exception with message <cite>msg</cite>.", 
    "code": "proc dbError*(msg: string) {.noreturn.}"
  }, 
  {
    "name": "dbQuote", 
    "type": "skProc", 
    "description": "DB quotes the string.", 
    "code": "proc dbQuote*(s: string): string"
  }, 
  {
    "name": "tryExec", 
    "type": "skProc", 
    "description": "tries to execute the query and returns true if successful, false otherwise.", 
    "code": "proc tryExec*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): bool {.\u000A    tags: [FReadDB, FWriteDb].}"
  }, 
  {
    "name": "exec", 
    "type": "skProc", 
    "description": "executes the query and raises EDB if not successful.", 
    "code": "proc exec*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]) {.\u000A    tags: [FReadDB, FWriteDb].}"
  }, 
  {
    "name": "fastRows", 
    "type": "skIterator", 
    "description": "executes the query and iterates over the result dataset. This is very fast, but potenially dangerous: If the for-loop-body executes another query, the results can be undefined. For MySQL this is the case!.", 
    "code": "iterator fastRows*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): TRow {.\u000A    tags: [FReadDB].}"
  }, 
  {
    "name": "getRow", 
    "type": "skProc", 
    "description": "retrieves a single row. If the query doesn't return any rows, this proc will return a TRow with empty strings for each column.", 
    "code": "proc getRow*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): TRow {.\u000A    tags: [FReadDB].}"
  }, 
  {
    "name": "getAllRows", 
    "type": "skProc", 
    "description": "executes the query and returns the whole result dataset.", 
    "code": "proc getAllRows*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): seq[\u000A    TRow] {.tags: [FReadDB].}"
  }, 
  {
    "name": "rows", 
    "type": "skIterator", 
    "description": "same as <cite>fastRows</cite>, but slower and safe.", 
    "code": "iterator rows*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): TRow {.\u000A    tags: [FReadDB].}"
  }, 
  {
    "name": "getValue", 
    "type": "skProc", 
    "description": "executes the query and returns the first column of the first row of the result dataset. Returns &quot;&quot; if the dataset contains no rows or the database value is NULL.", 
    "code": "proc getValue*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): string {.\u000A    tags: [FReadDB].}"
  }, 
  {
    "name": "tryInsertId", 
    "type": "skProc", 
    "description": "executes the query (typically &quot;INSERT&quot;) and returns the generated ID for the row or -1 in case of an error.", 
    "code": "proc tryInsertId*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): int64 {.\u000A    tags: [FWriteDb].}"
  }, 
  {
    "name": "insertId", 
    "type": "skProc", 
    "description": "executes the query (typically &quot;INSERT&quot;) and returns the generated ID for the row.", 
    "code": "proc insertId*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): int64 {.\u000A    tags: [FWriteDb].}"
  }, 
  {
    "name": "execAffectedRows", 
    "type": "skProc", 
    "description": "runs the query (typically &quot;UPDATE&quot;) and returns the number of affected rows", 
    "code": "proc execAffectedRows*(db: TDbConn; query: TSqlQuery; args: varargs[string, `$`]): int64 {.\u000A    tags: [FReadDB, FWriteDb].}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the database connection.", 
    "code": "proc close*(db: TDbConn) {.tags: [FDb].}"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "description": "opens a database connection. Raises <cite>EDb</cite> if the connection could not be established.", 
    "code": "proc open*(connection, user, password, database: string): TDbConn {.tags: [FDb].}"
  }
]