[
  {
    "name": "cuint", 
    "type": "skType", 
    "code": "cuint* = cint"
  }, 
  {
    "name": "LOCAL_HOST_NAMEDPIPE", 
    "type": "skConst", 
    "code": "LOCAL_HOST_NAMEDPIPE* = '.'"
  }, 
  {
    "name": "SERVICENAME", 
    "type": "skConst", 
    "code": "SERVICENAME* = \"MySQL\""
  }, 
  {
    "name": "Tenum_server_command", 
    "type": "skType", 
    "code": "Tenum_server_command* = enum \u000A  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST, COM_CREATE_DB, \u000A  COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS, COM_PROCESS_INFO, \u000A  COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING, COM_TIME, \u000A  COM_DELAYED_INSERT, COM_CHANGE_USER, COM_BINLOG_DUMP, COM_TABLE_DUMP, \u000A  COM_CONNECT_OUT, COM_REGISTER_SLAVE, COM_STMT_PREPARE, COM_STMT_EXECUTE, \u000A  COM_STMT_SEND_LONG_DATA, COM_STMT_CLOSE, COM_STMT_RESET, COM_SET_OPTION, \u000A  COM_STMT_FETCH, COM_END"
  }, 
  {
    "name": "ONLY_KILL_QUERY", 
    "type": "skConst", 
    "code": "ONLY_KILL_QUERY* = 1"
  }, 
  {
    "name": "MAX_BLOB_WIDTH", 
    "type": "skConst", 
    "code": "MAX_BLOB_WIDTH* = 8192"
  }, 
  {
    "name": "PNET", 
    "type": "skType", 
    "code": "PNET* = ptr TNET"
  }, 
  {
    "name": "packet_error", 
    "type": "skConst", 
    "code": "packet_error* = - 1"
  }, 
  {
    "name": "Tenum_field_types", 
    "type": "skType", 
    "code": "Tenum_field_types* = enum \u000A  TYPE_DECIMAL, TYPE_TINY, TYPE_SHORT, TYPE_LONG, TYPE_FLOAT, TYPE_DOUBLE, \u000A  TYPE_NULL, TYPE_TIMESTAMP, TYPE_LONGLONG, TYPE_INT24, TYPE_DATE, TYPE_TIME, \u000A  TYPE_DATETIME, TYPE_YEAR, TYPE_NEWDATE, TYPE_VARCHAR, TYPE_BIT, \u000A  TYPE_NEWDECIMAL = 246, TYPE_ENUM = 247, TYPE_SET = 248, TYPE_TINY_BLOB = 249, \u000A  TYPE_MEDIUM_BLOB = 250, TYPE_LONG_BLOB = 251, TYPE_BLOB = 252, \u000A  TYPE_VAR_STRING = 253, TYPE_STRING = 254, TYPE_GEOMETRY = 255"
  }, 
  {
    "name": "SHUTDOWN_KILLABLE_UPDATE", 
    "type": "skConst", 
    "code": "SHUTDOWN_KILLABLE_UPDATE* = chr(1 shl 3)"
  }, 
  {
    "name": "Tenum_mysql_set_option", 
    "type": "skType", 
    "code": "Tenum_mysql_set_option* = enum \u000A  OPTION_MULTI_STATEMENTS_ON, OPTION_MULTI_STATEMENTS_OFF"
  }, 
  {
    "name": "my_net_init", 
    "type": "skProc", 
    "code": "proc my_net_init*(net: PNET; vio: PVio): my_bool {.cdecl, dynlib: lib, \u000A    importc: \"my_net_init\".}"
  }, 
  {
    "name": "my_net_local_init", 
    "type": "skProc", 
    "code": "proc my_net_local_init*(net: PNET) {.cdecl, dynlib: lib, \u000A                                     importc: \"my_net_local_init\".}"
  }, 
  {
    "name": "net_end", 
    "type": "skProc", 
    "code": "proc net_end*(net: PNET) {.cdecl, dynlib: lib, importc: \"net_end\".}"
  }, 
  {
    "name": "net_clear", 
    "type": "skProc", 
    "code": "proc net_clear*(net: PNET) {.cdecl, dynlib: lib, importc: \"net_clear\".}"
  }, 
  {
    "name": "net_realloc", 
    "type": "skProc", 
    "code": "proc net_realloc*(net: PNET; len: int): my_bool {.cdecl, dynlib: lib, \u000A    importc: \"net_realloc\".}"
  }, 
  {
    "name": "net_flush", 
    "type": "skProc", 
    "code": "proc net_flush*(net: PNET): my_bool {.cdecl, dynlib: lib, importc: \"net_flush\".}"
  }, 
  {
    "name": "my_net_write", 
    "type": "skProc", 
    "code": "proc my_net_write*(net: PNET; packet: cstring; length: int): my_bool {.cdecl, \u000A    dynlib: lib, importc: \"my_net_write\".}"
  }, 
  {
    "name": "net_write_command", 
    "type": "skProc", 
    "code": "proc net_write_command*(net: PNET; command: char; header: cstring; \u000A                        head_len: int; packet: cstring; length: int): my_bool {.\u000A    cdecl, dynlib: lib, importc: \"net_write_command\".}"
  }, 
  {
    "name": "net_real_write", 
    "type": "skProc", 
    "code": "proc net_real_write*(net: PNET; packet: cstring; length: int): cint {.cdecl, \u000A    dynlib: lib, importc: \"net_real_write\".}"
  }, 
  {
    "name": "my_net_read", 
    "type": "skProc", 
    "code": "proc my_net_read*(net: PNET): int {.cdecl, dynlib: lib, importc: \"my_net_read\".}"
  }, 
  {
    "name": "Tsockaddr", 
    "type": "skType", 
    "code": "Tsockaddr* {.final.} = object "
  }, 
  {
    "name": "my_connect", 
    "type": "skProc", 
    "code": "proc my_connect*(s: my_socket; name: Psockaddr; namelen: cuint; timeout: cuint): cint {.\u000A    cdecl, dynlib: lib, importc: \"my_connect\".}"
  }, 
  {
    "name": "PUDF_INIT", 
    "type": "skType", 
    "code": "PUDF_INIT* = ptr TUDF_INIT"
  }, 
  {
    "name": "COMP_HEADER_SIZE", 
    "type": "skConst", 
    "code": "COMP_HEADER_SIZE* = 3"
  }, 
  {
    "name": "randominit", 
    "type": "skProc", 
    "code": "proc randominit*(para1: Prand_struct; seed1: int; seed2: int) {.cdecl, \u000A    dynlib: lib, importc: \"randominit\".}"
  }, 
  {
    "name": "my_rnd", 
    "type": "skProc", 
    "code": "proc my_rnd*(para1: Prand_struct): cdouble {.cdecl, dynlib: lib, \u000A    importc: \"my_rnd\".}"
  }, 
  {
    "name": "create_random_string", 
    "type": "skProc", 
    "code": "proc create_random_string*(fto: cstring; len: cuint; rand_st: Prand_struct) {.\u000A    cdecl, dynlib: lib, importc: \"create_random_string\".}"
  }, 
  {
    "name": "hash_password", 
    "type": "skProc", 
    "code": "proc hash_password*(fto: int; password: cstring; password_len: cuint) {.cdecl, \u000A    dynlib: lib, importc: \"hash_password\".}"
  }, 
  {
    "name": "make_scrambled_password_323", 
    "type": "skProc", 
    "code": "proc make_scrambled_password_323*(fto: cstring; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"make_scrambled_password_323\".}"
  }, 
  {
    "name": "scramble_323", 
    "type": "skProc", 
    "code": "proc scramble_323*(fto: cstring; message: cstring; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"scramble_323\".}"
  }, 
  {
    "name": "check_scramble_323", 
    "type": "skProc", 
    "code": "proc check_scramble_323*(para1: cstring; message: cstring; salt: int): my_bool {.\u000A    cdecl, dynlib: lib, importc: \"check_scramble_323\".}"
  }, 
  {
    "name": "get_salt_from_password_323", 
    "type": "skProc", 
    "code": "proc get_salt_from_password_323*(res: ptr int; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"get_salt_from_password_323\".}"
  }, 
  {
    "name": "make_password_from_salt_323", 
    "type": "skProc", 
    "code": "proc make_password_from_salt_323*(fto: cstring; salt: ptr int) {.cdecl, \u000A    dynlib: lib, importc: \"make_password_from_salt_323\".}"
  }, 
  {
    "name": "octet2hex", 
    "type": "skProc", 
    "code": "proc octet2hex*(fto: cstring; str: cstring; length: cuint): cstring {.cdecl, \u000A    dynlib: lib, importc: \"octet2hex\".}"
  }, 
  {
    "name": "make_scrambled_password", 
    "type": "skProc", 
    "code": "proc make_scrambled_password*(fto: cstring; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"make_scrambled_password\".}"
  }, 
  {
    "name": "scramble", 
    "type": "skProc", 
    "code": "proc scramble*(fto: cstring; message: cstring; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"scramble\".}"
  }, 
  {
    "name": "check_scramble", 
    "type": "skProc", 
    "code": "proc check_scramble*(reply: cstring; message: cstring; hash_stage2: pointer): my_bool {.\u000A    cdecl, dynlib: lib, importc: \"check_scramble\".}"
  }, 
  {
    "name": "get_salt_from_password", 
    "type": "skProc", 
    "code": "proc get_salt_from_password*(res: pointer; password: cstring) {.cdecl, \u000A    dynlib: lib, importc: \"get_salt_from_password\".}"
  }, 
  {
    "name": "make_password_from_salt", 
    "type": "skProc", 
    "code": "proc make_password_from_salt*(fto: cstring; hash_stage2: pointer) {.cdecl, \u000A    dynlib: lib, importc: \"make_password_from_salt\".}"
  }, 
  {
    "name": "get_tty_password", 
    "type": "skProc", 
    "code": "proc get_tty_password*(opt_message: cstring): cstring {.cdecl, dynlib: lib, \u000A    importc: \"get_tty_password\".}"
  }, 
  {
    "name": "errno_to_sqlstate", 
    "type": "skProc", 
    "code": "proc errno_to_sqlstate*(errno: cuint): cstring {.cdecl, dynlib: lib, \u000A    importc: \"mysql_errno_to_sqlstate\".}"
  }, 
  {
    "name": "modify_defaults_file", 
    "type": "skProc", 
    "code": "proc modify_defaults_file*(file_location: cstring; option: cstring; \u000A                           option_value: cstring; section_name: cstring; \u000A                           remove_option: cint): cint {.cdecl, dynlib: lib, \u000A    importc: \"load_defaults\".}"
  }, 
  {
    "name": "load_defaults", 
    "type": "skProc", 
    "code": "proc load_defaults*(conf_file: cstring; groups: cstringArray; argc: ptr cint; \u000A                    argv: ptr cstringArray): cint {.cdecl, dynlib: lib, \u000A    importc: \"load_defaults\".}"
  }, 
  {
    "name": "my_init", 
    "type": "skProc", 
    "code": "proc my_init*(): my_bool {.cdecl, dynlib: lib, importc: \"my_init\".}"
  }, 
  {
    "name": "my_thread_init", 
    "type": "skProc", 
    "code": "proc my_thread_init*(): my_bool {.cdecl, dynlib: lib, importc: \"my_thread_init\".}"
  }, 
  {
    "name": "my_thread_end", 
    "type": "skProc", 
    "code": "proc my_thread_end*() {.cdecl, dynlib: lib, importc: \"my_thread_end\".}"
  }, 
  {
    "name": "NULL_LENGTH", 
    "type": "skConst", 
    "code": "NULL_LENGTH*: int = int(not (0))"
  }, 
  {
    "name": "LONG_DATA_HEADER", 
    "type": "skConst", 
    "code": "LONG_DATA_HEADER* = 6"
  }, 
  {
    "name": "CLIENT_NET_WRITE_TIMEOUT", 
    "type": "skConst", 
    "code": "CLIENT_NET_WRITE_TIMEOUT* = 365 * 24 * 3600"
  }, 
  {
    "name": "TFIELD_OFFSET", 
    "type": "skType", 
    "code": "TFIELD_OFFSET* = cuint"
  }, 
  {
    "name": "IS_PRI_KEY", 
    "type": "skProc", 
    "code": "proc IS_PRI_KEY*(n: int32): bool"
  }, 
  {
    "name": "IS_NOT_NULL", 
    "type": "skProc", 
    "code": "proc IS_NOT_NULL*(n: int32): bool"
  }, 
  {
    "name": "IS_BLOB", 
    "type": "skProc", 
    "code": "proc IS_BLOB*(n: int32): bool"
  }, 
  {
    "name": "IS_NUM", 
    "type": "skProc", 
    "code": "proc IS_NUM*(t: Tenum_field_types): bool"
  }, 
  {
    "name": "INTERNAL_NUM_FIELD", 
    "type": "skProc", 
    "code": "proc INTERNAL_NUM_FIELD*(f: Pst_mysql_field): bool"
  }, 
  {
    "name": "IS_NUM_FIELD", 
    "type": "skProc", 
    "code": "proc IS_NUM_FIELD*(f: Pst_mysql_field): bool"
  }, 
  {
    "name": "Pmy_ulonglong", 
    "type": "skType", 
    "code": "Pmy_ulonglong* = ptr my_ulonglong"
  }, 
  {
    "name": "COUNT_ERROR", 
    "type": "skConst", 
    "code": "COUNT_ERROR* = not (my_ulonglong(0))"
  }, 
  {
    "name": "TROW_OFFSET", 
    "type": "skType", 
    "code": "TROW_OFFSET* = TROWS"
  }, 
  {
    "name": "ALLOC_MAX_BLOCK_USAGE_BEFORE_DROP", 
    "type": "skConst", 
    "code": "ALLOC_MAX_BLOCK_USAGE_BEFORE_DROP* = 10"
  }, 
  {
    "name": "PMEM_ROOT", 
    "type": "skType", 
    "code": "PMEM_ROOT* = ptr TMEM_ROOT"
  }, 
  {
    "name": "Toption", 
    "type": "skType", 
    "code": "Toption* = enum \u000A  OPT_CONNECT_TIMEOUT, OPT_COMPRESS, OPT_NAMED_PIPE, INIT_COMMAND, \u000A  READ_DEFAULT_FILE, READ_DEFAULT_GROUP, SET_CHARSET_DIR, SET_CHARSET_NAME, \u000A  OPT_LOCAL_INFILE, OPT_PROTOCOL, SHARED_MEMORY_BASE_NAME, OPT_READ_TIMEOUT, \u000A  OPT_WRITE_TIMEOUT, OPT_USE_RESULT, OPT_USE_REMOTE_CONNECTION, \u000A  OPT_USE_EMBEDDED_CONNECTION, OPT_GUESS_CONNECTION, SET_CLIENT_IP, SECURE_AUTH, \u000A  REPORT_DATA_TRUNCATION, OPT_RECONNECT"
  }, 
  {
    "name": "MANAGER_INTERNAL_ERR", 
    "type": "skConst", 
    "code": "MANAGER_INTERNAL_ERR* = 500"
  }, 
  {
    "name": "Tenum_stmt_attr_type", 
    "type": "skType", 
    "code": "Tenum_stmt_attr_type* = enum \u000A  STMT_ATTR_UPDATE_MAX_LENGTH, STMT_ATTR_CURSOR_TYPE, STMT_ATTR_PREFETCH_ROWS"
  }, 
  {
    "name": "server_init", 
    "type": "skProc", 
    "code": "proc server_init*(argc: cint; argv: cstringArray; groups: cstringArray): cint {.\u000A    cdecl, dynlib: lib, importc: \"mysql_server_init\".}"
  }, 
  {
    "name": "server_end", 
    "type": "skProc", 
    "code": "proc server_end*() {.cdecl, dynlib: lib, importc: \"mysql_server_end\".}"
  }, 
  {
    "name": "library_init", 
    "type": "skProc", 
    "code": "proc library_init*(argc: cint; argv: cstringArray; groups: cstringArray): cint {.\u000A    cdecl, dynlib: lib, importc: \"mysql_server_init\".}"
  }, 
  {
    "name": "library_end", 
    "type": "skProc", 
    "code": "proc library_end*() {.cdecl, dynlib: lib, importc: \"mysql_server_end\".}"
  }, 
  {
    "name": "get_parameters", 
    "type": "skProc", 
    "code": "proc get_parameters*(): PPARAMETERS {.stdcall, dynlib: lib, \u000A                                      importc: \"mysql_get_parameters\".}"
  }, 
  {
    "name": "thread_init", 
    "type": "skProc", 
    "code": "proc thread_init*(): my_bool {.stdcall, dynlib: lib, \u000A                               importc: \"mysql_thread_init\".}"
  }, 
  {
    "name": "thread_end", 
    "type": "skProc", 
    "code": "proc thread_end*() {.stdcall, dynlib: lib, importc: \"mysql_thread_end\".}"
  }, 
  {
    "name": "num_rows", 
    "type": "skProc", 
    "code": "proc num_rows*(res: PRES): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_num_rows\".}"
  }, 
  {
    "name": "num_fields", 
    "type": "skProc", 
    "code": "proc num_fields*(res: PRES): cuint {.stdcall, dynlib: lib, \u000A                                     importc: \"mysql_num_fields\".}"
  }, 
  {
    "name": "eof", 
    "type": "skProc", 
    "code": "proc eof*(res: PRES): my_bool {.stdcall, dynlib: lib, importc: \"mysql_eof\".}"
  }, 
  {
    "name": "fetch_field_direct", 
    "type": "skProc", 
    "code": "proc fetch_field_direct*(res: PRES; fieldnr: cuint): PFIELD {.stdcall, \u000A    dynlib: lib, importc: \"mysql_fetch_field_direct\".}"
  }, 
  {
    "name": "fetch_fields", 
    "type": "skProc", 
    "code": "proc fetch_fields*(res: PRES): PFIELD {.stdcall, dynlib: lib, \u000A                                        importc: \"mysql_fetch_fields\".}"
  }, 
  {
    "name": "row_tell", 
    "type": "skProc", 
    "code": "proc row_tell*(res: PRES): TROW_OFFSET {.stdcall, dynlib: lib, \u000A    importc: \"mysql_row_tell\".}"
  }, 
  {
    "name": "field_tell", 
    "type": "skProc", 
    "code": "proc field_tell*(res: PRES): TFIELD_OFFSET {.stdcall, dynlib: lib, \u000A    importc: \"mysql_field_tell\".}"
  }, 
  {
    "name": "field_count", 
    "type": "skProc", 
    "code": "proc field_count*(MySQL: PMySQL): cuint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_field_count\".}"
  }, 
  {
    "name": "affected_rows", 
    "type": "skProc", 
    "code": "proc affected_rows*(MySQL: PMySQL): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_affected_rows\".}"
  }, 
  {
    "name": "insert_id", 
    "type": "skProc", 
    "code": "proc insert_id*(MySQL: PMySQL): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_insert_id\".}"
  }, 
  {
    "name": "errno", 
    "type": "skProc", 
    "code": "proc errno*(MySQL: PMySQL): cuint {.stdcall, dynlib: lib, importc: \"mysql_errno\".}"
  }, 
  {
    "name": "error", 
    "type": "skProc", 
    "code": "proc error*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, \u000A                                      importc: \"mysql_error\".}"
  }, 
  {
    "name": "sqlstate", 
    "type": "skProc", 
    "code": "proc sqlstate*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_sqlstate\".}"
  }, 
  {
    "name": "warning_count", 
    "type": "skProc", 
    "code": "proc warning_count*(MySQL: PMySQL): cuint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_warning_count\".}"
  }, 
  {
    "name": "info", 
    "type": "skProc", 
    "code": "proc info*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, importc: \"mysql_info\".}"
  }, 
  {
    "name": "thread_id", 
    "type": "skProc", 
    "code": "proc thread_id*(MySQL: PMySQL): int {.stdcall, dynlib: lib, \u000A                                      importc: \"mysql_thread_id\".}"
  }, 
  {
    "name": "character_set_name", 
    "type": "skProc", 
    "code": "proc character_set_name*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_character_set_name\".}"
  }, 
  {
    "name": "set_character_set", 
    "type": "skProc", 
    "code": "proc set_character_set*(MySQL: PMySQL; csname: cstring): int32 {.stdcall, \u000A    dynlib: lib, importc: \"mysql_set_character_set\".}"
  }, 
  {
    "name": "init", 
    "type": "skProc", 
    "code": "proc init*(MySQL: PMySQL): PMySQL {.stdcall, dynlib: lib, importc: \"mysql_init\".}"
  }, 
  {
    "name": "ssl_set", 
    "type": "skProc", 
    "code": "proc ssl_set*(MySQL: PMySQL; key: cstring; cert: cstring; ca: cstring; \u000A              capath: cstring; cipher: cstring): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_ssl_set\".}"
  }, 
  {
    "name": "change_user", 
    "type": "skProc", 
    "code": "proc change_user*(MySQL: PMySQL; user: cstring; passwd: cstring; db: cstring): my_bool {.\u000A    stdcall, dynlib: lib, importc: \"mysql_change_user\".}"
  }, 
  {
    "name": "real_connect", 
    "type": "skProc", 
    "code": "proc real_connect*(MySQL: PMySQL; host: cstring; user: cstring; passwd: cstring; \u000A                   db: cstring; port: cuint; unix_socket: cstring; \u000A                   clientflag: int): PMySQL {.stdcall, dynlib: lib, \u000A    importc: \"mysql_real_connect\".}"
  }, 
  {
    "name": "select_db", 
    "type": "skProc", 
    "code": "proc select_db*(MySQL: PMySQL; db: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_select_db\".}"
  }, 
  {
    "name": "query", 
    "type": "skProc", 
    "code": "proc query*(MySQL: PMySQL; q: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_query\".}"
  }, 
  {
    "name": "send_query", 
    "type": "skProc", 
    "code": "proc send_query*(MySQL: PMySQL; q: cstring; len: int): cint {.stdcall, \u000A    dynlib: lib, importc: \"mysql_send_query\".}"
  }, 
  {
    "name": "real_query", 
    "type": "skProc", 
    "code": "proc real_query*(MySQL: PMySQL; q: cstring; len: int): cint {.stdcall, \u000A    dynlib: lib, importc: \"mysql_real_query\".}"
  }, 
  {
    "name": "store_result", 
    "type": "skProc", 
    "code": "proc store_result*(MySQL: PMySQL): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_store_result\".}"
  }, 
  {
    "name": "use_result", 
    "type": "skProc", 
    "code": "proc use_result*(MySQL: PMySQL): PRES {.stdcall, dynlib: lib, \u000A                                        importc: \"mysql_use_result\".}"
  }, 
  {
    "name": "master_query", 
    "type": "skProc", 
    "code": "proc master_query*(MySQL: PMySQL; q: cstring; len: int): my_bool {.stdcall, \u000A    dynlib: lib, importc: \"mysql_master_query\".}"
  }, 
  {
    "name": "master_send_query", 
    "type": "skProc", 
    "code": "proc master_send_query*(MySQL: PMySQL; q: cstring; len: int): my_bool {.stdcall, \u000A    dynlib: lib, importc: \"mysql_master_send_query\".}"
  }, 
  {
    "name": "slave_query", 
    "type": "skProc", 
    "code": "proc slave_query*(MySQL: PMySQL; q: cstring; len: int): my_bool {.stdcall, \u000A    dynlib: lib, importc: \"mysql_slave_query\".}"
  }, 
  {
    "name": "slave_send_query", 
    "type": "skProc", 
    "code": "proc slave_send_query*(MySQL: PMySQL; q: cstring; len: int): my_bool {.stdcall, \u000A    dynlib: lib, importc: \"mysql_slave_send_query\".}"
  }, 
  {
    "name": "get_character_set_info", 
    "type": "skProc", 
    "code": "proc get_character_set_info*(MySQL: PMySQL; charset: PMY_CHARSET_INFO) {.\u000A    stdcall, dynlib: lib, importc: \"mysql_get_character_set_info\".}"
  }, 
  {
    "name": "LOCAL_INFILE_ERROR_LEN", 
    "type": "skConst", 
    "code": "LOCAL_INFILE_ERROR_LEN* = 512"
  }, 
  {
    "name": "set_local_infile_default", 
    "type": "skProc", 
    "code": "proc set_local_infile_default*(MySQL: PMySQL) {.cdecl, dynlib: lib, \u000A    importc: \"mysql_set_local_infile_default\".}"
  }, 
  {
    "name": "enable_rpl_parse", 
    "type": "skProc", 
    "code": "proc enable_rpl_parse*(MySQL: PMySQL) {.stdcall, dynlib: lib, \u000A                                        importc: \"mysql_enable_rpl_parse\".}"
  }, 
  {
    "name": "disable_rpl_parse", 
    "type": "skProc", 
    "code": "proc disable_rpl_parse*(MySQL: PMySQL) {.stdcall, dynlib: lib, \u000A    importc: \"mysql_disable_rpl_parse\".}"
  }, 
  {
    "name": "rpl_parse_enabled", 
    "type": "skProc", 
    "code": "proc rpl_parse_enabled*(MySQL: PMySQL): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_rpl_parse_enabled\".}"
  }, 
  {
    "name": "enable_reads_from_master", 
    "type": "skProc", 
    "code": "proc enable_reads_from_master*(MySQL: PMySQL) {.stdcall, dynlib: lib, \u000A    importc: \"mysql_enable_reads_from_master\".}"
  }, 
  {
    "name": "disable_reads_from_master", 
    "type": "skProc", 
    "code": "proc disable_reads_from_master*(MySQL: PMySQL) {.stdcall, dynlib: lib, \u000A    importc: \"mysql_disable_reads_from_master\".}"
  }, 
  {
    "name": "reads_from_master_enabled", 
    "type": "skProc", 
    "code": "proc reads_from_master_enabled*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_reads_from_master_enabled\".}"
  }, 
  {
    "name": "rpl_query_type", 
    "type": "skProc", 
    "code": "proc rpl_query_type*(q: cstring; length: cint): Trpl_type {.stdcall, \u000A    dynlib: lib, importc: \"mysql_rpl_query_type\".}"
  }, 
  {
    "name": "rpl_probe", 
    "type": "skProc", 
    "code": "proc rpl_probe*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_rpl_probe\".}"
  }, 
  {
    "name": "set_master", 
    "type": "skProc", 
    "code": "proc set_master*(MySQL: PMySQL; host: cstring; port: cuint; user: cstring; \u000A                 passwd: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_set_master\".}"
  }, 
  {
    "name": "add_slave", 
    "type": "skProc", 
    "code": "proc add_slave*(MySQL: PMySQL; host: cstring; port: cuint; user: cstring; \u000A                passwd: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_add_slave\".}"
  }, 
  {
    "name": "shutdown", 
    "type": "skProc", 
    "code": "proc shutdown*(MySQL: PMySQL; shutdown_level: Tenum_shutdown_level): cint {.\u000A    stdcall, dynlib: lib, importc: \"mysql_shutdown\".}"
  }, 
  {
    "name": "dump_debug_info", 
    "type": "skProc", 
    "code": "proc dump_debug_info*(MySQL: PMySQL): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_dump_debug_info\".}"
  }, 
  {
    "name": "refresh", 
    "type": "skProc", 
    "code": "proc refresh*(sql: PMySQL; refresh_options: cuint): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_refresh\".}"
  }, 
  {
    "name": "kill", 
    "type": "skProc", 
    "code": "proc kill*(MySQL: PMySQL; pid: int): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_kill\".}"
  }, 
  {
    "name": "set_server_option", 
    "type": "skProc", 
    "code": "proc set_server_option*(MySQL: PMySQL; option: Tenum_mysql_set_option): cint {.\u000A    stdcall, dynlib: lib, importc: \"mysql_set_server_option\".}"
  }, 
  {
    "name": "ping", 
    "type": "skProc", 
    "code": "proc ping*(MySQL: PMySQL): cint {.stdcall, dynlib: lib, importc: \"mysql_ping\".}"
  }, 
  {
    "name": "stat", 
    "type": "skProc", 
    "code": "proc stat*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, importc: \"mysql_stat\".}"
  }, 
  {
    "name": "get_server_info", 
    "type": "skProc", 
    "code": "proc get_server_info*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_get_server_info\".}"
  }, 
  {
    "name": "get_client_info", 
    "type": "skProc", 
    "code": "proc get_client_info*(): cstring {.stdcall, dynlib: lib, \u000A                                   importc: \"mysql_get_client_info\".}"
  }, 
  {
    "name": "get_client_version", 
    "type": "skProc", 
    "code": "proc get_client_version*(): int {.stdcall, dynlib: lib, \u000A                                  importc: \"mysql_get_client_version\".}"
  }, 
  {
    "name": "get_host_info", 
    "type": "skProc", 
    "code": "proc get_host_info*(MySQL: PMySQL): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_get_host_info\".}"
  }, 
  {
    "name": "get_server_version", 
    "type": "skProc", 
    "code": "proc get_server_version*(MySQL: PMySQL): int {.stdcall, dynlib: lib, \u000A    importc: \"mysql_get_server_version\".}"
  }, 
  {
    "name": "get_proto_info", 
    "type": "skProc", 
    "code": "proc get_proto_info*(MySQL: PMySQL): cuint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_get_proto_info\".}"
  }, 
  {
    "name": "list_dbs", 
    "type": "skProc", 
    "code": "proc list_dbs*(MySQL: PMySQL; wild: cstring): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_list_dbs\".}"
  }, 
  {
    "name": "list_tables", 
    "type": "skProc", 
    "code": "proc list_tables*(MySQL: PMySQL; wild: cstring): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_list_tables\".}"
  }, 
  {
    "name": "list_processes", 
    "type": "skProc", 
    "code": "proc list_processes*(MySQL: PMySQL): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_list_processes\".}"
  }, 
  {
    "name": "options", 
    "type": "skProc", 
    "code": "proc options*(MySQL: PMySQL; option: Toption; arg: cstring): cint {.stdcall, \u000A    dynlib: lib, importc: \"mysql_options\".}"
  }, 
  {
    "name": "free_result", 
    "type": "skProc", 
    "code": "proc free_result*(result: PRES) {.stdcall, dynlib: lib, \u000A                                  importc: \"mysql_free_result\".}"
  }, 
  {
    "name": "data_seek", 
    "type": "skProc", 
    "code": "proc data_seek*(result: PRES; offset: my_ulonglong) {.stdcall, dynlib: lib, \u000A    importc: \"mysql_data_seek\".}"
  }, 
  {
    "name": "row_seek", 
    "type": "skProc", 
    "code": "proc row_seek*(result: PRES; offset: TROW_OFFSET): TROW_OFFSET {.stdcall, \u000A    dynlib: lib, importc: \"mysql_row_seek\".}"
  }, 
  {
    "name": "field_seek", 
    "type": "skProc", 
    "code": "proc field_seek*(result: PRES; offset: TFIELD_OFFSET): TFIELD_OFFSET {.stdcall, \u000A    dynlib: lib, importc: \"mysql_field_seek\".}"
  }, 
  {
    "name": "fetch_row", 
    "type": "skProc", 
    "code": "proc fetch_row*(result: PRES): TROW {.stdcall, dynlib: lib, \u000A                                      importc: \"mysql_fetch_row\".}"
  }, 
  {
    "name": "fetch_lengths", 
    "type": "skProc", 
    "code": "proc fetch_lengths*(result: PRES): ptr int {.stdcall, dynlib: lib, \u000A    importc: \"mysql_fetch_lengths\".}"
  }, 
  {
    "name": "fetch_field", 
    "type": "skProc", 
    "code": "proc fetch_field*(result: PRES): PFIELD {.stdcall, dynlib: lib, \u000A    importc: \"mysql_fetch_field\".}"
  }, 
  {
    "name": "list_fields", 
    "type": "skProc", 
    "code": "proc list_fields*(MySQL: PMySQL; table: cstring; wild: cstring): PRES {.stdcall, \u000A    dynlib: lib, importc: \"mysql_list_fields\".}"
  }, 
  {
    "name": "escape_string", 
    "type": "skProc", 
    "code": "proc escape_string*(fto: cstring; `from`: cstring; from_length: int): int {.\u000A    stdcall, dynlib: lib, importc: \"mysql_escape_string\".}"
  }, 
  {
    "name": "hex_string", 
    "type": "skProc", 
    "code": "proc hex_string*(fto: cstring; `from`: cstring; from_length: int): int {.\u000A    stdcall, dynlib: lib, importc: \"mysql_hex_string\".}"
  }, 
  {
    "name": "real_escape_string", 
    "type": "skProc", 
    "code": "proc real_escape_string*(MySQL: PMySQL; fto: cstring; `from`: cstring; len: int): int {.\u000A    stdcall, dynlib: lib, importc: \"mysql_real_escape_string\".}"
  }, 
  {
    "name": "debug", 
    "type": "skProc", 
    "code": "proc debug*(debug: cstring) {.stdcall, dynlib: lib, importc: \"mysql_debug\".}"
  }, 
  {
    "name": "myodbc_remove_escape", 
    "type": "skProc", 
    "code": "proc myodbc_remove_escape*(MySQL: PMySQL; name: cstring) {.stdcall, dynlib: lib, \u000A    importc: \"myodbc_remove_escape\".}"
  }, 
  {
    "name": "thread_safe", 
    "type": "skProc", 
    "code": "proc thread_safe*(): cuint {.stdcall, dynlib: lib, importc: \"mysql_thread_safe\".}"
  }, 
  {
    "name": "embedded", 
    "type": "skProc", 
    "code": "proc embedded*(): my_bool {.stdcall, dynlib: lib, importc: \"mysql_embedded\".}"
  }, 
  {
    "name": "manager_init", 
    "type": "skProc", 
    "code": "proc manager_init*(con: PMANAGER): PMANAGER {.stdcall, dynlib: lib, \u000A    importc: \"mysql_manager_init\".}"
  }, 
  {
    "name": "manager_connect", 
    "type": "skProc", 
    "code": "proc manager_connect*(con: PMANAGER; host: cstring; user: cstring; \u000A                      passwd: cstring; port: cuint): PMANAGER {.stdcall, \u000A    dynlib: lib, importc: \"mysql_manager_connect\".}"
  }, 
  {
    "name": "manager_close", 
    "type": "skProc", 
    "code": "proc manager_close*(con: PMANAGER) {.stdcall, dynlib: lib, \u000A                                     importc: \"mysql_manager_close\".}"
  }, 
  {
    "name": "manager_command", 
    "type": "skProc", 
    "code": "proc manager_command*(con: PMANAGER; cmd: cstring; cmd_len: cint): cint {.\u000A    stdcall, dynlib: lib, importc: \"mysql_manager_command\".}"
  }, 
  {
    "name": "manager_fetch_line", 
    "type": "skProc", 
    "code": "proc manager_fetch_line*(con: PMANAGER; res_buf: cstring; res_buf_size: cint): cint {.\u000A    stdcall, dynlib: lib, importc: \"mysql_manager_fetch_line\".}"
  }, 
  {
    "name": "read_query_result", 
    "type": "skProc", 
    "code": "proc read_query_result*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_read_query_result\".}"
  }, 
  {
    "name": "stmt_init", 
    "type": "skProc", 
    "code": "proc stmt_init*(MySQL: PMySQL): PSTMT {.stdcall, dynlib: lib, \u000A                                        importc: \"mysql_stmt_init\".}"
  }, 
  {
    "name": "stmt_prepare", 
    "type": "skProc", 
    "code": "proc stmt_prepare*(stmt: PSTMT; query: cstring; len: int): cint {.stdcall, \u000A    dynlib: lib, importc: \"mysql_stmt_prepare\".}"
  }, 
  {
    "name": "stmt_execute", 
    "type": "skProc", 
    "code": "proc stmt_execute*(stmt: PSTMT): cint {.stdcall, dynlib: lib, \u000A                                        importc: \"mysql_stmt_execute\".}"
  }, 
  {
    "name": "stmt_fetch", 
    "type": "skProc", 
    "code": "proc stmt_fetch*(stmt: PSTMT): cint {.stdcall, dynlib: lib, \u000A                                      importc: \"mysql_stmt_fetch\".}"
  }, 
  {
    "name": "stmt_fetch_column", 
    "type": "skProc", 
    "code": "proc stmt_fetch_column*(stmt: PSTMT; `bind`: PBIND; column: cuint; offset: int): cint {.\u000A    stdcall, dynlib: lib, importc: \"mysql_stmt_fetch_column\".}"
  }, 
  {
    "name": "stmt_store_result", 
    "type": "skProc", 
    "code": "proc stmt_store_result*(stmt: PSTMT): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_store_result\".}"
  }, 
  {
    "name": "stmt_param_count", 
    "type": "skProc", 
    "code": "proc stmt_param_count*(stmt: PSTMT): int {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_param_count\".}"
  }, 
  {
    "name": "stmt_attr_set", 
    "type": "skProc", 
    "code": "proc stmt_attr_set*(stmt: PSTMT; attr_type: Tenum_stmt_attr_type; attr: pointer): my_bool {.\u000A    stdcall, dynlib: lib, importc: \"mysql_stmt_attr_set\".}"
  }, 
  {
    "name": "stmt_attr_get", 
    "type": "skProc", 
    "code": "proc stmt_attr_get*(stmt: PSTMT; attr_type: Tenum_stmt_attr_type; attr: pointer): my_bool {.\u000A    stdcall, dynlib: lib, importc: \"mysql_stmt_attr_get\".}"
  }, 
  {
    "name": "stmt_bind_param", 
    "type": "skProc", 
    "code": "proc stmt_bind_param*(stmt: PSTMT; bnd: PBIND): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_bind_param\".}"
  }, 
  {
    "name": "stmt_bind_result", 
    "type": "skProc", 
    "code": "proc stmt_bind_result*(stmt: PSTMT; bnd: PBIND): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_bind_result\".}"
  }, 
  {
    "name": "stmt_close", 
    "type": "skProc", 
    "code": "proc stmt_close*(stmt: PSTMT): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_close\".}"
  }, 
  {
    "name": "stmt_reset", 
    "type": "skProc", 
    "code": "proc stmt_reset*(stmt: PSTMT): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_reset\".}"
  }, 
  {
    "name": "stmt_free_result", 
    "type": "skProc", 
    "code": "proc stmt_free_result*(stmt: PSTMT): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_free_result\".}"
  }, 
  {
    "name": "stmt_send_long_data", 
    "type": "skProc", 
    "code": "proc stmt_send_long_data*(stmt: PSTMT; param_number: cuint; data: cstring; \u000A                          len: int): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_send_long_data\".}"
  }, 
  {
    "name": "stmt_result_metadata", 
    "type": "skProc", 
    "code": "proc stmt_result_metadata*(stmt: PSTMT): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_result_metadata\".}"
  }, 
  {
    "name": "stmt_param_metadata", 
    "type": "skProc", 
    "code": "proc stmt_param_metadata*(stmt: PSTMT): PRES {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_param_metadata\".}"
  }, 
  {
    "name": "stmt_errno", 
    "type": "skProc", 
    "code": "proc stmt_errno*(stmt: PSTMT): cuint {.stdcall, dynlib: lib, \u000A                                       importc: \"mysql_stmt_errno\".}"
  }, 
  {
    "name": "stmt_error", 
    "type": "skProc", 
    "code": "proc stmt_error*(stmt: PSTMT): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_error\".}"
  }, 
  {
    "name": "stmt_sqlstate", 
    "type": "skProc", 
    "code": "proc stmt_sqlstate*(stmt: PSTMT): cstring {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_sqlstate\".}"
  }, 
  {
    "name": "stmt_row_seek", 
    "type": "skProc", 
    "code": "proc stmt_row_seek*(stmt: PSTMT; offset: TROW_OFFSET): TROW_OFFSET {.stdcall, \u000A    dynlib: lib, importc: \"mysql_stmt_row_seek\".}"
  }, 
  {
    "name": "stmt_row_tell", 
    "type": "skProc", 
    "code": "proc stmt_row_tell*(stmt: PSTMT): TROW_OFFSET {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_row_tell\".}"
  }, 
  {
    "name": "stmt_data_seek", 
    "type": "skProc", 
    "code": "proc stmt_data_seek*(stmt: PSTMT; offset: my_ulonglong) {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_data_seek\".}"
  }, 
  {
    "name": "stmt_num_rows", 
    "type": "skProc", 
    "code": "proc stmt_num_rows*(stmt: PSTMT): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_num_rows\".}"
  }, 
  {
    "name": "stmt_affected_rows", 
    "type": "skProc", 
    "code": "proc stmt_affected_rows*(stmt: PSTMT): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_affected_rows\".}"
  }, 
  {
    "name": "stmt_insert_id", 
    "type": "skProc", 
    "code": "proc stmt_insert_id*(stmt: PSTMT): my_ulonglong {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_insert_id\".}"
  }, 
  {
    "name": "stmt_field_count", 
    "type": "skProc", 
    "code": "proc stmt_field_count*(stmt: PSTMT): cuint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_stmt_field_count\".}"
  }, 
  {
    "name": "commit", 
    "type": "skProc", 
    "code": "proc commit*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A                                       importc: \"mysql_commit\".}"
  }, 
  {
    "name": "rollback", 
    "type": "skProc", 
    "code": "proc rollback*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_rollback\".}"
  }, 
  {
    "name": "autocommit", 
    "type": "skProc", 
    "code": "proc autocommit*(MySQL: PMySQL; auto_mode: my_bool): my_bool {.stdcall, \u000A    dynlib: lib, importc: \"mysql_autocommit\".}"
  }, 
  {
    "name": "more_results", 
    "type": "skProc", 
    "code": "proc more_results*(MySQL: PMySQL): my_bool {.stdcall, dynlib: lib, \u000A    importc: \"mysql_more_results\".}"
  }, 
  {
    "name": "next_result", 
    "type": "skProc", 
    "code": "proc next_result*(MySQL: PMySQL): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_next_result\".}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "code": "proc close*(sock: PMySQL) {.stdcall, dynlib: lib, importc: \"mysql_close\".}"
  }, 
  {
    "name": "DATA_TRUNCATED", 
    "type": "skConst", 
    "code": "DATA_TRUNCATED* = 101"
  }, 
  {
    "name": "reload", 
    "type": "skProc", 
    "code": "proc reload*(x: PMySQL): cint"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "code": "proc connect*(MySQL: PMySQL; host: cstring; user: cstring; passwd: cstring): PMySQL {.\u000A    stdcall, dynlib: lib, importc: \"mysql_connect\".}"
  }, 
  {
    "name": "create_db", 
    "type": "skProc", 
    "code": "proc create_db*(MySQL: PMySQL; DB: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_create_db\".}"
  }, 
  {
    "name": "drop_db", 
    "type": "skProc", 
    "code": "proc drop_db*(MySQL: PMySQL; DB: cstring): cint {.stdcall, dynlib: lib, \u000A    importc: \"mysql_drop_db\".}"
  }, 
  {
    "name": "net_safe_read", 
    "type": "skProc", 
    "code": "proc net_safe_read*(MySQL: PMySQL): cuint {.cdecl, dynlib: lib, \u000A    importc: \"net_safe_read\".}"
  }
]