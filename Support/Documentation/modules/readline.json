[
  {
    "name": "readlineDll", 
    "type": "skConst", 
    "code": "readlineDll* = \"readline.dll\""
  }, 
  {
    "name": "largest_char", 
    "type": "skConst", 
    "code": "largest_char* = 255"
  }, 
  {
    "name": "CTRL_CHAR", 
    "type": "skTemplate", 
    "code": "template CTRL_CHAR*(c: expr): expr"
  }, 
  {
    "name": "META_CHAR", 
    "type": "skTemplate", 
    "code": "template META_CHAR*(c: expr): expr"
  }, 
  {
    "name": "CTRL", 
    "type": "skTemplate", 
    "code": "template CTRL*(c: expr): expr"
  }, 
  {
    "name": "META", 
    "type": "skTemplate", 
    "code": "template META*(c: expr): expr"
  }, 
  {
    "name": "UNMETA", 
    "type": "skTemplate", 
    "code": "template UNMETA*(c: expr): expr"
  }, 
  {
    "name": "UNCTRL", 
    "type": "skTemplate", 
    "code": "template UNCTRL*(c: expr): expr"
  }, 
  {
    "name": "ESC_CHAR", 
    "type": "skConst", 
    "code": "ESC_CHAR* = CTRL('['.ord)"
  }, 
  {
    "name": "TKEYMAP_ENTRY", 
    "type": "skType", 
    "code": "TKEYMAP_ENTRY* {.pure, final.} = object \u000A  typ*: char\u000A  function*: TCommandFunc\u000A"
  }, 
  {
    "name": "ANYOTHERKEY", 
    "type": "skConst", 
    "code": "ANYOTHERKEY* = KEYMAP_SIZE - 1"
  }, 
  {
    "name": "PKeymap", 
    "type": "skType", 
    "code": "PKeymap* = ptr TKEYMAP_ENTRY"
  }, 
  {
    "name": "ISMACR", 
    "type": "skConst", 
    "code": "ISMACR* = 2"
  }, 
  {
    "name": "make_bare_keymap", 
    "type": "skProc", 
    "code": "proc make_bare_keymap*(): PKeymap {.cdecl, importc: \"rl_make_bare_keymap\", \u000A                                    dynlib: readlineDll.}"
  }, 
  {
    "name": "copy_keymap", 
    "type": "skProc", 
    "code": "proc copy_keymap*(a2: PKeymap): PKeymap {.cdecl, importc: \"rl_copy_keymap\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "make_keymap", 
    "type": "skProc", 
    "code": "proc make_keymap*(): PKeymap {.cdecl, importc: \"rl_make_keymap\", \u000A                               dynlib: readlineDll.}"
  }, 
  {
    "name": "discard_keymap", 
    "type": "skProc", 
    "code": "proc discard_keymap*(a2: PKeymap) {.cdecl, importc: \"rl_discard_keymap\", \u000A                                    dynlib: readlineDll.}"
  }, 
  {
    "name": "get_keymap_by_name", 
    "type": "skProc", 
    "code": "proc get_keymap_by_name*(a2: cstring): PKeymap {.cdecl, \u000A    importc: \"rl_get_keymap_by_name\", dynlib: readlineDll.}"
  }, 
  {
    "name": "get_keymap", 
    "type": "skProc", 
    "code": "proc get_keymap*(): PKeymap {.cdecl, importc: \"rl_get_keymap\", \u000A                              dynlib: readlineDll.}"
  }, 
  {
    "name": "set_keymap", 
    "type": "skProc", 
    "code": "proc set_keymap*(a2: PKeymap) {.cdecl, importc: \"rl_set_keymap\", \u000A                                dynlib: readlineDll.}"
  }, 
  {
    "name": "Thook_func", 
    "type": "skType", 
    "code": "Thook_func* = proc (a2: cstring): cstring {.cdecl.}"
  }, 
  {
    "name": "expansion_preexpansion_hook", 
    "type": "skVar", 
    "code": "expansion_preexpansion_hook* {.importc: \"tilde_expansion_preexpansion_hook\", \u000A                               dynlib: tildeDll.}: Thook_func"
  }, 
  {
    "name": "expansion_failure_hook", 
    "type": "skVar", 
    "code": "expansion_failure_hook* {.importc: \"tilde_expansion_failure_hook\", \u000A                          dynlib: tildeDll.}: Thook_func"
  }, 
  {
    "name": "additional_prefixes", 
    "type": "skVar", 
    "code": "additional_prefixes* {.importc: \"tilde_additional_prefixes\", dynlib: tildeDll.}: cstringArray"
  }, 
  {
    "name": "additional_suffixes", 
    "type": "skVar", 
    "code": "additional_suffixes* {.importc: \"tilde_additional_suffixes\", dynlib: tildeDll.}: cstringArray"
  }, 
  {
    "name": "expand", 
    "type": "skProc", 
    "code": "proc expand*(a2: cstring): cstring {.cdecl, importc: \"tilde_expand\", \u000A                                     dynlib: tildeDll.}"
  }, 
  {
    "name": "expand_word", 
    "type": "skProc", 
    "code": "proc expand_word*(a2: cstring): cstring {.cdecl, importc: \"tilde_expand_word\", \u000A    dynlib: tildeDll.}"
  }, 
  {
    "name": "find_word", 
    "type": "skProc", 
    "code": "proc find_word*(a2: cstring; a3: cint; a4: ptr cint): cstring {.cdecl, \u000A    importc: \"tilde_find_word\", dynlib: tildeDll.}"
  }, 
  {
    "name": "VERSION_MINOR", 
    "type": "skConst", 
    "code": "VERSION_MINOR* = 0"
  }, 
  {
    "name": "Tundo_code", 
    "type": "skType", 
    "code": "Tundo_code* = enum \u000A  UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END"
  }, 
  {
    "name": "TUNDO_LIST", 
    "type": "skType", 
    "code": "TUNDO_LIST* {.pure, final.} = object \u000A  next*: ptr Tundo_list\u000A  start*: cint\u000A  theEnd*: cint\u000A  text*: cstring\u000A  what*: Tundo_code\u000A"
  }, 
  {
    "name": "undo_list", 
    "type": "skVar", 
    "code": "undo_list* {.importc: \"rl_undo_list\", dynlib: readlineDll.}: ptr TUNDO_LIST"
  }, 
  {
    "name": "TFUNMAP", 
    "type": "skType", 
    "code": "TFUNMAP* {.pure, final.} = object \u000A  name*: cstring\u000A  function*: TCommandFunc\u000A"
  }, 
  {
    "name": "funmap", 
    "type": "skVar", 
    "code": "funmap* {.importc: \"funmap\", dynlib: readlineDll.}: ptr ptr TFUNMAP"
  }, 
  {
    "name": "digit_argument", 
    "type": "skProc", 
    "code": "proc digit_argument*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_digit_argument\", dynlib: readlineDll.}"
  }, 
  {
    "name": "universal_argument", 
    "type": "skProc", 
    "code": "proc universal_argument*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_universal_argument\", dynlib: readlineDll.}"
  }, 
  {
    "name": "forward_byte", 
    "type": "skProc", 
    "code": "proc forward_byte*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_forward_byte\", dynlib: readlineDll.}"
  }, 
  {
    "name": "forward_char", 
    "type": "skProc", 
    "code": "proc forward_char*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_forward_char\", dynlib: readlineDll.}"
  }, 
  {
    "name": "forward", 
    "type": "skProc", 
    "code": "proc forward*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_forward\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_byte", 
    "type": "skProc", 
    "code": "proc backward_byte*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_byte\", dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_char", 
    "type": "skProc", 
    "code": "proc backward_char*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_char\", dynlib: readlineDll.}"
  }, 
  {
    "name": "backward", 
    "type": "skProc", 
    "code": "proc backward*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_backward\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "beg_of_line", 
    "type": "skProc", 
    "code": "proc beg_of_line*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_beg_of_line\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "end_of_line", 
    "type": "skProc", 
    "code": "proc end_of_line*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_end_of_line\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "forward_word", 
    "type": "skProc", 
    "code": "proc forward_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_forward_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_word", 
    "type": "skProc", 
    "code": "proc backward_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "refresh_line", 
    "type": "skProc", 
    "code": "proc refresh_line*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_refresh_line\", dynlib: readlineDll.}"
  }, 
  {
    "name": "clear_screen", 
    "type": "skProc", 
    "code": "proc clear_screen*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_clear_screen\", dynlib: readlineDll.}"
  }, 
  {
    "name": "skip_csi_sequence", 
    "type": "skProc", 
    "code": "proc skip_csi_sequence*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_skip_csi_sequence\", dynlib: readlineDll.}"
  }, 
  {
    "name": "arrow_keys", 
    "type": "skProc", 
    "code": "proc arrow_keys*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_arrow_keys\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "insert", 
    "type": "skProc", 
    "code": "proc insert*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_insert\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "quoted_insert", 
    "type": "skProc", 
    "code": "proc quoted_insert*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_quoted_insert\", dynlib: readlineDll.}"
  }, 
  {
    "name": "tab_insert", 
    "type": "skProc", 
    "code": "proc tab_insert*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_tab_insert\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "newline", 
    "type": "skProc", 
    "code": "proc newline*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_newline\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "do_lowercase_version", 
    "type": "skProc", 
    "code": "proc do_lowercase_version*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_do_lowercase_version\", dynlib: readlineDll.}"
  }, 
  {
    "name": "rubout", 
    "type": "skProc", 
    "code": "proc rubout*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_rubout\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "delete", 
    "type": "skProc", 
    "code": "proc delete*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_delete\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "rubout_or_delete", 
    "type": "skProc", 
    "code": "proc rubout_or_delete*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_rubout_or_delete\", dynlib: readlineDll.}"
  }, 
  {
    "name": "delete_horizontal_space", 
    "type": "skProc", 
    "code": "proc delete_horizontal_space*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_delete_horizontal_space\", dynlib: readlineDll.}"
  }, 
  {
    "name": "delete_or_show_completions", 
    "type": "skProc", 
    "code": "proc delete_or_show_completions*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_delete_or_show_completions\", dynlib: readlineDll.}"
  }, 
  {
    "name": "insert_comment", 
    "type": "skProc", 
    "code": "proc insert_comment*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_insert_comment\", dynlib: readlineDll.}"
  }, 
  {
    "name": "upcase_word", 
    "type": "skProc", 
    "code": "proc upcase_word*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_upcase_word\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "downcase_word", 
    "type": "skProc", 
    "code": "proc downcase_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_downcase_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "capitalize_word", 
    "type": "skProc", 
    "code": "proc capitalize_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_capitalize_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "transpose_words", 
    "type": "skProc", 
    "code": "proc transpose_words*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_transpose_words\", dynlib: readlineDll.}"
  }, 
  {
    "name": "transpose_chars", 
    "type": "skProc", 
    "code": "proc transpose_chars*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_transpose_chars\", dynlib: readlineDll.}"
  }, 
  {
    "name": "char_search", 
    "type": "skProc", 
    "code": "proc char_search*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_char_search\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_char_search", 
    "type": "skProc", 
    "code": "proc backward_char_search*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_char_search\", dynlib: readlineDll.}"
  }, 
  {
    "name": "beginning_of_history", 
    "type": "skProc", 
    "code": "proc beginning_of_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_beginning_of_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "end_of_history", 
    "type": "skProc", 
    "code": "proc end_of_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_end_of_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "get_next_history", 
    "type": "skProc", 
    "code": "proc get_next_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_get_next_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "get_previous_history", 
    "type": "skProc", 
    "code": "proc get_previous_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_get_previous_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "set_mark", 
    "type": "skProc", 
    "code": "proc set_mark*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_set_mark\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "exchange_point_and_mark", 
    "type": "skProc", 
    "code": "proc exchange_point_and_mark*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_exchange_point_and_mark\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_editing_mode", 
    "type": "skProc", 
    "code": "proc vi_editing_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_editing_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "emacs_editing_mode", 
    "type": "skProc", 
    "code": "proc emacs_editing_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_emacs_editing_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "overwrite_mode", 
    "type": "skProc", 
    "code": "proc overwrite_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_overwrite_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "re_read_init_file", 
    "type": "skProc", 
    "code": "proc re_read_init_file*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_re_read_init_file\", dynlib: readlineDll.}"
  }, 
  {
    "name": "dump_functions", 
    "type": "skProc", 
    "code": "proc dump_functions*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_dump_functions\", dynlib: readlineDll.}"
  }, 
  {
    "name": "dump_macros", 
    "type": "skProc", 
    "code": "proc dump_macros*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_dump_macros\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "dump_variables", 
    "type": "skProc", 
    "code": "proc dump_variables*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_dump_variables\", dynlib: readlineDll.}"
  }, 
  {
    "name": "complete", 
    "type": "skProc", 
    "code": "proc complete*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_complete\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "possible_completions", 
    "type": "skProc", 
    "code": "proc possible_completions*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_possible_completions\", dynlib: readlineDll.}"
  }, 
  {
    "name": "insert_completions", 
    "type": "skProc", 
    "code": "proc insert_completions*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_insert_completions\", dynlib: readlineDll.}"
  }, 
  {
    "name": "old_menu_complete", 
    "type": "skProc", 
    "code": "proc old_menu_complete*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_old_menu_complete\", dynlib: readlineDll.}"
  }, 
  {
    "name": "menu_complete", 
    "type": "skProc", 
    "code": "proc menu_complete*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_menu_complete\", dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_menu_complete", 
    "type": "skProc", 
    "code": "proc backward_menu_complete*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_menu_complete\", dynlib: readlineDll.}"
  }, 
  {
    "name": "kill_word", 
    "type": "skProc", 
    "code": "proc kill_word*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_kill_word\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_kill_word", 
    "type": "skProc", 
    "code": "proc backward_kill_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_kill_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "kill_line", 
    "type": "skProc", 
    "code": "proc kill_line*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_kill_line\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "backward_kill_line", 
    "type": "skProc", 
    "code": "proc backward_kill_line*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_backward_kill_line\", dynlib: readlineDll.}"
  }, 
  {
    "name": "kill_full_line", 
    "type": "skProc", 
    "code": "proc kill_full_line*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_kill_full_line\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unix_word_rubout", 
    "type": "skProc", 
    "code": "proc unix_word_rubout*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_unix_word_rubout\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unix_filename_rubout", 
    "type": "skProc", 
    "code": "proc unix_filename_rubout*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_unix_filename_rubout\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unix_line_discard", 
    "type": "skProc", 
    "code": "proc unix_line_discard*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_unix_line_discard\", dynlib: readlineDll.}"
  }, 
  {
    "name": "copy_region_to_kill", 
    "type": "skProc", 
    "code": "proc copy_region_to_kill*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_copy_region_to_kill\", dynlib: readlineDll.}"
  }, 
  {
    "name": "kill_region", 
    "type": "skProc", 
    "code": "proc kill_region*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_kill_region\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "copy_forward_word", 
    "type": "skProc", 
    "code": "proc copy_forward_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_copy_forward_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "copy_backward_word", 
    "type": "skProc", 
    "code": "proc copy_backward_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_copy_backward_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "yank", 
    "type": "skProc", 
    "code": "proc yank*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_yank\", \u000A                                       dynlib: readlineDll.}"
  }, 
  {
    "name": "yank_pop", 
    "type": "skProc", 
    "code": "proc yank_pop*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_yank_pop\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "yank_nth_arg", 
    "type": "skProc", 
    "code": "proc yank_nth_arg*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_yank_nth_arg\", dynlib: readlineDll.}"
  }, 
  {
    "name": "yank_last_arg", 
    "type": "skProc", 
    "code": "proc yank_last_arg*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_yank_last_arg\", dynlib: readlineDll.}"
  }, 
  {
    "name": "paste_from_clipboard", 
    "type": "skProc", 
    "code": "proc paste_from_clipboard*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_paste_from_clipboard\", dynlib: readlineDll.}"
  }, 
  {
    "name": "reverse_search_history", 
    "type": "skProc", 
    "code": "proc reverse_search_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_reverse_search_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "forward_search_history", 
    "type": "skProc", 
    "code": "proc forward_search_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_forward_search_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "start_kbd_macro", 
    "type": "skProc", 
    "code": "proc start_kbd_macro*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_start_kbd_macro\", dynlib: readlineDll.}"
  }, 
  {
    "name": "end_kbd_macro", 
    "type": "skProc", 
    "code": "proc end_kbd_macro*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_end_kbd_macro\", dynlib: readlineDll.}"
  }, 
  {
    "name": "call_last_kbd_macro", 
    "type": "skProc", 
    "code": "proc call_last_kbd_macro*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_call_last_kbd_macro\", dynlib: readlineDll.}"
  }, 
  {
    "name": "revert_line", 
    "type": "skProc", 
    "code": "proc revert_line*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_revert_line\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "undo_command", 
    "type": "skProc", 
    "code": "proc undo_command*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_undo_command\", dynlib: readlineDll.}"
  }, 
  {
    "name": "tilde_expand", 
    "type": "skProc", 
    "code": "proc tilde_expand*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_tilde_expand\", dynlib: readlineDll.}"
  }, 
  {
    "name": "restart_output", 
    "type": "skProc", 
    "code": "proc restart_output*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_restart_output\", dynlib: readlineDll.}"
  }, 
  {
    "name": "stop_output", 
    "type": "skProc", 
    "code": "proc stop_output*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_stop_output\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "abort", 
    "type": "skProc", 
    "code": "proc abort*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_abort\", \u000A                                        dynlib: readlineDll.}"
  }, 
  {
    "name": "tty_status", 
    "type": "skProc", 
    "code": "proc tty_status*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_tty_status\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "history_search_forward", 
    "type": "skProc", 
    "code": "proc history_search_forward*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_history_search_forward\", dynlib: readlineDll.}"
  }, 
  {
    "name": "history_search_backward", 
    "type": "skProc", 
    "code": "proc history_search_backward*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_history_search_backward\", dynlib: readlineDll.}"
  }, 
  {
    "name": "noninc_forward_search", 
    "type": "skProc", 
    "code": "proc noninc_forward_search*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_noninc_forward_search\", dynlib: readlineDll.}"
  }, 
  {
    "name": "noninc_reverse_search", 
    "type": "skProc", 
    "code": "proc noninc_reverse_search*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_noninc_reverse_search\", dynlib: readlineDll.}"
  }, 
  {
    "name": "noninc_forward_search_again", 
    "type": "skProc", 
    "code": "proc noninc_forward_search_again*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_noninc_forward_search_again\", dynlib: readlineDll.}"
  }, 
  {
    "name": "noninc_reverse_search_again", 
    "type": "skProc", 
    "code": "proc noninc_reverse_search_again*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_noninc_reverse_search_again\", dynlib: readlineDll.}"
  }, 
  {
    "name": "insert_close", 
    "type": "skProc", 
    "code": "proc insert_close*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_insert_close\", dynlib: readlineDll.}"
  }, 
  {
    "name": "callback_handler_install", 
    "type": "skProc", 
    "code": "proc callback_handler_install*(a2: cstring; a3: TvcpFunc) {.cdecl, \u000A    importc: \"rl_callback_handler_install\", dynlib: readlineDll.}"
  }, 
  {
    "name": "callback_read_char", 
    "type": "skProc", 
    "code": "proc callback_read_char*() {.cdecl, importc: \"rl_callback_read_char\", \u000A                             dynlib: readlineDll.}"
  }, 
  {
    "name": "callback_handler_remove", 
    "type": "skProc", 
    "code": "proc callback_handler_remove*() {.cdecl, importc: \"rl_callback_handler_remove\", \u000A                                  dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_redo", 
    "type": "skProc", 
    "code": "proc vi_redo*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_redo\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_undo", 
    "type": "skProc", 
    "code": "proc vi_undo*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_undo\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_yank_arg", 
    "type": "skProc", 
    "code": "proc vi_yank_arg*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_yank_arg\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_fetch_history", 
    "type": "skProc", 
    "code": "proc vi_fetch_history*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_fetch_history\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_search_again", 
    "type": "skProc", 
    "code": "proc vi_search_again*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_search_again\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_search", 
    "type": "skProc", 
    "code": "proc vi_search*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_search\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_complete", 
    "type": "skProc", 
    "code": "proc vi_complete*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_complete\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_tilde_expand", 
    "type": "skProc", 
    "code": "proc vi_tilde_expand*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_tilde_expand\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_prev_word", 
    "type": "skProc", 
    "code": "proc vi_prev_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_prev_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_next_word", 
    "type": "skProc", 
    "code": "proc vi_next_word*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_next_word\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_end_word", 
    "type": "skProc", 
    "code": "proc vi_end_word*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_end_word\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_insert_beg", 
    "type": "skProc", 
    "code": "proc vi_insert_beg*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_insert_beg\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_append_mode", 
    "type": "skProc", 
    "code": "proc vi_append_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_append_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_append_eol", 
    "type": "skProc", 
    "code": "proc vi_append_eol*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_append_eol\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_eof_maybe", 
    "type": "skProc", 
    "code": "proc vi_eof_maybe*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_eof_maybe\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_insertion_mode", 
    "type": "skProc", 
    "code": "proc vi_insertion_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_insertion_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_insert_mode", 
    "type": "skProc", 
    "code": "proc vi_insert_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_insert_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_movement_mode", 
    "type": "skProc", 
    "code": "proc vi_movement_mode*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_movement_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_arg_digit", 
    "type": "skProc", 
    "code": "proc vi_arg_digit*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_arg_digit\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_change_case", 
    "type": "skProc", 
    "code": "proc vi_change_case*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_change_case\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_put", 
    "type": "skProc", 
    "code": "proc vi_put*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_put\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_column", 
    "type": "skProc", 
    "code": "proc vi_column*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_column\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_delete_to", 
    "type": "skProc", 
    "code": "proc vi_delete_to*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_delete_to\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_change_to", 
    "type": "skProc", 
    "code": "proc vi_change_to*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_change_to\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_yank_to", 
    "type": "skProc", 
    "code": "proc vi_yank_to*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_yank_to\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_rubout", 
    "type": "skProc", 
    "code": "proc vi_rubout*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_rubout\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_delete", 
    "type": "skProc", 
    "code": "proc vi_delete*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_delete\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_back_to_indent", 
    "type": "skProc", 
    "code": "proc vi_back_to_indent*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_back_to_indent\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_first_print", 
    "type": "skProc", 
    "code": "proc vi_first_print*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_first_print\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_char_search", 
    "type": "skProc", 
    "code": "proc vi_char_search*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_char_search\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_match", 
    "type": "skProc", 
    "code": "proc vi_match*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_match\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_change_char", 
    "type": "skProc", 
    "code": "proc vi_change_char*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_change_char\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_subst", 
    "type": "skProc", 
    "code": "proc vi_subst*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_subst\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_overstrike", 
    "type": "skProc", 
    "code": "proc vi_overstrike*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_overstrike\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_overstrike_delete", 
    "type": "skProc", 
    "code": "proc vi_overstrike_delete*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_overstrike_delete\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_replace", 
    "type": "skProc", 
    "code": "proc vi_replace*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_replace\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_set_mark", 
    "type": "skProc", 
    "code": "proc vi_set_mark*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_set_mark\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_goto_mark", 
    "type": "skProc", 
    "code": "proc vi_goto_mark*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_vi_goto_mark\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_check", 
    "type": "skProc", 
    "code": "proc vi_check*(): cint {.cdecl, importc: \"rl_vi_check\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_domove", 
    "type": "skProc", 
    "code": "proc vi_domove*(a2: cint; a3: ptr cint): cint {.cdecl, importc: \"rl_vi_domove\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_bracktype", 
    "type": "skProc", 
    "code": "proc vi_bracktype*(a2: cint): cint {.cdecl, importc: \"rl_vi_bracktype\", \u000A                                     dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_start_inserting", 
    "type": "skProc", 
    "code": "proc vi_start_inserting*(a2: cint; a3: cint; a4: cint) {.cdecl, \u000A    importc: \"rl_vi_start_inserting\", dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_fXWord", 
    "type": "skProc", 
    "code": "proc vi_fXWord*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_fWord\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_bXWord", 
    "type": "skProc", 
    "code": "proc vi_bXWord*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_bWord\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_eXWord", 
    "type": "skProc", 
    "code": "proc vi_eXWord*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_eWord\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_fword", 
    "type": "skProc", 
    "code": "proc vi_fword*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_fword\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_bword", 
    "type": "skProc", 
    "code": "proc vi_bword*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_bword\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "vi_eword", 
    "type": "skProc", 
    "code": "proc vi_eword*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_vi_eword\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "readline", 
    "type": "skProc", 
    "code": "proc readline*(a2: cstring): cstring {.cdecl, importc: \"readline\", \u000A                                       dynlib: readlineDll.}"
  }, 
  {
    "name": "free", 
    "type": "skProc", 
    "description": "free the buffer that <cite>readline</cite> returned.", 
    "code": "proc free*(mem: cstring) {.importc: \"free\", nodecl.}"
  }, 
  {
    "name": "set_prompt", 
    "type": "skProc", 
    "code": "proc set_prompt*(a2: cstring): cint {.cdecl, importc: \"rl_set_prompt\", \u000A                                      dynlib: readlineDll.}"
  }, 
  {
    "name": "expand_prompt", 
    "type": "skProc", 
    "code": "proc expand_prompt*(a2: cstring): cint {.cdecl, importc: \"rl_expand_prompt\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "initialize", 
    "type": "skProc", 
    "code": "proc initialize*(): cint {.cdecl, importc: \"rl_initialize\", dynlib: readlineDll.}"
  }, 
  {
    "name": "discard_argument", 
    "type": "skProc", 
    "code": "proc discard_argument*(): cint {.cdecl, importc: \"rl_discard_argument\", \u000A                                 dynlib: readlineDll.}"
  }, 
  {
    "name": "add_defun", 
    "type": "skProc", 
    "code": "proc add_defun*(a2: cstring; a3: TCommandFunc; a4: cint): cint {.cdecl, \u000A    importc: \"rl_add_defun\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_key", 
    "type": "skProc", 
    "code": "proc bind_key*(a2: cint; a3: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_bind_key\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_key_in_map", 
    "type": "skProc", 
    "code": "proc bind_key_in_map*(a2: cint; a3: TCommandFunc; a4: PKeymap): cint {.cdecl, \u000A    importc: \"rl_bind_key_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unbind_key", 
    "type": "skProc", 
    "code": "proc unbind_key*(a2: cint): cint {.cdecl, importc: \"rl_unbind_key\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "unbind_key_in_map", 
    "type": "skProc", 
    "code": "proc unbind_key_in_map*(a2: cint; a3: PKeymap): cint {.cdecl, \u000A    importc: \"rl_unbind_key_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_key_if_unbound", 
    "type": "skProc", 
    "code": "proc bind_key_if_unbound*(a2: cint; a3: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_bind_key_if_unbound\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_key_if_unbound_in_map", 
    "type": "skProc", 
    "code": "proc bind_key_if_unbound_in_map*(a2: cint; a3: TCommandFunc; a4: PKeymap): cint {.\u000A    cdecl, importc: \"rl_bind_key_if_unbound_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unbind_function_in_map", 
    "type": "skProc", 
    "code": "proc unbind_function_in_map*(a2: TCommandFunc; a3: PKeymap): cint {.cdecl, \u000A    importc: \"rl_unbind_function_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "unbind_command_in_map", 
    "type": "skProc", 
    "code": "proc unbind_command_in_map*(a2: cstring; a3: PKeymap): cint {.cdecl, \u000A    importc: \"rl_unbind_command_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_keyseq", 
    "type": "skProc", 
    "code": "proc bind_keyseq*(a2: cstring; a3: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_bind_keyseq\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_keyseq_in_map", 
    "type": "skProc", 
    "code": "proc bind_keyseq_in_map*(a2: cstring; a3: TCommandFunc; a4: PKeymap): cint {.\u000A    cdecl, importc: \"rl_bind_keyseq_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_keyseq_if_unbound", 
    "type": "skProc", 
    "code": "proc bind_keyseq_if_unbound*(a2: cstring; a3: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_bind_keyseq_if_unbound\", dynlib: readlineDll.}"
  }, 
  {
    "name": "bind_keyseq_if_unbound_in_map", 
    "type": "skProc", 
    "code": "proc bind_keyseq_if_unbound_in_map*(a2: cstring; a3: TCommandFunc; a4: PKeymap): cint {.\u000A    cdecl, importc: \"rl_bind_keyseq_if_unbound_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "generic_bind", 
    "type": "skProc", 
    "code": "proc generic_bind*(a2: cint; a3: cstring; a4: cstring; a5: PKeymap): cint {.\u000A    cdecl, importc: \"rl_generic_bind\", dynlib: readlineDll.}"
  }, 
  {
    "name": "variable_value", 
    "type": "skProc", 
    "code": "proc variable_value*(a2: cstring): cstring {.cdecl, \u000A    importc: \"rl_variable_value\", dynlib: readlineDll.}"
  }, 
  {
    "name": "variable_bind", 
    "type": "skProc", 
    "code": "proc variable_bind*(a2: cstring; a3: cstring): cint {.cdecl, \u000A    importc: \"rl_variable_bind\", dynlib: readlineDll.}"
  }, 
  {
    "name": "set_key", 
    "type": "skProc", 
    "code": "proc set_key*(a2: cstring; a3: TCommandFunc; a4: PKeymap): cint {.cdecl, \u000A    importc: \"rl_set_key\", dynlib: readlineDll.}"
  }, 
  {
    "name": "macro_bind", 
    "type": "skProc", 
    "code": "proc macro_bind*(a2: cstring; a3: cstring; a4: PKeymap): cint {.cdecl, \u000A    importc: \"rl_macro_bind\", dynlib: readlineDll.}"
  }, 
  {
    "name": "translate_keyseq", 
    "type": "skProc", 
    "code": "proc translate_keyseq*(a2: cstring; a3: cstring; a4: ptr cint): cint {.cdecl, \u000A    importc: \"rl_translate_keyseq\", dynlib: readlineDll.}"
  }, 
  {
    "name": "untranslate_keyseq", 
    "type": "skProc", 
    "code": "proc untranslate_keyseq*(a2: cint): cstring {.cdecl, \u000A    importc: \"rl_untranslate_keyseq\", dynlib: readlineDll.}"
  }, 
  {
    "name": "named_function", 
    "type": "skProc", 
    "code": "proc named_function*(a2: cstring): TCommandFunc {.cdecl, \u000A    importc: \"rl_named_function\", dynlib: readlineDll.}"
  }, 
  {
    "name": "function_of_keyseq", 
    "type": "skProc", 
    "code": "proc function_of_keyseq*(a2: cstring; a3: PKeymap; a4: ptr cint): TCommandFunc {.\u000A    cdecl, importc: \"rl_function_of_keyseq\", dynlib: readlineDll.}"
  }, 
  {
    "name": "list_funmap_names", 
    "type": "skProc", 
    "code": "proc list_funmap_names*() {.cdecl, importc: \"rl_list_funmap_names\", \u000A                            dynlib: readlineDll.}"
  }, 
  {
    "name": "invoking_keyseqs_in_map", 
    "type": "skProc", 
    "code": "proc invoking_keyseqs_in_map*(a2: TCommandFunc; a3: PKeymap): cstringArray {.\u000A    cdecl, importc: \"rl_invoking_keyseqs_in_map\", dynlib: readlineDll.}"
  }, 
  {
    "name": "invoking_keyseqs", 
    "type": "skProc", 
    "code": "proc invoking_keyseqs*(a2: TCommandFunc): cstringArray {.cdecl, \u000A    importc: \"rl_invoking_keyseqs\", dynlib: readlineDll.}"
  }, 
  {
    "name": "function_dumper", 
    "type": "skProc", 
    "code": "proc function_dumper*(a2: cint) {.cdecl, importc: \"rl_function_dumper\", \u000A                                  dynlib: readlineDll.}"
  }, 
  {
    "name": "macro_dumper", 
    "type": "skProc", 
    "code": "proc macro_dumper*(a2: cint) {.cdecl, importc: \"rl_macro_dumper\", \u000A                               dynlib: readlineDll.}"
  }, 
  {
    "name": "variable_dumper", 
    "type": "skProc", 
    "code": "proc variable_dumper*(a2: cint) {.cdecl, importc: \"rl_variable_dumper\", \u000A                                  dynlib: readlineDll.}"
  }, 
  {
    "name": "read_init_file", 
    "type": "skProc", 
    "code": "proc read_init_file*(a2: cstring): cint {.cdecl, importc: \"rl_read_init_file\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "parse_and_bind", 
    "type": "skProc", 
    "code": "proc parse_and_bind*(a2: cstring): cint {.cdecl, importc: \"rl_parse_and_bind\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "get_keymap_name", 
    "type": "skProc", 
    "code": "proc get_keymap_name*(a2: PKeymap): cstring {.cdecl, \u000A    importc: \"rl_get_keymap_name\", dynlib: readlineDll.}"
  }, 
  {
    "name": "set_keymap_from_edit_mode", 
    "type": "skProc", 
    "code": "proc set_keymap_from_edit_mode*() {.cdecl, \u000A                                    importc: \"rl_set_keymap_from_edit_mode\", \u000A                                    dynlib: readlineDll.}"
  }, 
  {
    "name": "get_keymap_name_from_edit_mode", 
    "type": "skProc", 
    "code": "proc get_keymap_name_from_edit_mode*(): cstring {.cdecl, \u000A    importc: \"rl_get_keymap_name_from_edit_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "add_funmap_entry", 
    "type": "skProc", 
    "code": "proc add_funmap_entry*(a2: cstring; a3: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_add_funmap_entry\", dynlib: readlineDll.}"
  }, 
  {
    "name": "funmap_names", 
    "type": "skProc", 
    "code": "proc funmap_names*(): cstringArray {.cdecl, importc: \"rl_funmap_names\", \u000A                                     dynlib: readlineDll.}"
  }, 
  {
    "name": "initialize_funmap", 
    "type": "skProc", 
    "code": "proc initialize_funmap*() {.cdecl, importc: \"rl_initialize_funmap\", \u000A                            dynlib: readlineDll.}"
  }, 
  {
    "name": "push_macro_input", 
    "type": "skProc", 
    "code": "proc push_macro_input*(a2: cstring) {.cdecl, importc: \"rl_push_macro_input\", \u000A                                      dynlib: readlineDll.}"
  }, 
  {
    "name": "add_undo", 
    "type": "skProc", 
    "code": "proc add_undo*(a2: Tundo_code; a3: cint; a4: cint; a5: cstring) {.cdecl, \u000A    importc: \"rl_add_undo\", dynlib: readlineDll.}"
  }, 
  {
    "name": "free_undo_list", 
    "type": "skProc", 
    "code": "proc free_undo_list*() {.cdecl, importc: \"rl_free_undo_list\", \u000A                         dynlib: readlineDll.}"
  }, 
  {
    "name": "do_undo", 
    "type": "skProc", 
    "code": "proc do_undo*(): cint {.cdecl, importc: \"rl_do_undo\", dynlib: readlineDll.}"
  }, 
  {
    "name": "begin_undo_group", 
    "type": "skProc", 
    "code": "proc begin_undo_group*(): cint {.cdecl, importc: \"rl_begin_undo_group\", \u000A                                 dynlib: readlineDll.}"
  }, 
  {
    "name": "end_undo_group", 
    "type": "skProc", 
    "code": "proc end_undo_group*(): cint {.cdecl, importc: \"rl_end_undo_group\", \u000A                               dynlib: readlineDll.}"
  }, 
  {
    "name": "modifying", 
    "type": "skProc", 
    "code": "proc modifying*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_modifying\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "redisplay", 
    "type": "skProc", 
    "code": "proc redisplay*() {.cdecl, importc: \"rl_redisplay\", dynlib: readlineDll.}"
  }, 
  {
    "name": "on_new_line", 
    "type": "skProc", 
    "code": "proc on_new_line*(): cint {.cdecl, importc: \"rl_on_new_line\", \u000A                            dynlib: readlineDll.}"
  }, 
  {
    "name": "on_new_line_with_prompt", 
    "type": "skProc", 
    "code": "proc on_new_line_with_prompt*(): cint {.cdecl, \u000A                                        importc: \"rl_on_new_line_with_prompt\", \u000A                                        dynlib: readlineDll.}"
  }, 
  {
    "name": "forced_update_display", 
    "type": "skProc", 
    "code": "proc forced_update_display*(): cint {.cdecl, \u000A                                      importc: \"rl_forced_update_display\", \u000A                                      dynlib: readlineDll.}"
  }, 
  {
    "name": "clear_message", 
    "type": "skProc", 
    "code": "proc clear_message*(): cint {.cdecl, importc: \"rl_clear_message\", \u000A                              dynlib: readlineDll.}"
  }, 
  {
    "name": "reset_line_state", 
    "type": "skProc", 
    "code": "proc reset_line_state*(): cint {.cdecl, importc: \"rl_reset_line_state\", \u000A                                 dynlib: readlineDll.}"
  }, 
  {
    "name": "crlf", 
    "type": "skProc", 
    "code": "proc crlf*(): cint {.cdecl, importc: \"rl_crlf\", dynlib: readlineDll.}"
  }, 
  {
    "name": "message", 
    "type": "skProc", 
    "code": "proc message*(a2: cstring): cint {.varargs, cdecl, importc: \"rl_message\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "show_char", 
    "type": "skProc", 
    "code": "proc show_char*(a2: cint): cint {.cdecl, importc: \"rl_show_char\", \u000A                                  dynlib: readlineDll.}"
  }, 
  {
    "name": "character_len", 
    "type": "skProc", 
    "code": "proc character_len*(a2: cint; a3: cint): cint {.cdecl, \u000A    importc: \"rl_character_len\", dynlib: readlineDll.}"
  }, 
  {
    "name": "save_prompt", 
    "type": "skProc", 
    "code": "proc save_prompt*() {.cdecl, importc: \"rl_save_prompt\", dynlib: readlineDll.}"
  }, 
  {
    "name": "restore_prompt", 
    "type": "skProc", 
    "code": "proc restore_prompt*() {.cdecl, importc: \"rl_restore_prompt\", \u000A                         dynlib: readlineDll.}"
  }, 
  {
    "name": "replace_line", 
    "type": "skProc", 
    "code": "proc replace_line*(a2: cstring; a3: cint) {.cdecl, importc: \"rl_replace_line\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "insert_text", 
    "type": "skProc", 
    "code": "proc insert_text*(a2: cstring): cint {.cdecl, importc: \"rl_insert_text\", \u000A                                       dynlib: readlineDll.}"
  }, 
  {
    "name": "delete_text", 
    "type": "skProc", 
    "code": "proc delete_text*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_delete_text\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "kill_text", 
    "type": "skProc", 
    "code": "proc kill_text*(a2: cint; a3: cint): cint {.cdecl, importc: \"rl_kill_text\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "copy_text", 
    "type": "skProc", 
    "code": "proc copy_text*(a2: cint; a3: cint): cstring {.cdecl, importc: \"rl_copy_text\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "prep_terminal", 
    "type": "skProc", 
    "code": "proc prep_terminal*(a2: cint) {.cdecl, importc: \"rl_prep_terminal\", \u000A                                dynlib: readlineDll.}"
  }, 
  {
    "name": "deprep_terminal", 
    "type": "skProc", 
    "code": "proc deprep_terminal*() {.cdecl, importc: \"rl_deprep_terminal\", \u000A                          dynlib: readlineDll.}"
  }, 
  {
    "name": "tty_set_default_bindings", 
    "type": "skProc", 
    "code": "proc tty_set_default_bindings*(a2: PKeymap) {.cdecl, \u000A    importc: \"rl_tty_set_default_bindings\", dynlib: readlineDll.}"
  }, 
  {
    "name": "tty_unset_default_bindings", 
    "type": "skProc", 
    "code": "proc tty_unset_default_bindings*(a2: PKeymap) {.cdecl, \u000A    importc: \"rl_tty_unset_default_bindings\", dynlib: readlineDll.}"
  }, 
  {
    "name": "reset_terminal", 
    "type": "skProc", 
    "code": "proc reset_terminal*(a2: cstring): cint {.cdecl, importc: \"rl_reset_terminal\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "resize_terminal", 
    "type": "skProc", 
    "code": "proc resize_terminal*() {.cdecl, importc: \"rl_resize_terminal\", \u000A                          dynlib: readlineDll.}"
  }, 
  {
    "name": "set_screen_size", 
    "type": "skProc", 
    "code": "proc set_screen_size*(a2: cint; a3: cint) {.cdecl, \u000A    importc: \"rl_set_screen_size\", dynlib: readlineDll.}"
  }, 
  {
    "name": "get_screen_size", 
    "type": "skProc", 
    "code": "proc get_screen_size*(a2: ptr cint; a3: ptr cint) {.cdecl, \u000A    importc: \"rl_get_screen_size\", dynlib: readlineDll.}"
  }, 
  {
    "name": "reset_screen_size", 
    "type": "skProc", 
    "code": "proc reset_screen_size*() {.cdecl, importc: \"rl_reset_screen_size\", \u000A                            dynlib: readlineDll.}"
  }, 
  {
    "name": "get_termcap", 
    "type": "skProc", 
    "code": "proc get_termcap*(a2: cstring): cstring {.cdecl, importc: \"rl_get_termcap\", \u000A    dynlib: readlineDll.}"
  }, 
  {
    "name": "stuff_char", 
    "type": "skProc", 
    "code": "proc stuff_char*(a2: cint): cint {.cdecl, importc: \"rl_stuff_char\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "execute_next", 
    "type": "skProc", 
    "code": "proc execute_next*(a2: cint): cint {.cdecl, importc: \"rl_execute_next\", \u000A                                     dynlib: readlineDll.}"
  }, 
  {
    "name": "clear_pending_input", 
    "type": "skProc", 
    "code": "proc clear_pending_input*(): cint {.cdecl, importc: \"rl_clear_pending_input\", \u000A                                    dynlib: readlineDll.}"
  }, 
  {
    "name": "read_key", 
    "type": "skProc", 
    "code": "proc read_key*(): cint {.cdecl, importc: \"rl_read_key\", dynlib: readlineDll.}"
  }, 
  {
    "name": "getc", 
    "type": "skProc", 
    "code": "proc getc*(a2: File): cint {.cdecl, importc: \"rl_getc\", dynlib: readlineDll.}"
  }, 
  {
    "name": "set_keyboard_input_timeout", 
    "type": "skProc", 
    "code": "proc set_keyboard_input_timeout*(a2: cint): cint {.cdecl, \u000A    importc: \"rl_set_keyboard_input_timeout\", dynlib: readlineDll.}"
  }, 
  {
    "name": "extend_line_buffer", 
    "type": "skProc", 
    "code": "proc extend_line_buffer*(a2: cint) {.cdecl, importc: \"rl_extend_line_buffer\", \u000A                                     dynlib: readlineDll.}"
  }, 
  {
    "name": "ding", 
    "type": "skProc", 
    "code": "proc ding*(): cint {.cdecl, importc: \"rl_ding\", dynlib: readlineDll.}"
  }, 
  {
    "name": "alphabetic", 
    "type": "skProc", 
    "code": "proc alphabetic*(a2: cint): cint {.cdecl, importc: \"rl_alphabetic\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "free", 
    "type": "skProc", 
    "code": "proc free*(a2: pointer) {.cdecl, importc: \"rl_free\", dynlib: readlineDll.}"
  }, 
  {
    "name": "set_signals", 
    "type": "skProc", 
    "code": "proc set_signals*(): cint {.cdecl, importc: \"rl_set_signals\", \u000A                            dynlib: readlineDll.}"
  }, 
  {
    "name": "clear_signals", 
    "type": "skProc", 
    "code": "proc clear_signals*(): cint {.cdecl, importc: \"rl_clear_signals\", \u000A                              dynlib: readlineDll.}"
  }, 
  {
    "name": "cleanup_after_signal", 
    "type": "skProc", 
    "code": "proc cleanup_after_signal*() {.cdecl, importc: \"rl_cleanup_after_signal\", \u000A                               dynlib: readlineDll.}"
  }, 
  {
    "name": "reset_after_signal", 
    "type": "skProc", 
    "code": "proc reset_after_signal*() {.cdecl, importc: \"rl_reset_after_signal\", \u000A                             dynlib: readlineDll.}"
  }, 
  {
    "name": "free_line_state", 
    "type": "skProc", 
    "code": "proc free_line_state*() {.cdecl, importc: \"rl_free_line_state\", \u000A                          dynlib: readlineDll.}"
  }, 
  {
    "name": "echo_signal_char", 
    "type": "skProc", 
    "code": "proc echo_signal_char*(a2: cint) {.cdecl, importc: \"rl_echo_signal_char\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "set_paren_blink_timeout", 
    "type": "skProc", 
    "code": "proc set_paren_blink_timeout*(a2: cint): cint {.cdecl, \u000A    importc: \"rl_set_paren_blink_timeout\", dynlib: readlineDll.}"
  }, 
  {
    "name": "maybe_save_line", 
    "type": "skProc", 
    "code": "proc maybe_save_line*(): cint {.cdecl, importc: \"rl_maybe_save_line\", \u000A                                dynlib: readlineDll.}"
  }, 
  {
    "name": "maybe_unsave_line", 
    "type": "skProc", 
    "code": "proc maybe_unsave_line*(): cint {.cdecl, importc: \"rl_maybe_unsave_line\", \u000A                                  dynlib: readlineDll.}"
  }, 
  {
    "name": "maybe_replace_line", 
    "type": "skProc", 
    "code": "proc maybe_replace_line*(): cint {.cdecl, importc: \"rl_maybe_replace_line\", \u000A                                   dynlib: readlineDll.}"
  }, 
  {
    "name": "complete_internal", 
    "type": "skProc", 
    "code": "proc complete_internal*(a2: cint): cint {.cdecl, \u000A    importc: \"rl_complete_internal\", dynlib: readlineDll.}"
  }, 
  {
    "name": "display_match_list", 
    "type": "skProc", 
    "code": "proc display_match_list*(a2: cstringArray; a3: cint; a4: cint) {.cdecl, \u000A    importc: \"rl_display_match_list\", dynlib: readlineDll.}"
  }, 
  {
    "name": "completion_matches", 
    "type": "skProc", 
    "code": "proc completion_matches*(a2: cstring; a3: Tcompentry_func): cstringArray {.\u000A    cdecl, importc: \"rl_completion_matches\", dynlib: readlineDll.}"
  }, 
  {
    "name": "username_completion_function", 
    "type": "skProc", 
    "code": "proc username_completion_function*(a2: cstring; a3: cint): cstring {.cdecl, \u000A    importc: \"rl_username_completion_function\", dynlib: readlineDll.}"
  }, 
  {
    "name": "filename_completion_function", 
    "type": "skProc", 
    "code": "proc filename_completion_function*(a2: cstring; a3: cint): cstring {.cdecl, \u000A    importc: \"rl_filename_completion_function\", dynlib: readlineDll.}"
  }, 
  {
    "name": "completion_mode", 
    "type": "skProc", 
    "code": "proc completion_mode*(a2: TCommandFunc): cint {.cdecl, \u000A    importc: \"rl_completion_mode\", dynlib: readlineDll.}"
  }, 
  {
    "name": "READERR", 
    "type": "skConst", 
    "code": "READERR* = (- 2)"
  }, 
  {
    "name": "PROMPT_END_IGNORE", 
    "type": "skConst", 
    "code": "PROMPT_END_IGNORE* = '\\x02'"
  }, 
  {
    "name": "MULT_MATCH", 
    "type": "skConst", 
    "code": "MULT_MATCH* = 2"
  }, 
  {
    "name": "STATE_DONE", 
    "type": "skConst", 
    "code": "STATE_DONE* = 0x01000000"
  }, 
  {
    "name": "SETSTATE", 
    "type": "skTemplate", 
    "code": "template SETSTATE*(x: expr): stmt"
  }, 
  {
    "name": "UNSETSTATE", 
    "type": "skTemplate", 
    "code": "template UNSETSTATE*(x: expr): stmt"
  }, 
  {
    "name": "ISSTATE", 
    "type": "skTemplate", 
    "code": "template ISSTATE*(x: expr): expr"
  }, 
  {
    "name": "Treadline_state", 
    "type": "skType", 
    "code": "Treadline_state* {.pure, final.} = object \u000A  point*: cint\u000A  theEnd*: cint\u000A  mark*: cint\u000A  buffer*: cstring\u000A  buflen*: cint\u000A  ul*: ptr TUNDO_LIST\u000A  prompt*: cstring\u000A  rlstate*: cint\u000A  done*: cint\u000A  kmap*: PKeymap\u000A  lastfunc*: TCommandFunc\u000A  insmode*: cint\u000A  edmode*: cint\u000A  kseqlen*: cint\u000A  inf*: File\u000A  outf*: File\u000A  pendingin*: cint\u000A  theMacro*: cstring\u000A  catchsigs*: cint\u000A  catchsigwinch*: cint\u000A  reserved*: array[0 .. 64 - 1, char]\u000A"
  }, 
  {
    "name": "save_state", 
    "type": "skProc", 
    "code": "proc save_state*(a2: ptr Treadline_state): cint {.cdecl, \u000A    importc: \"rl_save_state\", dynlib: readlineDll.}"
  }, 
  {
    "name": "restore_state", 
    "type": "skProc", 
    "code": "proc restore_state*(a2: ptr Treadline_state): cint {.cdecl, \u000A    importc: \"rl_restore_state\", dynlib: readlineDll.}"
  }
]