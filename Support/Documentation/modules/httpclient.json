[
  {
    "comment": "This module implements a simple HTTP client that can be used to retrieve\u000A## webpages/other data.\u000A##\u000A##\u000A## **Note**: This module is not ideal, connection is not kept alive so sites with\u000A## many redirects are expensive. As such in the future this module may change,\u000A## and the current procedures will be deprecated.\u000A##\u000A## Retrieving a website\u000A## ====================\u000A##\u000A## This example uses HTTP GET to retrieve\u000A## ``http://google.com``\u000A##\u000A## .. code-block:: Nim\u000A##   echo(getContent(\"http://google.com\"))\u000A##\u000A## Using HTTP POST\u000A## ===============\u000A##\u000A## This example demonstrates the usage of the W3 HTML Validator, it\u000A## uses ``multipart/form-data`` as the ``Content-Type`` to send the HTML to\u000A## the server.\u000A##\u000A## .. code-block:: Nim\u000A##   var headers: string = \"Content-Type: multipart/form-data; boundary=xyz\\c\\L\"\u000A##   var body: string = \"--xyz\\c\\L\"\u000A##   # soap 1.2 output\u000A##   body.add(\"Content-Disposition: form-data; name=\\\"output\\\"\\c\\L\")\u000A##   body.add(\"\\c\\Lsoap12\\c\\L\")\u000A##\u000A##   # html\u000A##   body.add(\"--xyz\\c\\L\")\u000A##   body.add(\"Content-Disposition: form-data; name=\\\"uploaded_file\\\";\" &\u000A##            \" filename=\\\"test.html\\\"\\c\\L\")\u000A##   body.add(\"Content-Type: text/html\\c\\L\")\u000A##   body.add(\"\\c\\L<html><head></head><body><p>test</p></body></html>\\c\\L\")\u000A##   body.add(\"--xyz--\")\u000A##\u000A##   echo(postContent(\"http://validator.w3.org/check\", headers, body))\u000A##\u000A## Asynchronous HTTP requests\u000A## ==========================\u000A##\u000A## You simply have to create a new instance of the ``AsyncHttpClient`` object.\u000A## You may then use ``await`` on the functions defined for that object.\u000A## Keep in mind that the following code needs to be inside an asynchronous\u000A## procedure.\u000A##\u000A## .. code-block::nim\u000A##\u000A##    var client = newAsyncHttpClient()\u000A##    var resp = await client.request(\"http://google.com\")\u000A##\u000A## SSL/TLS support\u000A## ===============\u000A## This requires the OpenSSL library, fortunately it's widely used and installed\u000A## on many operating systems. httpclient will use SSL automatically if you give\u000A## any of the functions a url with the ``https`` schema, for example:\u000A## ``https://github.com/``, you also have to compile with ``ssl`` defined like so:\u000A## ``nim c -d:ssl ...``.\u000A##\u000A## Timeouts\u000A## ========\u000A## Currently all functions support an optional timeout, by default the timeout is set to\u000A## `-1` which means that the function will never time out. The timeout is\u000A## measured in miliseconds, once it is set any call on a socket which may\u000A## block will be susceptible to this timeout, however please remember that the\u000A## function as a whole can take longer than the specified timeout, only\u000A## individual internal calls on the socket are affected. In practice this means\u000A## that as long as the server is sending data an exception will not be raised,\u000A## if however data does not reach client within the specified timeout an ETimeout\u000A## exception will then be raised.\u000A##\u000A## Proxy\u000A## =====\u000A##\u000A## A proxy can be specified as a param to any of these procedures, the ``newProxy``\u000A## constructor should be used for this purpose. However,\u000A## currently only basic authentication is supported."
  }, 
  {
    "name": "HttpRequestError", 
    "type": "skType", 
    "description": "Thrown in the <tt class=\"docutils literal\"><span class=\"pre\">getContent</span></tt> proc and <tt class=\"docutils literal\"><span class=\"pre\">postContent</span></tt> proc, when the server returns an error", 
    "code": "HttpRequestError* = object of IOError"
  }, 
  {
    "name": "defUserAgent", 
    "type": "skConst", 
    "code": "defUserAgent* = \"Nim httpclient/0.1\""
  }, 
  {
    "name": "HttpMethod", 
    "type": "skType", 
    "description": "the requested HttpMethod", 
    "code": "HttpMethod* = enum \u000A  httpHEAD, ## Asks for the response identical to the one that would\u000A            ## correspond to a GET request, but without the response\u000A            ## body.\u000A  httpGET,                    ## Retrieves the specified resource.\u000A  httpPOST, ## Submits data to be processed to the identified\u000A            ## resource. The data is included in the body of the\u000A            ## request.\u000A  httpPUT,                    ## Uploads a representation of the specified resource.\u000A  httpDELETE,                 ## Deletes the specified resource.\u000A  httpTRACE, ## Echoes back the received request, so that a client\u000A             ## can see what intermediate servers are adding or\u000A             ## changing in the request.\u000A  httpOPTIONS, ## Returns the HTTP methods that the server supports\u000A               ## for specified address.\u000A  httpCONNECT ## Converts the request connection to a transparent\u000A              ## TCP/IP tunnel, usually used for proxies."
  }, 
  {
    "name": "newProxy", 
    "type": "skProc", 
    "description": "Constructs a new <tt class=\"docutils literal\"><span class=\"pre\">TProxy</span></tt> object.", 
    "code": "proc newProxy*(url: string; auth = \"\"): Proxy"
  }, 
  {
    "name": "request", 
    "type": "skProc", 
    "description": "<p>Requests <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> with the specified <tt class=\"docutils literal\"><span class=\"pre\">httpMethod</span></tt>.<br />Extra headers can be specified and must be seperated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt><br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc request*(url: string; httpMethod = httpGET; extraHeaders = \"\"; body = \"\"; \u000A              sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A              userAgent = defUserAgent; proxy: Proxy = nil): Response"
  }, 
  {
    "name": "get", 
    "type": "skProc", 
    "description": "<p>GETs the <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns a <tt class=\"docutils literal\"><span class=\"pre\">Response</span></tt> object<br />This proc also handles redirection<br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc get*(url: string; extraHeaders = \"\"; maxRedirects = 5; \u000A          sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A          userAgent = defUserAgent; proxy: Proxy = nil): Response"
  }, 
  {
    "name": "getContent", 
    "type": "skProc", 
    "description": "<p>GETs the body and returns it as a string.<br />Raises exceptions for the status codes <tt class=\"docutils literal\"><span class=\"pre\">4xx</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">5xx</span></tt><br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc getContent*(url: string; extraHeaders = \"\"; maxRedirects = 5; \u000A                 sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A                 userAgent = defUserAgent; proxy: Proxy = nil): string"
  }, 
  {
    "name": "post", 
    "type": "skProc", 
    "description": "<p>POSTs <tt class=\"docutils literal\"><span class=\"pre\">body</span></tt> to the <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns a <tt class=\"docutils literal\"><span class=\"pre\">Response</span></tt> object.<br />This proc adds the necessary Content-Length header.<br />This proc also handles redirection.<br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc post*(url: string; extraHeaders = \"\"; body = \"\"; maxRedirects = 5; \u000A           sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A           userAgent = defUserAgent; proxy: Proxy = nil): Response"
  }, 
  {
    "name": "postContent", 
    "type": "skProc", 
    "description": "<p>POSTs <tt class=\"docutils literal\"><span class=\"pre\">body</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns the response's body as a string<br />Raises exceptions for the status codes <tt class=\"docutils literal\"><span class=\"pre\">4xx</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">5xx</span></tt><br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc postContent*(url: string; extraHeaders = \"\"; body = \"\"; maxRedirects = 5; \u000A                  sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A                  userAgent = defUserAgent; proxy: Proxy = nil): string"
  }, 
  {
    "name": "downloadFile", 
    "type": "skProc", 
    "description": "<p>Downloads <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and saves it to <tt class=\"docutils literal\"><span class=\"pre\">outputFilename</span></tt><br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000A", 
    "code": "proc downloadFile*(url: string; outputFilename: string; \u000A                   sslContext: SSLContext = defaultSSLContext; timeout = - 1; \u000A                   userAgent = defUserAgent; proxy: Proxy = nil)"
  }, 
  {
    "name": "AsyncHttpClient", 
    "type": "skType", 
    "description": "Where we are currently connected.", 
    "code": "AsyncHttpClient* = ref object \u000A  socket: AsyncSocket\u000A  connected: bool\u000A  currentURL: Uri\u000A  headers*: StringTableRef\u000A  maxRedirects: int\u000A  userAgent: string\u000A  when defined(ssl): \u000A      sslContext: net.SslContext\u000A\u000A  "
  }, 
  {
    "name": "newAsyncHttpClient", 
    "type": "skProc", 
    "description": "<p>Creates a new AsyncHttpClient instance.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">userAgent</span></tt> specifies the user agent that will be used when making requests.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">maxRedirects</span></tt> specifies the maximum amount of redirects to follow, default is 5.</p>\u000A<p><tt class=\"docutils literal\"><span class=\"pre\">sslContext</span></tt> specifies the SSL context to use for HTTPS requests.</p>\u000A", 
    "code": "proc newAsyncHttpClient*(userAgent = defUserAgent; maxRedirects = 5; \u000A                         sslContext = defaultSslContext): AsyncHttpClient"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "Closes any connections held by the HTTP client.", 
    "code": "proc close*(client: AsyncHttpClient)"
  }, 
  {
    "name": "request", 
    "type": "skProc", 
    "description": "<p>Connects to the hostname specified by the URL and performs a request using the method specified.</p>\u000A<p>Connection will kept alive. Further requests on the same <tt class=\"docutils literal\"><span class=\"pre\">client</span></tt> to the same hostname will not require a new connection to be made. The connection can be closed by using the <tt class=\"docutils literal\"><span class=\"pre\">close</span></tt> procedure.</p>\u000A<p>The returned future will complete once the request is completed.</p>\u000A", 
    "code": "proc request*(client: AsyncHttpClient; url: string; httpMethod = httpGET; \u000A              body = \"\"): Future[Response] {.async.}"
  }, 
  {
    "name": "get", 
    "type": "skProc", 
    "description": "<p>Connects to the hostname specified by the URL and performs a GET request.</p>\u000A<p>This procedure will follow redirects up to a maximum number of redirects specified in <tt class=\"docutils literal\"><span class=\"pre\">newAsyncHttpClient</span></tt>.</p>\u000A", 
    "code": "proc get*(client: AsyncHttpClient; url: string): Future[Response] {.async.}"
  }
]