[
  {
    "comment": "Interface to the zlib http://www.zlib.net/ compression library."
  }, 
  {
    "name": "GzFile", 
    "type": "skType", 
    "code": "GzFile* = pointer"
  }, 
  {
    "name": "Z_NULL", 
    "type": "skConst", 
    "code": "Z_NULL* = 0"
  }, 
  {
    "name": "zlibVersion", 
    "type": "skProc", 
    "code": "proc zlibVersion*(): cstring {.cdecl, dynlib: libz, importc: \"zlibVersion\".}"
  }, 
  {
    "name": "deflate", 
    "type": "skProc", 
    "code": "proc deflate*(strm: var TZStream; flush: int32): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflate\".}"
  }, 
  {
    "name": "deflateEnd", 
    "type": "skProc", 
    "code": "proc deflateEnd*(strm: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflateEnd\".}"
  }, 
  {
    "name": "inflate", 
    "type": "skProc", 
    "code": "proc inflate*(strm: var TZStream; flush: int32): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflate\".}"
  }, 
  {
    "name": "inflateEnd", 
    "type": "skProc", 
    "code": "proc inflateEnd*(strm: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateEnd\".}"
  }, 
  {
    "name": "deflateSetDictionary", 
    "type": "skProc", 
    "code": "proc deflateSetDictionary*(strm: var TZStream; dictionary: Pbytef; \u000A                           dictLength: Uint): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflateSetDictionary\".}"
  }, 
  {
    "name": "deflateCopy", 
    "type": "skProc", 
    "code": "proc deflateCopy*(dest, source: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflateCopy\".}"
  }, 
  {
    "name": "deflateReset", 
    "type": "skProc", 
    "code": "proc deflateReset*(strm: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflateReset\".}"
  }, 
  {
    "name": "deflateParams", 
    "type": "skProc", 
    "code": "proc deflateParams*(strm: var TZStream; level: int32; strategy: int32): int32 {.\u000A    cdecl, dynlib: libz, importc: \"deflateParams\".}"
  }, 
  {
    "name": "inflateSetDictionary", 
    "type": "skProc", 
    "code": "proc inflateSetDictionary*(strm: var TZStream; dictionary: Pbytef; \u000A                           dictLength: Uint): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateSetDictionary\".}"
  }, 
  {
    "name": "inflateSync", 
    "type": "skProc", 
    "code": "proc inflateSync*(strm: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateSync\".}"
  }, 
  {
    "name": "inflateReset", 
    "type": "skProc", 
    "code": "proc inflateReset*(strm: var TZStream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateReset\".}"
  }, 
  {
    "name": "compress", 
    "type": "skProc", 
    "code": "proc compress*(dest: Pbytef; destLen: Pulongf; source: Pbytef; sourceLen: Ulong): cint {.\u000A    cdecl, dynlib: libz, importc: \"compress\".}"
  }, 
  {
    "name": "compress2", 
    "type": "skProc", 
    "code": "proc compress2*(dest: Pbytef; destLen: Pulongf; source: Pbytef; \u000A                sourceLen: Ulong; level: cint): cint {.cdecl, dynlib: libz, \u000A    importc: \"compress2\".}"
  }, 
  {
    "name": "uncompress", 
    "type": "skProc", 
    "code": "proc uncompress*(dest: Pbytef; destLen: Pulongf; source: Pbytef; \u000A                 sourceLen: Ulong): cint {.cdecl, dynlib: libz, \u000A    importc: \"uncompress\".}"
  }, 
  {
    "name": "compressBound", 
    "type": "skProc", 
    "code": "proc compressBound*(sourceLen: Ulong): Ulong {.cdecl, dynlib: libz, importc.}"
  }, 
  {
    "name": "gzopen", 
    "type": "skProc", 
    "code": "proc gzopen*(path: cstring; mode: cstring): GzFile {.cdecl, dynlib: libz, \u000A    importc: \"gzopen\".}"
  }, 
  {
    "name": "gzdopen", 
    "type": "skProc", 
    "code": "proc gzdopen*(fd: int32; mode: cstring): GzFile {.cdecl, dynlib: libz, \u000A    importc: \"gzdopen\".}"
  }, 
  {
    "name": "gzsetparams", 
    "type": "skProc", 
    "code": "proc gzsetparams*(thefile: GzFile; level: int32; strategy: int32): int32 {.\u000A    cdecl, dynlib: libz, importc: \"gzsetparams\".}"
  }, 
  {
    "name": "gzread", 
    "type": "skProc", 
    "code": "proc gzread*(thefile: GzFile; buf: pointer; length: int): int32 {.cdecl, \u000A    dynlib: libz, importc: \"gzread\".}"
  }, 
  {
    "name": "gzwrite", 
    "type": "skProc", 
    "code": "proc gzwrite*(thefile: GzFile; buf: pointer; length: int): int32 {.cdecl, \u000A    dynlib: libz, importc: \"gzwrite\".}"
  }, 
  {
    "name": "gzprintf", 
    "type": "skProc", 
    "code": "proc gzprintf*(thefile: GzFile; format: Pbytef): int32 {.varargs, cdecl, \u000A    dynlib: libz, importc: \"gzprintf\".}"
  }, 
  {
    "name": "gzputs", 
    "type": "skProc", 
    "code": "proc gzputs*(thefile: GzFile; s: Pbytef): int32 {.cdecl, dynlib: libz, \u000A    importc: \"gzputs\".}"
  }, 
  {
    "name": "gzgets", 
    "type": "skProc", 
    "code": "proc gzgets*(thefile: GzFile; buf: Pbytef; length: int32): Pbytef {.cdecl, \u000A    dynlib: libz, importc: \"gzgets\".}"
  }, 
  {
    "name": "gzputc", 
    "type": "skProc", 
    "code": "proc gzputc*(thefile: GzFile; c: char): char {.cdecl, dynlib: libz, \u000A    importc: \"gzputc\".}"
  }, 
  {
    "name": "gzgetc", 
    "type": "skProc", 
    "code": "proc gzgetc*(thefile: GzFile): char {.cdecl, dynlib: libz, importc: \"gzgetc\".}"
  }, 
  {
    "name": "gzflush", 
    "type": "skProc", 
    "code": "proc gzflush*(thefile: GzFile; flush: int32): int32 {.cdecl, dynlib: libz, \u000A    importc: \"gzflush\".}"
  }, 
  {
    "name": "gzseek", 
    "type": "skProc", 
    "code": "proc gzseek*(thefile: GzFile; offset: ZOffT; whence: int32): ZOffT {.cdecl, \u000A    dynlib: libz, importc: \"gzseek\".}"
  }, 
  {
    "name": "gzrewind", 
    "type": "skProc", 
    "code": "proc gzrewind*(thefile: GzFile): int32 {.cdecl, dynlib: libz, \u000A    importc: \"gzrewind\".}"
  }, 
  {
    "name": "gztell", 
    "type": "skProc", 
    "code": "proc gztell*(thefile: GzFile): ZOffT {.cdecl, dynlib: libz, importc: \"gztell\".}"
  }, 
  {
    "name": "gzeof", 
    "type": "skProc", 
    "code": "proc gzeof*(thefile: GzFile): int {.cdecl, dynlib: libz, importc: \"gzeof\".}"
  }, 
  {
    "name": "gzclose", 
    "type": "skProc", 
    "code": "proc gzclose*(thefile: GzFile): int32 {.cdecl, dynlib: libz, importc: \"gzclose\".}"
  }, 
  {
    "name": "gzerror", 
    "type": "skProc", 
    "code": "proc gzerror*(thefile: GzFile; errnum: var int32): Pbytef {.cdecl, dynlib: libz, \u000A    importc: \"gzerror\".}"
  }, 
  {
    "name": "adler32", 
    "type": "skProc", 
    "description": "<strong>Warning</strong>: Adler-32 requires at least a few hundred bytes to get rolling.", 
    "code": "proc adler32*(adler: Ulong; buf: Pbytef; length: Uint): Ulong {.cdecl, \u000A    dynlib: libz, importc: \"adler32\".}"
  }, 
  {
    "name": "crc32", 
    "type": "skProc", 
    "code": "proc crc32*(crc: Ulong; buf: Pbytef; length: Uint): Ulong {.cdecl, dynlib: libz, \u000A    importc: \"crc32\".}"
  }, 
  {
    "name": "deflateInitu", 
    "type": "skProc", 
    "code": "proc deflateInitu*(strm: var TZStream; level: int32; version: cstring; \u000A                   streamSize: int32): int32 {.cdecl, dynlib: libz, \u000A    importc: \"deflateInit_\".}"
  }, 
  {
    "name": "inflateInitu", 
    "type": "skProc", 
    "code": "proc inflateInitu*(strm: var TZStream; version: cstring; streamSize: int32): int32 {.\u000A    cdecl, dynlib: libz, importc: \"inflateInit_\".}"
  }, 
  {
    "name": "deflateInit", 
    "type": "skProc", 
    "code": "proc deflateInit*(strm: var TZStream; level: int32): int32"
  }, 
  {
    "name": "inflateInit", 
    "type": "skProc", 
    "code": "proc inflateInit*(strm: var TZStream): int32"
  }, 
  {
    "name": "deflateInit2u", 
    "type": "skProc", 
    "code": "proc deflateInit2u*(strm: var TZStream; level: int32; `method`: int32; \u000A                    windowBits: int32; memLevel: int32; strategy: int32; \u000A                    version: cstring; streamSize: int32): int32 {.cdecl, \u000A    dynlib: libz, importc: \"deflateInit2_\".}"
  }, 
  {
    "name": "inflateInit2u", 
    "type": "skProc", 
    "code": "proc inflateInit2u*(strm: var TZStream; windowBits: int32; version: cstring; \u000A                    streamSize: int32): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateInit2_\".}"
  }, 
  {
    "name": "deflateInit2", 
    "type": "skProc", 
    "code": "proc deflateInit2*(strm: var TZStream; \u000A                   level, `method`, windowBits, memLevel, strategy: int32): int32"
  }, 
  {
    "name": "inflateInit2", 
    "type": "skProc", 
    "code": "proc inflateInit2*(strm: var TZStream; windowBits: int32): int32"
  }, 
  {
    "name": "zError", 
    "type": "skProc", 
    "code": "proc zError*(err: int32): cstring {.cdecl, dynlib: libz, importc: \"zError\".}"
  }, 
  {
    "name": "inflateSyncPoint", 
    "type": "skProc", 
    "code": "proc inflateSyncPoint*(z: PZstream): int32 {.cdecl, dynlib: libz, \u000A    importc: \"inflateSyncPoint\".}"
  }, 
  {
    "name": "getCrcTable", 
    "type": "skProc", 
    "code": "proc getCrcTable*(): pointer {.cdecl, dynlib: libz, importc: \"get_crc_table\".}"
  }, 
  {
    "name": "zlibAllocMem", 
    "type": "skProc", 
    "code": "proc zlibAllocMem*(appData: pointer; items, size: int): pointer {.cdecl.}"
  }, 
  {
    "name": "zlibFreeMem", 
    "type": "skProc", 
    "code": "proc zlibFreeMem*(appData, `block`: pointer) {.cdecl.}"
  }, 
  {
    "name": "uncompress", 
    "type": "skProc", 
    "description": "<p>Given a deflated cstring returns its inflated version.</p>\u000A<p>Passing a nil cstring will crash this proc in release mode and assert in debug mode.</p>\u000A<p>Returns nil on problems. Failure is a very loose concept, it could be you passing a non deflated string, or it could mean not having enough memory for the inflated version.</p>\u000A<p>The uncompression algorithm is based on <a class=\"reference external\" href=\"http://stackoverflow.com/questions/17820664\">http://stackoverflow.com/questions/17820664</a> but does ignore some of the original signed/unsigned checks, so may fail with big chunks of data exceeding the positive size of an int32. The algorithm can deal with concatenated deflated values properly.</p>\u000A", 
    "code": "proc uncompress*(sourceBuf: cstring; sourceLen: int): string"
  }, 
  {
    "name": "inflate", 
    "type": "skProc", 
    "description": "<p>Convenience proc which inflates a string containing compressed data.</p>\u000A<p>Passing a nil string will crash this proc in release mode and assert in debug mode. It is ok to pass a buffer which doesn't contain deflated data, in this case the proc won't modify the buffer.</p>\u000A<p>Returns true if <cite>buffer</cite> was successfully inflated.</p>\u000A", 
    "code": "proc inflate*(buffer: var string): bool {.discardable.}"
  }
]