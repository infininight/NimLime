[
  {
    "comment": "This module implements the SMTP client protocol as specified by RFC 5321, \u000A## this can be used to send mail to any SMTP Server.\u000A## \u000A## This module also implements the protocol used to format messages, \u000A## as specified by RFC 2822.\u000A## \u000A## Example gmail use:\u000A## \u000A## \u000A## .. code-block:: Nim\u000A##   var msg = createMessage(\"Hello from Nim's SMTP\", \u000A##                           \"Hello!.\\n Is this awesome or what?\", \u000A##                           @[\"foo@gmail.com\"])\u000A##   var smtp = connect(\"smtp.gmail.com\", 465, true, true)\u000A##   smtp.auth(\"username\", \"password\")\u000A##   smtp.sendmail(\"username@gmail.com\", @[\"foo@gmail.com\"], $msg)\u000A##   \u000A## \u000A## For SSL support this module relies on OpenSSL. If you want to \u000A## enable SSL, compile with ``-d:ssl``."
  }, 
  {
    "name": "AsyncSmtp", 
    "type": "skType", 
    "code": "AsyncSmtp* = ref object \u000A  sock: AsyncSocket\u000A  address: string\u000A  port: Port\u000A  useSsl: bool\u000A  debug: bool\u000A"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "description": "Establishes a connection with a SMTP server. May fail with ReplyError or with a socket error.", 
    "code": "proc connect*(address: string; port = Port(25); ssl = false; debug = false; \u000A              sslContext = defaultSSLContext): Smtp"
  }, 
  {
    "name": "auth", 
    "type": "skProc", 
    "description": "Sends an AUTH command to the server to login as the <cite>username</cite> using <cite>password</cite>. May fail with ReplyError.", 
    "code": "proc auth*(smtp: var Smtp; username, password: string)"
  }, 
  {
    "name": "sendmail", 
    "type": "skProc", 
    "description": "Sends <cite>msg</cite> from <cite>fromaddr</cite> to <cite>toaddr</cite>. Messages may be formed using <tt class=\"docutils literal\"><span class=\"pre\">createMessage</span></tt> by converting the Message into a string.", 
    "code": "proc sendmail*(smtp: var Smtp; fromaddr: string; toaddrs: seq[string]; \u000A               msg: string)"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "Disconnects from the SMTP server and closes the socket.", 
    "code": "proc close*(smtp: Smtp)"
  }, 
  {
    "name": "createMessage", 
    "type": "skProc", 
    "description": "Creates a new MIME compliant message.", 
    "code": "proc createMessage*(mSubject, mBody: string; mTo, mCc: seq[string]; \u000A                    otherHeaders: openarray[tuple[name, value: string]]): Message"
  }, 
  {
    "name": "createMessage", 
    "type": "skProc", 
    "description": "Alternate version of the above.", 
    "code": "proc createMessage*(mSubject, mBody: string; mTo, mCc: seq[string] = @ []): Message"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "stringify for <tt class=\"docutils literal\"><span class=\"pre\">Message</span></tt>.", 
    "code": "proc `$`*(msg: Message): string"
  }, 
  {
    "name": "newAsyncSmtp", 
    "type": "skProc", 
    "description": "Creates a new <tt class=\"docutils literal\"><span class=\"pre\">AsyncSmtp</span></tt> instance.", 
    "code": "proc newAsyncSmtp*(address: string; port: Port; useSsl = false; \u000A                   sslContext = defaultSslContext): AsyncSmtp"
  }, 
  {
    "name": "connect", 
    "type": "skProc", 
    "description": "Establishes a connection with a SMTP server. May fail with ReplyError or with a socket error.", 
    "code": "proc connect*(smtp: AsyncSmtp) {.async.}"
  }, 
  {
    "name": "auth", 
    "type": "skProc", 
    "description": "Sends an AUTH command to the server to login as the <cite>username</cite> using <cite>password</cite>. May fail with ReplyError.", 
    "code": "proc auth*(smtp: AsyncSmtp; username, password: string) {.async.}"
  }, 
  {
    "name": "sendMail", 
    "type": "skProc", 
    "description": "Sends <tt class=\"docutils literal\"><span class=\"pre\">msg</span></tt> from <tt class=\"docutils literal\"><span class=\"pre\">fromAddr</span></tt> to the addresses specified in <tt class=\"docutils literal\"><span class=\"pre\">toAddrs</span></tt>. Messages may be formed using <tt class=\"docutils literal\"><span class=\"pre\">createMessage</span></tt> by converting the Message into a string.", 
    "code": "proc sendMail*(smtp: AsyncSmtp; fromAddr: string; toAddrs: seq[string]; \u000A               msg: string) {.async.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "Disconnects from the SMTP server and closes the socket.", 
    "code": "proc close*(smtp: AsyncSmtp) {.async.}"
  }
]