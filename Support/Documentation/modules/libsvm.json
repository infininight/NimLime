[
  {
    "comment": "This module is a low level wrapper for `libsvm`:idx:."
  }, 
  {
    "name": "LIBSVM_VERSION", 
    "type": "skConst", 
    "code": "LIBSVM_VERSION* = 312"
  }, 
  {
    "name": "svmdll", 
    "type": "skConst", 
    "code": "svmdll* = \"libsvm.dll\""
  }, 
  {
    "name": "Tparameter", 
    "type": "skType", 
    "code": "Tparameter* {.pure, final.} = object \u000A  typ*: TType\u000A  kernelType*: TKernelType\u000A  degree*: cint\u000A  gamma*: cdouble\u000A  coef0*: cdouble\u000A  cache_size*: cdouble\u000A  eps*: cdouble\u000A  C*: cdouble\u000A  nr_weight*: cint\u000A  weight_label*: ptr cint\u000A  weight*: ptr cdouble\u000A  nu*: cdouble\u000A  p*: cdouble\u000A  shrinking*: cint\u000A  probability*: cint\u000A"
  }, 
  {
    "name": "TModel", 
    "type": "skType", 
    "code": "TModel* {.pure, final.} = object \u000A  param*: Tparameter\u000A  nr_class*: cint\u000A  L*: cint\u000A  SV*: ptr ptr Tnode\u000A  sv_coef*: ptr ptr cdouble\u000A  rho*: ptr cdouble\u000A  probA*: ptr cdouble\u000A  probB*: ptr cdouble\u000A  label*: ptr cint\u000A  nSV*: ptr cint\u000A  free_sv*: cint\u000A"
  }, 
  {
    "name": "train", 
    "type": "skProc", 
    "code": "proc train*(prob: ptr Tproblem; param: ptr Tparameter): ptr Tmodel {.cdecl, \u000A    importc: \"svm_train\", dynlib: svmdll.}"
  }, 
  {
    "name": "cross_validation", 
    "type": "skProc", 
    "code": "proc cross_validation*(prob: ptr Tproblem; param: ptr Tparameter; nr_fold: cint; \u000A                       target: ptr cdouble) {.cdecl, \u000A    importc: \"svm_cross_validation\", dynlib: svmdll.}"
  }, 
  {
    "name": "save_model", 
    "type": "skProc", 
    "code": "proc save_model*(model_file_name: cstring; model: ptr Tmodel): cint {.cdecl, \u000A    importc: \"svm_save_model\", dynlib: svmdll.}"
  }, 
  {
    "name": "load_model", 
    "type": "skProc", 
    "code": "proc load_model*(model_file_name: cstring): ptr Tmodel {.cdecl, \u000A    importc: \"svm_load_model\", dynlib: svmdll.}"
  }, 
  {
    "name": "get_svm_type", 
    "type": "skProc", 
    "code": "proc get_svm_type*(model: ptr Tmodel): cint {.cdecl, \u000A    importc: \"svm_get_svm_type\", dynlib: svmdll.}"
  }, 
  {
    "name": "get_nr_class", 
    "type": "skProc", 
    "code": "proc get_nr_class*(model: ptr Tmodel): cint {.cdecl, \u000A    importc: \"svm_get_nr_class\", dynlib: svmdll.}"
  }, 
  {
    "name": "get_labels", 
    "type": "skProc", 
    "code": "proc get_labels*(model: ptr Tmodel; label: ptr cint) {.cdecl, \u000A    importc: \"svm_get_labels\", dynlib: svmdll.}"
  }, 
  {
    "name": "get_svr_probability", 
    "type": "skProc", 
    "code": "proc get_svr_probability*(model: ptr Tmodel): cdouble {.cdecl, \u000A    importc: \"svm_get_svr_probability\", dynlib: svmdll.}"
  }, 
  {
    "name": "predict_values", 
    "type": "skProc", 
    "code": "proc predict_values*(model: ptr Tmodel; x: ptr Tnode; dec_values: ptr cdouble): cdouble {.\u000A    cdecl, importc: \"svm_predict_values\", dynlib: svmdll.}"
  }, 
  {
    "name": "predict", 
    "type": "skProc", 
    "code": "proc predict*(model: ptr Tmodel; x: ptr Tnode): cdouble {.cdecl, \u000A    importc: \"svm_predict\", dynlib: svmdll.}"
  }, 
  {
    "name": "predict_probability", 
    "type": "skProc", 
    "code": "proc predict_probability*(model: ptr Tmodel; x: ptr Tnode; \u000A                          prob_estimates: ptr cdouble): cdouble {.cdecl, \u000A    importc: \"svm_predict_probability\", dynlib: svmdll.}"
  }, 
  {
    "name": "free_model_content", 
    "type": "skProc", 
    "code": "proc free_model_content*(model_ptr: ptr Tmodel) {.cdecl, \u000A    importc: \"svm_free_model_content\", dynlib: svmdll.}"
  }, 
  {
    "name": "free_and_destroy_model", 
    "type": "skProc", 
    "code": "proc free_and_destroy_model*(model_ptr_ptr: ptr ptr Tmodel) {.cdecl, \u000A    importc: \"svm_free_and_destroy_model\", dynlib: svmdll.}"
  }, 
  {
    "name": "destroy_param", 
    "type": "skProc", 
    "code": "proc destroy_param*(param: ptr Tparameter) {.cdecl, \u000A    importc: \"svm_destroy_param\", dynlib: svmdll.}"
  }, 
  {
    "name": "check_parameter", 
    "type": "skProc", 
    "code": "proc check_parameter*(prob: ptr Tproblem; param: ptr Tparameter): cstring {.\u000A    cdecl, importc: \"svm_check_parameter\", dynlib: svmdll.}"
  }, 
  {
    "name": "check_probability_model", 
    "type": "skProc", 
    "code": "proc check_probability_model*(model: ptr Tmodel): cint {.cdecl, \u000A    importc: \"svm_check_probability_model\", dynlib: svmdll.}"
  }, 
  {
    "name": "set_print_string_function", 
    "type": "skProc", 
    "code": "proc set_print_string_function*(print_func: proc (arg: cstring) {.cdecl.}) {.\u000A    cdecl, importc: \"svm_set_print_string_function\", dynlib: svmdll.}"
  }
]