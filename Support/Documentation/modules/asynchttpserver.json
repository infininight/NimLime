[
  {
    "comment": "This module implements a high performance asynchronous HTTP server.\u000A##\u000A## Examples\u000A## --------\u000A##\u000A## This example will create an HTTP server on port 8080. The server will\u000A## respond to all requests with a ``200 OK`` response code and \"Hello World\"\u000A## as the response body.\u000A##\u000A## .. code-block::nim\u000A##    var server = newAsyncHttpServer()\u000A##    proc cb(req: TRequest) {.async.} =\u000A##      await req.respond(Http200, \"Hello World\")\u000A##\u000A##    asyncCheck server.serve(Port(8080), cb)\u000A##    runForever()"
  }, 
  {
    "name": "HttpVersion", 
    "type": "skType", 
    "code": "HttpVersion* = enum \u000A  HttpVer11, HttpVer10"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "code": "proc `==`*(protocol: tuple[orig: string, major, minor: int]; ver: THttpVersion): bool"
  }, 
  {
    "name": "newAsyncHttpServer", 
    "type": "skProc", 
    "description": "Creates a new <tt class=\"docutils literal\"><span class=\"pre\">AsyncHttpServer</span></tt> instance.", 
    "code": "proc newAsyncHttpServer*(reuseAddr = true): PAsyncHttpServer"
  }, 
  {
    "name": "sendHeaders", 
    "type": "skProc", 
    "description": "Sends the specified headers to the requesting client.", 
    "code": "proc sendHeaders*(req: TRequest; headers: PStringTable): Future[void]"
  }, 
  {
    "name": "respond", 
    "type": "skProc", 
    "description": "<p>Responds to the request with the specified <tt class=\"docutils literal\"><span class=\"pre\">HttpCode</span></tt>, headers and content.</p>\u000A<p>This procedure will <strong>not</strong> close the client socket.</p>\u000A", 
    "code": "proc respond*(req: TRequest; code: THttpCode; content: string; \u000A              headers: PStringTable = newStringTable()) {.async.}"
  }, 
  {
    "name": "serve", 
    "type": "skProc", 
    "description": "<p>Starts the process of listening for incoming HTTP connections on the specified address and port.</p>\u000A<p>When a request is made by a client the specified callback will be called.</p>\u000A", 
    "code": "proc serve*(server: PAsyncHttpServer; port: Port; callback: proc (\u000A    request: TRequest): Future[void] {.closure, gcsafe.}; address = \"\") {.async.}"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "Terminates the async http server instance.", 
    "code": "proc close*(server: PAsyncHttpServer)"
  }
]